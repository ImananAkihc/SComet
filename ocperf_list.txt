  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  bus-cycles                                         [Hardware event]
  cache-misses                                       [Hardware event]
  cache-references                                   [Hardware event]
  cpu-cycles OR cycles                               [Hardware event]
  instructions                                       [Hardware event]
  ref-cycles                                         [Hardware event]
  alignment-faults                                   [Software event]
  bpf-output                                         [Software event]
  context-switches OR cs                             [Software event]
  cpu-clock                                          [Software event]
  cpu-migrations OR migrations                       [Software event]
  dummy                                              [Software event]
  emulation-faults                                   [Software event]
  major-faults                                       [Software event]
  minor-faults                                       [Software event]
  page-faults OR faults                              [Software event]
  task-clock                                         [Software event]
  L1-dcache-load-misses                              [Hardware cache event]
  L1-dcache-loads                                    [Hardware cache event]
  L1-dcache-stores                                   [Hardware cache event]
  L1-icache-load-misses                              [Hardware cache event]
  LLC-load-misses                                    [Hardware cache event]
  LLC-loads                                          [Hardware cache event]
  LLC-store-misses                                   [Hardware cache event]
  LLC-stores                                         [Hardware cache event]
  branch-load-misses                                 [Hardware cache event]
  branch-loads                                       [Hardware cache event]
  dTLB-load-misses                                   [Hardware cache event]
  dTLB-loads                                         [Hardware cache event]
  dTLB-store-misses                                  [Hardware cache event]
  dTLB-stores                                        [Hardware cache event]
  iTLB-load-misses                                   [Hardware cache event]
  iTLB-loads                                         [Hardware cache event]
  node-load-misses                                   [Hardware cache event]
  node-loads                                         [Hardware cache event]
  node-store-misses                                  [Hardware cache event]
  node-stores                                        [Hardware cache event]
  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]
  branch-misses OR cpu/branch-misses/                [Kernel PMU event]
  bus-cycles OR cpu/bus-cycles/                      [Kernel PMU event]
  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]
  cache-references OR cpu/cache-references/          [Kernel PMU event]
  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]
  cstate_core/c3-residency/                          [Kernel PMU event]
  cstate_core/c6-residency/                          [Kernel PMU event]
  cstate_core/c7-residency/                          [Kernel PMU event]
  cstate_pkg/c2-residency/                           [Kernel PMU event]
  cstate_pkg/c3-residency/                           [Kernel PMU event]
  cstate_pkg/c6-residency/                           [Kernel PMU event]
  cstate_pkg/c7-residency/                           [Kernel PMU event]
  cycles-ct OR cpu/cycles-ct/                        [Kernel PMU event]
  cycles-t OR cpu/cycles-t/                          [Kernel PMU event]
  el-abort OR cpu/el-abort/                          [Kernel PMU event]
  el-capacity OR cpu/el-capacity/                    [Kernel PMU event]
  el-commit OR cpu/el-commit/                        [Kernel PMU event]
  el-conflict OR cpu/el-conflict/                    [Kernel PMU event]
  el-start OR cpu/el-start/                          [Kernel PMU event]
  instructions OR cpu/instructions/                  [Kernel PMU event]
  intel_pt//                                         [Kernel PMU event]
  mem-loads OR cpu/mem-loads/                        [Kernel PMU event]
  mem-stores OR cpu/mem-stores/                      [Kernel PMU event]
  msr/aperf/                                         [Kernel PMU event]
  msr/cpu_thermal_margin/                            [Kernel PMU event]
  msr/mperf/                                         [Kernel PMU event]
  msr/pperf/                                         [Kernel PMU event]
  msr/smi/                                           [Kernel PMU event]
  msr/tsc/                                           [Kernel PMU event]
  power/energy-pkg/                                  [Kernel PMU event]
  power/energy-ram/                                  [Kernel PMU event]
  ref-cycles OR cpu/ref-cycles/                      [Kernel PMU event]
  topdown-fetch-bubbles OR cpu/topdown-fetch-bubbles/ [Kernel PMU event]
  topdown-recovery-bubbles OR cpu/topdown-recovery-bubbles/ [Kernel PMU event]
  topdown-slots-issued OR cpu/topdown-slots-issued/  [Kernel PMU event]
  topdown-slots-retired OR cpu/topdown-slots-retired/ [Kernel PMU event]
  topdown-total-slots OR cpu/topdown-total-slots/    [Kernel PMU event]
  tx-abort OR cpu/tx-abort/                          [Kernel PMU event]
  tx-capacity OR cpu/tx-capacity/                    [Kernel PMU event]
  tx-commit OR cpu/tx-commit/                        [Kernel PMU event]
  tx-conflict OR cpu/tx-conflict/                    [Kernel PMU event]
  tx-start OR cpu/tx-start/                          [Kernel PMU event]
  uncore_iio_free_running_0/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_0/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_0/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_0/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_0/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_0/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_0/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_0/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_0/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_0/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_0/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_0/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_0/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_0/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_0/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_0/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_0/util_out_port3/          [Kernel PMU event]
  uncore_iio_free_running_1/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_1/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_1/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_1/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_1/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_1/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_1/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_1/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_1/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_1/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_1/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_1/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_1/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_1/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_1/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_1/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_1/util_out_port3/          [Kernel PMU event]
  uncore_iio_free_running_2/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_2/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_2/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_2/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_2/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_2/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_2/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_2/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_2/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_2/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_2/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_2/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_2/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_2/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_2/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_2/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_2/util_out_port3/          [Kernel PMU event]
  uncore_iio_free_running_3/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_3/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_3/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_3/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_3/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_3/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_3/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_3/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_3/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_3/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_3/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_3/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_3/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_3/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_3/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_3/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_3/util_out_port3/          [Kernel PMU event]
  uncore_iio_free_running_4/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_4/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_4/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_4/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_4/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_4/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_4/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_4/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_4/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_4/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_4/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_4/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_4/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_4/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_4/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_4/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_4/util_out_port3/          [Kernel PMU event]
  uncore_iio_free_running_5/bw_in_port0/             [Kernel PMU event]
  uncore_iio_free_running_5/bw_in_port1/             [Kernel PMU event]
  uncore_iio_free_running_5/bw_in_port2/             [Kernel PMU event]
  uncore_iio_free_running_5/bw_in_port3/             [Kernel PMU event]
  uncore_iio_free_running_5/bw_out_port0/            [Kernel PMU event]
  uncore_iio_free_running_5/bw_out_port1/            [Kernel PMU event]
  uncore_iio_free_running_5/bw_out_port2/            [Kernel PMU event]
  uncore_iio_free_running_5/bw_out_port3/            [Kernel PMU event]
  uncore_iio_free_running_5/ioclk/                   [Kernel PMU event]
  uncore_iio_free_running_5/util_in_port0/           [Kernel PMU event]
  uncore_iio_free_running_5/util_in_port1/           [Kernel PMU event]
  uncore_iio_free_running_5/util_in_port2/           [Kernel PMU event]
  uncore_iio_free_running_5/util_in_port3/           [Kernel PMU event]
  uncore_iio_free_running_5/util_out_port0/          [Kernel PMU event]
  uncore_iio_free_running_5/util_out_port1/          [Kernel PMU event]
  uncore_iio_free_running_5/util_out_port2/          [Kernel PMU event]
  uncore_iio_free_running_5/util_out_port3/          [Kernel PMU event]
  uncore_imc_0/cas_count_read/                       [Kernel PMU event]
  uncore_imc_0/cas_count_write/                      [Kernel PMU event]
  uncore_imc_0/clockticks/                           [Kernel PMU event]
  uncore_imc_1/cas_count_read/                       [Kernel PMU event]
  uncore_imc_1/cas_count_write/                      [Kernel PMU event]
  uncore_imc_1/clockticks/                           [Kernel PMU event]
  uncore_imc_2/cas_count_read/                       [Kernel PMU event]
  uncore_imc_2/cas_count_write/                      [Kernel PMU event]
  uncore_imc_2/clockticks/                           [Kernel PMU event]
  uncore_imc_3/cas_count_read/                       [Kernel PMU event]
  uncore_imc_3/cas_count_write/                      [Kernel PMU event]
  uncore_imc_3/clockticks/                           [Kernel PMU event]
  uncore_imc_4/cas_count_read/                       [Kernel PMU event]
  uncore_imc_4/cas_count_write/                      [Kernel PMU event]
  uncore_imc_4/clockticks/                           [Kernel PMU event]
  uncore_imc_5/cas_count_read/                       [Kernel PMU event]
  uncore_imc_5/cas_count_write/                      [Kernel PMU event]
  uncore_imc_5/clockticks/                           [Kernel PMU event]

cache:
  l1d.replacement                                   
       [Counts L1D data line replacements including opportunistic
        replacements, and replacements that require stall-for-replace or
        block-for-replace]
  l1d_pend_miss.fb_full                             
       [Number of times a request needed a FB (Fill Buffer) entry but there
        was no entry available for it. A request includes
        cacheable/uncacheable demands that are load, store or SW prefetch
        instructions]
  l1d_pend_miss.pending                             
       [Counts duration of L1D miss outstanding, that is each cycle number of
        Fill Buffers (FB) outstanding required by Demand Reads. FB either is
        held by demand loads, or it is held by non-demand loads and gets hit
        at least once by demand. The valid outstanding interval is defined
        until the FB deallocation by one of the following ways: from FB
        allocation, if FB is allocated by demand from the demand Hit FB, if it
        is allocated by hardware or software prefetch.Note: In the L1D, a
        Demand Read contains cacheable or noncacheable demand loads, including
        ones causing cache-line splits and reads due to page walks resulted
        from any request type]
  l1d_pend_miss.pending_cycles                      
       [Counts duration of L1D miss outstanding in cycles]
  l1d_pend_miss.pending_cycles_any                  
       [Cycles with L1D load Misses outstanding from any thread on physical
        core]
  l2_lines_in.all                                   
       [Counts the number of L2 cache lines filling the L2. Counting does not
        cover rejects]
  l2_lines_out.non_silent                           
       [Counts the number of lines that are evicted by L2 cache when triggered
        by an L2 cache fill. Those lines can be either in modified state or
        clean state. Modified lines may either be written back to L3 or
        directly written to memory and not allocated in L3. Clean lines may
        either be allocated in L3 or dropped]
  l2_lines_out.silent                               
       [Counts the number of lines that are silently dropped by L2 cache when
        triggered by an L2 cache fill. These lines are typically in Shared
        state. A non-threaded event]
  l2_lines_out.useless_hwpf                         
       [Counts the number of lines that have been hardware prefetched but not
        used and now evicted by L2 cache]
  l2_lines_out.useless_pref                         
       [Counts the number of lines that have been hardware prefetched but not
        used and now evicted by L2 cache]
  l2_rqsts.all_code_rd                              
       [Counts the total number of L2 code requests]
  l2_rqsts.all_demand_data_rd                       
       [Counts the number of demand Data Read requests (including requests
        from L1D hardware prefetchers). These loads may hit or miss L2 cache.
        Only non rejected loads are counted]
  l2_rqsts.all_demand_miss                          
       [Demand requests that miss L2 cache]
  l2_rqsts.all_demand_references                    
       [Demand requests to L2 cache]
  l2_rqsts.all_pf                                   
       [Counts the total number of requests from the L2 hardware prefetchers]
  l2_rqsts.all_rfo                                  
       [Counts the total number of RFO (read for ownership) requests to L2
        cache. L2 RFO requests include both L1D demand RFO misses as well as
        L1D RFO prefetches]
  l2_rqsts.code_rd_hit                              
       [Counts L2 cache hits when fetching instructions, code reads]
  l2_rqsts.code_rd_miss                             
       [Counts L2 cache misses when fetching instructions]
  l2_rqsts.demand_data_rd_hit                       
       [Counts the number of demand Data Read requests that hit L2 cache. Only
        non rejected loads are counted]
  l2_rqsts.demand_data_rd_miss                      
       [Counts the number of demand Data Read requests that miss L2 cache.
        Only not rejected loads are counted]
  l2_rqsts.miss                                     
       [All requests that miss L2 cache]
  l2_rqsts.pf_hit                                   
       [Counts requests from the L1/L2/L3 hardware prefetchers or Load
        software prefetches that hit L2 cache]
  l2_rqsts.pf_miss                                  
       [Counts requests from the L1/L2/L3 hardware prefetchers or Load
        software prefetches that miss L2 cache]
  l2_rqsts.references                               
       [All L2 requests]
  l2_rqsts.rfo_hit                                  
       [Counts the RFO (Read-for-Ownership) requests that hit L2 cache]
  l2_rqsts.rfo_miss                                 
       [Counts the RFO (Read-for-Ownership) requests that miss L2 cache]
  l2_trans.l2_wb                                    
       [Counts L2 writebacks that access L2 cache]
  longest_lat_cache.miss                            
       [Counts core-originated cacheable requests that miss the L3 cache
        (Longest Latency cache). Requests include data and code reads,
        Reads-for-Ownership (RFOs), speculative accesses and hardware
        prefetches from L1 and L2. It does not include all misses to the L3]
  longest_lat_cache.reference                       
       [Counts core-originated cacheable requests to the L3 cache (Longest
        Latency cache). Requests include data and code reads,
        Reads-for-Ownership (RFOs), speculative accesses and hardware
        prefetches from L1 and L2. It does not include all accesses to the L3]
  mem_inst_retired.all_loads                        
       [All retired load instructions. (Precise Event) Supports address when
        precise]
  mem_inst_retired.all_stores                       
       [All retired store instructions Supports address when precise]
  mem_inst_retired.lock_loads                       
       [Retired load instructions with locked access. (Precise Event) Supports
        address when precise]
  mem_inst_retired.split_loads                      
       [Retired load instructions that split across a cacheline boundary.
        (Precise Event) Supports address when precise]
  mem_inst_retired.split_stores                     
       [Retired store instructions that split across a cacheline boundary.
        (Precise Event) Supports address when precise]
  mem_inst_retired.stlb_miss_loads                  
       [Retired load instructions that miss the STLB Supports address when
        precise]
  mem_inst_retired.stlb_miss_stores                 
       [Retired store instructions that miss the STLB Supports address when
        precise]
  mem_load_l3_hit_retired.xsnp_hit                  
       [Retired load instructions which data sources were L3 and cross-core
        snoop hits in on-pkg core cache Supports address when precise (Precise
        event)]
  mem_load_l3_hit_retired.xsnp_hitm                 
       [Retired load instructions which data sources were HitM responses from
        shared L3 Supports address when precise (Precise event)]
  mem_load_l3_hit_retired.xsnp_miss                 
       [Retired load instructions which data sources were L3 hit and
        cross-core snoop missed in on-pkg core cache Supports address when
        precise (Precise event)]
  mem_load_l3_hit_retired.xsnp_none                 
       [Retired load instructions which data sources were hits in L3 without
        snoops required Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.local_dram               
       [Retired load instructions which data sources missed L3 but serviced
        from local dram Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_dram              
       [Retired load instructions which data sources missed L3 but serviced
        from remote dram Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_fwd               
       [Retired load instructions whose data sources was forwarded from a
        remote cache Supports address when precise (Precise event)]
  mem_load_l3_miss_retired.remote_hitm              
       [Retired load instructions whose data sources was remote HITM Supports
        address when precise (Precise event)]
  mem_load_misc_retired.uc                          
       [Retired instructions with at least 1 uncacheable load or lock Supports
        address when precise (Precise event)]
  mem_load_retired.fb_hit                           
       [Counts retired load instructions with at least one uop was load missed
        in L1 but hit FB (Fill Buffers) due to preceding miss to the same
        cache line with data not ready. Supports address when precise (Precise
        event)]
  mem_load_retired.l1_hit                           
       [Counts retired load instructions with at least one uop that hit in the
        L1 data cache. This event includes all SW prefetches and lock
        instructions regardless of the data source.
 Supports address when
        precise (Precise event)]
  mem_load_retired.l1_miss                          
       [Counts retired load instructions with at least one uop that missed in
        the L1 cache Supports address when precise (Precise event)]
  mem_load_retired.l2_hit                           
       [Retired load instructions with L2 cache hits as data sources Supports
        address when precise (Precise event)]
  mem_load_retired.l2_miss                          
       [Retired load instructions missed L2 cache as data sources Supports
        address when precise (Precise event)]
  mem_load_retired.l3_hit                           
       [Retired load instructions with L3 cache hits as data sources Supports
        address when precise (Precise event)]
  mem_load_retired.l3_miss                          
       [Retired load instructions missed L3 cache as data sources Supports
        address when precise (Precise event)]
  offcore_requests.all_data_rd                      
       [Counts the demand and prefetch data reads. All Core Data Reads include
        cacheable 'Demands' and L2 prefetchers (not L3 prefetchers). Counting
        also covers reads due to page walks resulted from any request type]
  offcore_requests.all_requests                     
       [Counts memory transactions reached the super queue including requests
        initiated by the core, all L3 prefetches, page walks, etc.]
  offcore_requests.demand_code_rd                   
       [Counts both cacheable and non-cacheable code read requests]
  offcore_requests.demand_data_rd                   
       [Counts the Demand Data Read requests sent to uncore. Use it in
        conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average
        latency in the uncore]
  offcore_requests.demand_rfo                       
       [Counts the demand RFO (read for ownership) requests including regular
        RFOs, locks, ItoM]
  offcore_requests_buffer.sq_full                   
       [Counts the number of cases when the offcore requests buffer cannot
        take more entries for the core. This can happen when the superqueue
        does not contain eligible entries, or when L1D writeback pending FIFO
        requests is full.Note: Writeback pending FIFO has six entries]
  offcore_requests_outstanding.all_data_rd          
       [Counts the number of offcore outstanding cacheable Core Data Read
        transactions in the super queue every cycle. A transaction is
        considered to be in the Offcore outstanding state between L2 miss and
        transaction completion sent to requestor (SQ de-allocation). See
        corresponding Umask under OFFCORE_REQUESTS]
  offcore_requests_outstanding.cycles_with_data_rd  
       [Counts cycles when offcore outstanding cacheable Core Data Read
        transactions are present in the super queue. A transaction is
        considered to be in the Offcore outstanding state between L2 miss and
        transaction completion sent to requestor (SQ de-allocation). See
        corresponding Umask under OFFCORE_REQUESTS]
  offcore_requests_outstanding.cycles_with_demand_code_rd
       [Counts the number of offcore outstanding Code Reads transactions in
        the super queue every cycle. The 'Offcore outstanding' state of the
        transaction lasts from the L2 miss until the sending transaction
        completion to requestor (SQ deallocation). See the corresponding Umask
        under OFFCORE_REQUESTS]
  offcore_requests_outstanding.cycles_with_demand_data_rd
       [Counts cycles when offcore outstanding Demand Data Read transactions
        are present in the super queue (SQ). A transaction is considered to be
        in the Offcore outstanding state between L2 miss and transaction
        completion sent to requestor (SQ de-allocation)]
  offcore_requests_outstanding.cycles_with_demand_rfo
       [Counts the number of offcore outstanding demand rfo Reads transactions
        in the super queue every cycle. The 'Offcore outstanding' state of the
        transaction lasts from the L2 miss until the sending transaction
        completion to requestor (SQ deallocation). See the corresponding Umask
        under OFFCORE_REQUESTS]
  offcore_requests_outstanding.demand_code_rd       
       [Counts the number of offcore outstanding Code Reads transactions in
        the super queue every cycle. The 'Offcore outstanding' state of the
        transaction lasts from the L2 miss until the sending transaction
        completion to requestor (SQ deallocation). See the corresponding Umask
        under OFFCORE_REQUESTS]
  offcore_requests_outstanding.demand_data_rd       
       [Counts the number of offcore outstanding Demand Data Read transactions
        in the super queue (SQ) every cycle. A transaction is considered to be
        in the Offcore outstanding state between L2 miss and transaction
        completion sent to requestor. See the corresponding Umask under
        OFFCORE_REQUESTS.Note: A prefetch promoted to Demand is counted from
        the promotion point]
  offcore_requests_outstanding.demand_data_rd_ge_6  
       [Cycles with at least 6 offcore outstanding Demand Data Read
        transactions in uncore queue]
  offcore_requests_outstanding.demand_rfo           
       [Counts the number of offcore outstanding RFO (store) transactions in
        the super queue (SQ) every cycle. A transaction is considered to be in
        the Offcore outstanding state between L2 miss and transaction
        completion sent to requestor (SQ de-allocation). See corresponding
        Umask under OFFCORE_REQUESTS]
  offcore_response                                  
       [Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_data_rd.any_response         
       [Counts all demand & prefetch data reads that have any response type.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_data_rd.l3_hit.any_snoop     
       [Counts all demand & prefetch data reads that hit in the L3. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_data_rd.l3_hit.hit_other_core_no_fwd
       [Counts all demand & prefetch data reads that hit in the L3 and the
        snoop to one of the sibling cores hits the line in M state and the
        line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_hit.hitm_other_core
       [Counts all demand & prefetch data reads that hit in the L3 and the
        snoop to one of the sibling cores hits the line in M state and the
        line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_hit.no_snoop_needed
       [Counts all demand & prefetch data reads that hit in the L3 and sibling
        core snoops are not needed as either the core-valid bit is not set or
        the shared line is present in multiple cores. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.all_pf_data_rd.any_response      
       [Counts all prefetch data reads that have any response type. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_pf_data_rd.l3_hit.any_snoop  
       [Counts all prefetch data reads that hit in the L3. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_pf_data_rd.l3_hit.hit_other_core_no_fwd
       [Counts all prefetch data reads that hit in the L3 and the snoop to one
        of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_hit.hitm_other_core
       [Counts all prefetch data reads that hit in the L3 and the snoop to one
        of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_hit.no_snoop_needed
       [Counts all prefetch data reads that hit in the L3 and sibling core
        snoops are not needed as either the core-valid bit is not set or the
        shared line is present in multiple cores. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.all_pf_rfo.any_response          
       [Counts prefetch RFOs that have any response type. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_hit.any_snoop      
       [Counts prefetch RFOs that hit in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_hit.hit_other_core_no_fwd
       [Counts prefetch RFOs that hit in the L3 and the snoop to one of the
        sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_pf_rfo.l3_hit.hitm_other_core
       [Counts prefetch RFOs that hit in the L3 and the snoop to one of the
        sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_pf_rfo.l3_hit.no_snoop_needed
       [Counts prefetch RFOs that hit in the L3 and sibling core snoops are
        not needed as either the core-valid bit is not set or the shared line
        is present in multiple cores. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.all_rfo.any_response             
       [Counts all demand & prefetch RFOs that have any response type. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_rfo.l3_hit.any_snoop         
       [Counts all demand & prefetch RFOs that hit in the L3. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_rfo.l3_hit.hit_other_core_no_fwd
       [Counts all demand & prefetch RFOs that hit in the L3 and the snoop to
        one of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_rfo.l3_hit.hitm_other_core   
       [Counts all demand & prefetch RFOs that hit in the L3 and the snoop to
        one of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_rfo.l3_hit.no_snoop_needed   
       [Counts all demand & prefetch RFOs that hit in the L3 and sibling core
        snoops are not needed as either the core-valid bit is not set or the
        shared line is present in multiple cores. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_rfo.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.demand_code_rd.any_response      
       [Counts all demand code reads that have any response type. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_code_rd.l3_hit.any_snoop  
       [Counts all demand code reads that hit in the L3. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_hit.hit_other_core_no_fwd
       [Counts all demand code reads that hit in the L3 and the snoop to one
        of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.demand_code_rd.l3_hit.hitm_other_core
       [Counts all demand code reads that hit in the L3 and the snoop to one
        of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.demand_code_rd.l3_hit.no_snoop_needed
       [Counts all demand code reads that hit in the L3 and sibling core
        snoops are not needed as either the core-valid bit is not set or the
        shared line is present in multiple cores. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.demand_data_rd.any_response      
       [Counts demand data reads that have any response type. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_data_rd.l3_hit.any_snoop  
       [Counts demand data reads that hit in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_hit.hit_other_core_no_fwd
       [Counts demand data reads that hit in the L3 and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_data_rd.l3_hit.hitm_other_core
       [Counts demand data reads that hit in the L3 and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_data_rd.l3_hit.no_snoop_needed
       [Counts demand data reads that hit in the L3 and sibling core snoops
        are not needed as either the core-valid bit is not set or the shared
        line is present in multiple cores. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.demand_rfo.any_response          
       [Counts all demand data writes (RFOs) that have any response type.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_rfo.l3_hit.any_snoop      
       [Counts all demand data writes (RFOs) that hit in the L3. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_rfo.l3_hit.hit_other_core_no_fwd
       [Counts all demand data writes (RFOs) that hit in the L3 and the snoop
        to one of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.demand_rfo.l3_hit.hitm_other_core
       [Counts all demand data writes (RFOs) that hit in the L3 and the snoop
        to one of the sibling cores hits the line in M state and the line is
        forwarded. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.demand_rfo.l3_hit.no_snoop_needed
       [Counts all demand data writes (RFOs) that hit in the L3 and sibling
        core snoops are not needed as either the core-valid bit is not set or
        the shared line is present in multiple cores. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.other.any_response               
       [Counts any other requests that have any response type. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.other.l3_hit.any_snoop           
       [Counts any other requests that hit in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.other.l3_hit.hit_other_core_no_fwd
       [Counts any other requests that hit in the L3 and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.other.l3_hit.hitm_other_core     
       [Counts any other requests that hit in the L3 and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.other.l3_hit.no_snoop_needed     
       [Counts any other requests that hit in the L3 and sibling core snoops
        are not needed as either the core-valid bit is not set or the shared
        line is present in multiple cores. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.other.l3_hit.snoop_hit_with_fwd  
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l1d_and_sw.any_response       
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that have any response type. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_hit.any_snoop   
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that hit in the L3. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_hit.hit_other_core_no_fwd
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that hit in the L3 and the snoop to one of the sibling cores
        hits the line in M state and the line is forwarded. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l1d_and_sw.l3_hit.hitm_other_core
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that hit in the L3 and the snoop to one of the sibling cores
        hits the line in M state and the line is forwarded. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l1d_and_sw.l3_hit.no_snoop_needed
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that hit in the L3 and sibling core snoops are not needed as
        either the core-valid bit is not set or the shared line is present in
        multiple cores. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l2_data_rd.any_response       
       [Counts prefetch (that bring data to L2) data reads that have any
        response type. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l2_data_rd.l3_hit.any_snoop   
       [Counts prefetch (that bring data to L2) data reads that hit in the L3.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_hit.hit_other_core_no_fwd
       [Counts prefetch (that bring data to L2) data reads that hit in the L3
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l2_data_rd.l3_hit.hitm_other_core
       [Counts prefetch (that bring data to L2) data reads that hit in the L3
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l2_data_rd.l3_hit.no_snoop_needed
       [Counts prefetch (that bring data to L2) data reads that hit in the L3
        and sibling core snoops are not needed as either the core-valid bit is
        not set or the shared line is present in multiple cores. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l2_rfo.any_response           
       [Counts all prefetch (that bring data to L2) RFOs that have any
        response type. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_hit.any_snoop       
       [Counts all prefetch (that bring data to L2) RFOs that hit in the L3.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_rfo.l3_hit.hit_other_core_no_fwd
       [Counts all prefetch (that bring data to L2) RFOs that hit in the L3
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_hit.hitm_other_core 
       [Counts all prefetch (that bring data to L2) RFOs that hit in the L3
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_hit.no_snoop_needed 
       [Counts all prefetch (that bring data to L2) RFOs that hit in the L3
        and sibling core snoops are not needed as either the core-valid bit is
        not set or the shared line is present in multiple cores. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_rfo.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l3_data_rd.any_response       
       [Counts all prefetch (that bring data to LLC only) data reads that have
        any response type. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_hit.any_snoop   
       [Counts all prefetch (that bring data to LLC only) data reads that hit
        in the L3. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_hit.hit_other_core_no_fwd
       [Counts all prefetch (that bring data to LLC only) data reads that hit
        in the L3 and the snoop to one of the sibling cores hits the line in M
        state and the line is forwarded. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_hit.hitm_other_core
       [Counts all prefetch (that bring data to LLC only) data reads that hit
        in the L3 and the snoop to one of the sibling cores hits the line in M
        state and the line is forwarded. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_hit.no_snoop_needed
       [Counts all prefetch (that bring data to LLC only) data reads that hit
        in the L3 and sibling core snoops are not needed as either the
        core-valid bit is not set or the shared line is present in multiple
        cores. Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l3_rfo.any_response           
       [Counts all prefetch (that bring data to LLC only) RFOs that have any
        response type. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l3_rfo.l3_hit.any_snoop       
       [Counts all prefetch (that bring data to LLC only) RFOs that hit in the
        L3. Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l3_rfo.l3_hit.hit_other_core_no_fwd
       [Counts all prefetch (that bring data to LLC only) RFOs that hit in the
        L3 and the snoop to one of the sibling cores hits the line in M state
        and the line is forwarded. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l3_rfo.l3_hit.hitm_other_core 
       [Counts all prefetch (that bring data to LLC only) RFOs that hit in the
        L3 and the snoop to one of the sibling cores hits the line in M state
        and the line is forwarded. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l3_rfo.l3_hit.no_snoop_needed 
       [Counts all prefetch (that bring data to LLC only) RFOs that hit in the
        L3 and sibling core snoops are not needed as either the core-valid bit
        is not set or the shared line is present in multiple cores. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_rfo.l3_hit.snoop_hit_with_fwd
       [tbd Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  sq_misc.split_lock                                
       [Counts the number of cache line split locks sent to the uncore]

floating point:
  fp_arith_inst_retired.128b_packed_double          
       [Number of SSE/AVX computational 128-bit packed double precision
        floating-point instructions retired. Each count represents 2
        computations. Applies to SSE* and AVX* packed double precision
        floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP
        FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they
        perform multiple calculations per element]
  fp_arith_inst_retired.128b_packed_single          
       [Number of SSE/AVX computational 128-bit packed single precision
        floating-point instructions retired. Each count represents 4
        computations. Applies to SSE* and AVX* packed single precision
        floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT
        DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as
        they perform multiple calculations per element]
  fp_arith_inst_retired.256b_packed_double          
       [Number of SSE/AVX computational 256-bit packed double precision
        floating-point instructions retired. Each count represents 4
        computations. Applies to SSE* and AVX* packed double precision
        floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP
        FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they
        perform multiple calculations per element]
  fp_arith_inst_retired.256b_packed_single          
       [Number of SSE/AVX computational 256-bit packed single precision
        floating-point instructions retired. Each count represents 8
        computations. Applies to SSE* and AVX* packed single precision
        floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT
        DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as
        they perform multiple calculations per element]
  fp_arith_inst_retired.512b_packed_double          
       [Number of Packed Double-Precision FP arithmetic instructions (Use
        operation multiplier of 8)]
  fp_arith_inst_retired.512b_packed_single          
       [Number of Packed Single-Precision FP arithmetic instructions (Use
        operation multiplier of 16)]
  fp_arith_inst_retired.scalar_double               
       [Number of SSE/AVX computational scalar double precision floating-point
        instructions retired. Each count represents 1 computation. Applies to
        SSE* and AVX* scalar double precision floating-point instructions: ADD
        SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count
        twice as they perform multiple calculations per element]
  fp_arith_inst_retired.scalar_single               
       [Number of SSE/AVX computational scalar single precision floating-point
        instructions retired. Each count represents 1 computation. Applies to
        SSE* and AVX* scalar single precision floating-point instructions: ADD
        SUB MUL DIV MIN MAX RCP RSQRT SQRT FM(N)ADD/SUB. FM(N)ADD/SUB
        instructions count twice as they perform multiple calculations per
        element]
  fp_assist.any                                     
       [Counts cycles with any input and output SSE or x87 FP assist. If an
        input and output assist are detected on the same cycle the event
        increments by 1]

frontend:
  dsb2mite_switches.penalty_cycles                  
       [Counts Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.
        These cycles do not include uops routed through because of the switch
        itself, for example, when Instruction Decode Queue (IDQ)
        pre-allocation is unavailable, or Instruction Decode Queue (IDQ) is
        full. SBD-to-MITE switch true penalty cycles happen after the merge
        mux (MM) receives Decode Stream Buffer (DSB) Sync-indication until
        receiving the first MITE uop. MM is placed before Instruction Decode
        Queue (IDQ) to merge uops being fed from the MITE and Decode Stream
        Buffer (DSB) paths. Decode Stream Buffer (DSB) inserts the
        Sync-indication whenever a Decode Stream Buffer (DSB)-to-MITE switch
        occurs.Penalty: A Decode Stream Buffer (DSB) hit followed by a Decode
        Stream Buffer (DSB) miss can cost up to six cycles in which no uops
        are delivered to the IDQ. Most often, such switches from the Decode
        Stream Buffer (DSB) to the legacy pipeline cost 02 cycles]
  frontend_retired.dsb_miss                         
       [Counts retired Instructions that experienced DSB (Decode stream buffer
        i.e. the decoded instruction-cache) miss. (Precise event)]
  frontend_retired.itlb_miss                        
       [Counts retired Instructions that experienced iTLB (Instruction TLB)
        true miss (Precise event)]
  frontend_retired.l1i_miss                         
       [Retired Instructions who experienced Instruction L1 Cache true miss.
        Precise Event (Precise event)]
  frontend_retired.l2_miss                          
       [Retired Instructions who experienced Instruction L2 Cache true miss.
        Precise Event (Precise event)]
  frontend_retired.latency_ge_128                   
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 128 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_16                    
       [Counts retired instructions that are delivered to the back-end after a
        front-end stall of at least 16 cycles. During this period the
        front-end delivered no uops.
 (Precise event)]
  frontend_retired.latency_ge_2                     
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 2 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_256                   
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 256 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_2_bubbles_ge_1        
       [Counts retired instructions that are delivered to the back-end after
        the front-end had at least 1 bubble-slot for a period of 2 cycles. A
        bubble-slot is an empty issue-pipeline slot while there was no RAT
        stall.
 (Precise event)]
  frontend_retired.latency_ge_2_bubbles_ge_2        
       [Retired instructions that are fetched after an interval where the
        front-end had at least 2 bubble-slots for a period of 2 cycles which
        was not interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_2_bubbles_ge_3        
       [Retired instructions that are fetched after an interval where the
        front-end had at least 3 bubble-slots for a period of 2 cycles which
        was not interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_32                    
       [Counts retired instructions that are delivered to the back-end after a
        front-end stall of at least 32 cycles. During this period the
        front-end delivered no uops.
 (Precise event)]
  frontend_retired.latency_ge_4                     
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 4 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_512                   
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 512 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_64                    
       [Retired instructions that are fetched after an interval where the
        front-end delivered no uops for a period of 64 cycles which was not
        interrupted by a back-end stall. Precise Event (Precise event)]
  frontend_retired.latency_ge_8                     
       [Counts retired instructions that are delivered to the back-end after a
        front-end stall of at least 8 cycles. During this period the front-end
        delivered no uops. (Precise event)]
  frontend_retired.stlb_miss                        
       [Counts retired Instructions that experienced STLB (2nd level TLB) true
        miss (Precise event)]
  icache_16b.ifdata_stall                           
       [Cycles where a code line fetch is stalled due to an L1 instruction
        cache miss. The legacy decode pipeline works at a 16 Byte granularity]
  icache_64b.iftag_hit                              
       [Instruction fetch tag lookups that hit in the instruction cache (L1I).
        Counts at 64-byte cache-line granularity]
  icache_64b.iftag_miss                             
       [Instruction fetch tag lookups that miss in the instruction cache
        (L1I). Counts at 64-byte cache-line granularity]
  icache_64b.iftag_stall                            
       [Cycles where a code fetch is stalled due to L1 instruction cache tag
        miss]
  idq.all_dsb_cycles_4_uops                         
       [Counts the number of cycles 4 uops were delivered to Instruction
        Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count
        includes uops that may 'bypass' the IDQ]
  idq.all_dsb_cycles_any_uops                       
       [Counts the number of cycles uops were delivered to Instruction Decode
        Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes
        uops that may 'bypass' the IDQ]
  idq.all_mite_cycles_4_uops                        
       [Counts the number of cycles 4 uops were delivered to the Instruction
        Decode Queue (IDQ) from the MITE (legacy decode pipeline) path.
        Counting includes uops that may 'bypass' the IDQ. During these cycles
        uops are not being delivered from the Decode Stream Buffer (DSB)]
  idq.all_mite_cycles_any_uops                      
       [Counts the number of cycles uops were delivered to the Instruction
        Decode Queue (IDQ) from the MITE (legacy decode pipeline) path.
        Counting includes uops that may 'bypass' the IDQ. During these cycles
        uops are not being delivered from the Decode Stream Buffer (DSB)]
  idq.dsb_cycles                                    
       [Counts cycles during which uops are being delivered to Instruction
        Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting
        includes uops that may 'bypass' the IDQ]
  idq.dsb_uops                                      
       [Counts the number of uops delivered to Instruction Decode Queue (IDQ)
        from the Decode Stream Buffer (DSB) path. Counting includes uops that
        may 'bypass' the IDQ]
  idq.mite_cycles                                   
       [Counts cycles during which uops are being delivered to Instruction
        Decode Queue (IDQ) from the MITE path. Counting includes uops that may
        'bypass' the IDQ]
  idq.mite_uops                                     
       [Counts the number of uops delivered to Instruction Decode Queue (IDQ)
        from the MITE path. Counting includes uops that may 'bypass' the IDQ.
        This also means that uops are not being delivered from the Decode
        Stream Buffer (DSB)]
  idq.ms_cycles                                     
       [Counts cycles during which uops are being delivered to Instruction
        Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy.
        Counting includes uops that may 'bypass' the IDQ. Uops maybe initiated
        by Decode Stream Buffer (DSB) or MITE]
  idq.ms_dsb_cycles                                 
       [Counts cycles during which uops initiated by Decode Stream Buffer
        (DSB) are being delivered to Instruction Decode Queue (IDQ) while the
        Microcode Sequencer (MS) is busy. Counting includes uops that may
        'bypass' the IDQ]
  idq.ms_mite_uops                                  
       [Counts the number of uops initiated by MITE and delivered to
        Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is
        busy. Counting includes uops that may 'bypass' the IDQ]
  idq.ms_switches                                   
       [Number of switches from DSB (Decode Stream Buffer) or MITE (legacy
        decode pipeline) to the Microcode Sequencer]
  idq.ms_uops                                       
       [Counts the total number of uops delivered by the Microcode Sequencer
        (MS). Any instruction over 4 uops will be delivered by the MS. Some
        instructions such as transcendentals may additionally generate uops
        from the MS]
  idq_uops_not_delivered.core                       
       [Counts the number of uops not delivered to Resource Allocation Table
        (RAT) per thread adding 4 x when Resource Allocation Table (RAT) is
        not stalled and Instruction Decode Queue (IDQ) delivers x uops to
        Resource Allocation Table (RAT) (where x belongs to {0,1,2,3}).
        Counting does not cover cases when: a. IDQ-Resource Allocation Table
        (RAT) pipe serves the other thread. b. Resource Allocation Table (RAT)
        is stalled for the thread (including uop drops and clear BE
        conditions). c. Instruction Decode Queue (IDQ) delivers four uops]
  idq_uops_not_delivered.cycles_0_uops_deliv.core   
       [Counts, on the per-thread basis, cycles when no uops are delivered to
        Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core =4]
  idq_uops_not_delivered.cycles_fe_was_ok           
       [Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT)
        was stalling FE]
  idq_uops_not_delivered.cycles_le_1_uop_deliv.core 
       [Counts, on the per-thread basis, cycles when less than 1 uop is
        delivered to Resource Allocation Table (RAT).
        IDQ_Uops_Not_Delivered.core >= 3]
  idq_uops_not_delivered.cycles_le_2_uop_deliv.core 
       [Cycles with less than 2 uops delivered by the front-end]
  idq_uops_not_delivered.cycles_le_3_uop_deliv.core 
       [Cycles with less than 3 uops delivered by the front-end]

memory:
  cycle_activity.cycles_l3_miss                     
       [Cycles while L3 cache miss demand load is outstanding]
  cycle_activity.stalls_l3_miss                     
       [Execution stalls while L3 cache miss demand load is outstanding]
  hle_retired.aborted                               
       [Number of times HLE abort was triggered. (PEBS) (Precise event)]
  hle_retired.aborted_events                        
       [Number of times an HLE execution aborted due to unfriendly events
        (such as interrupts)]
  hle_retired.aborted_mem                           
       [Number of times an HLE execution aborted due to various memory events
        (e.g., read/write capacity and conflicts)]
  hle_retired.aborted_memtype                       
       [Number of times an HLE execution aborted due to incompatible memory
        type]
  hle_retired.aborted_timer                         
       [Number of times an HLE execution aborted due to hardware timer
        expiration]
  hle_retired.aborted_unfriendly                    
       [Number of times an HLE execution aborted due to HLE-unfriendly
        instructions and certain unfriendly events (such as AD assists etc.)]
  hle_retired.commit                                
       [Number of times HLE commit succeeded]
  hle_retired.start                                 
       [Number of times we entered an HLE region. Does not count nested
        transactions]
  machine_clears.memory_ordering                    
       [Counts the number of memory ordering Machine Clears detected. Memory
        Ordering Machine Clears can result from one of the following:a. memory
        disambiguation,b. external snoop, orc. cross SMT-HW-thread snoop
        (stores) hitting load buffer Spec update: SKL089]
  mem_trans_retired.load_latency_gt_128             
       [Counts loads when the latency from first dispatch to completion is
        greater than 128 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_16              
       [Counts loads when the latency from first dispatch to completion is
        greater than 16 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_256             
       [Counts loads when the latency from first dispatch to completion is
        greater than 256 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_32              
       [Counts loads when the latency from first dispatch to completion is
        greater than 32 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_4               
       [Counts loads when the latency from first dispatch to completion is
        greater than 4 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_512             
       [Counts loads when the latency from first dispatch to completion is
        greater than 512 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_64              
       [Counts loads when the latency from first dispatch to completion is
        greater than 64 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  mem_trans_retired.load_latency_gt_8               
       [Counts loads when the latency from first dispatch to completion is
        greater than 8 cycles. Reported latency may be longer than just the
        memory latency (Must be precise)]
  offcore_requests.l3_miss_demand_data_rd           
       [Demand Data Read requests who miss L3 cache]
  offcore_requests_outstanding.cycles_with_l3_miss_demand_data_rd
       [Cycles with at least 1 Demand Data Read requests who miss L3 cache in
        the superQ]
  offcore_requests_outstanding.l3_miss_demand_data_rd
       [Counts number of Offcore outstanding Demand Data Read requests that
        miss L3 cache in the superQ every cycle]
  offcore_requests_outstanding.l3_miss_demand_data_rd_ge_6
       [Cycles with at least 6 Demand Data Read requests that miss L3 cache in
        the superQ]
  offcore_response.all_data_rd.l3_miss.any_snoop    
       [Counts all demand & prefetch data reads that miss in the L3. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_data_rd.l3_miss.remote_hit_forward
       [Counts all demand & prefetch data reads that miss the L3 and clean or
        shared data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_miss.remote_hitm  
       [Counts all demand & prefetch data reads that miss the L3 and the
        modified data is transferred from remote cache. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts all demand & prefetch data reads that miss the L3 and the data
        is returned from local or remote dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all demand & prefetch data reads that miss the L3 and the data
        is returned from local dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all demand & prefetch data reads that miss the L3 and the data
        is returned from remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_miss.any_snoop 
       [Counts all prefetch data reads that miss in the L3. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_pf_data_rd.l3_miss.remote_hit_forward
       [Counts all prefetch data reads that miss the L3 and clean or shared
        data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_miss.remote_hitm
       [Counts all prefetch data reads that miss the L3 and the modified data
        is transferred from remote cache. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts all prefetch data reads that miss the L3 and the data is
        returned from local or remote dram. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all prefetch data reads that miss the L3 and the data is
        returned from local dram. Offcore response can be programmed only with
        a specific pair of event select and counter MSR, and with specific
        event codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.all_pf_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all prefetch data reads that miss the L3 and the data is
        returned from remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss.any_snoop     
       [Counts prefetch RFOs that miss in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss.remote_hit_forward
       [Counts prefetch RFOs that miss the L3 and clean or shared data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss.remote_hitm   
       [Counts prefetch RFOs that miss the L3 and the modified data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss.snoop_miss_or_no_fwd
       [Counts prefetch RFOs that miss the L3 and the data is returned from
        local or remote dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts prefetch RFOs that miss the L3 and the data is returned from
        local dram. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_pf_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts prefetch RFOs that miss the L3 and the data is returned from
        remote dram. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.all_rfo.l3_miss.any_snoop        
       [Counts all demand & prefetch RFOs that miss in the L3. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.all_rfo.l3_miss.remote_hit_forward
       [Counts all demand & prefetch RFOs that miss the L3 and clean or shared
        data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_rfo.l3_miss.remote_hitm      
       [Counts all demand & prefetch RFOs that miss the L3 and the modified
        data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.all_rfo.l3_miss.snoop_miss_or_no_fwd
       [Counts all demand & prefetch RFOs that miss the L3 and the data is
        returned from local or remote dram. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.all_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all demand & prefetch RFOs that miss the L3 and the data is
        returned from local dram. Offcore response can be programmed only with
        a specific pair of event select and counter MSR, and with specific
        event codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.all_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all demand & prefetch RFOs that miss the L3 and the data is
        returned from remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss.any_snoop 
       [Counts all demand code reads that miss in the L3. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss.remote_hit_forward
       [Counts all demand code reads that miss the L3 and clean or shared data
        is transferred from remote cache. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss.remote_hitm
       [Counts all demand code reads that miss the L3 and the modified data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts all demand code reads that miss the L3 and the data is returned
        from local or remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all demand code reads that miss the L3 and the data is returned
        from local dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.demand_code_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all demand code reads that miss the L3 and the data is returned
        from remote dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss.any_snoop 
       [Counts demand data reads that miss in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss.remote_hit_forward
       [Counts demand data reads that miss the L3 and clean or shared data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss.remote_hitm
       [Counts demand data reads that miss the L3 and the modified data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts demand data reads that miss the L3 and the data is returned
        from local or remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts demand data reads that miss the L3 and the data is returned
        from local dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.demand_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts demand data reads that miss the L3 and the data is returned
        from remote dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_miss.any_snoop     
       [Counts all demand data writes (RFOs) that miss in the L3. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.demand_rfo.l3_miss.remote_hit_forward
       [Counts all demand data writes (RFOs) that miss the L3 and clean or
        shared data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_miss.remote_hitm   
       [Counts all demand data writes (RFOs) that miss the L3 and the modified
        data is transferred from remote cache. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_miss.snoop_miss_or_no_fwd
       [Counts all demand data writes (RFOs) that miss the L3 and the data is
        returned from local or remote dram. Offcore response can be programmed
        only with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all demand data writes (RFOs) that miss the L3 and the data is
        returned from local dram. Offcore response can be programmed only with
        a specific pair of event select and counter MSR, and with specific
        event codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.demand_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all demand data writes (RFOs) that miss the L3 and the data is
        returned from remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.other.l3_miss.any_snoop          
       [Counts any other requests that miss in the L3. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.other.l3_miss.remote_hit_forward 
       [Counts any other requests that miss the L3 and clean or shared data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.other.l3_miss.remote_hitm        
       [Counts any other requests that miss the L3 and the modified data is
        transferred from remote cache. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.other.l3_miss.snoop_miss_or_no_fwd
       [Counts any other requests that miss the L3 and the data is returned
        from local or remote dram. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.other.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts any other requests that miss the L3 and the data is returned
        from local dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.other.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts any other requests that miss the L3 and the data is returned
        from remote dram. Offcore response can be programmed only with a
        specific pair of event select and counter MSR, and with specific event
        codes and predefine mask bit value in a dedicated MSR to specify
        attributes of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_miss.any_snoop  
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss in the L3. Offcore response can be programmed only
        with a specific pair of event select and counter MSR, and with
        specific event codes and predefine mask bit value in a dedicated MSR
        to specify attributes of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_miss.remote_hit_forward
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss the L3 and clean or shared data is transferred from
        remote cache. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_miss.remote_hitm
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss the L3 and the modified data is transferred from
        remote cache. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_miss.snoop_miss_or_no_fwd
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss the L3 and the data is returned from local or
        remote dram. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l1d_and_sw.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss the L3 and the data is returned from local dram.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l1d_and_sw.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts L1 data cache hardware prefetch requests and software prefetch
        requests that miss the L3 and the data is returned from remote dram.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_miss.any_snoop  
       [Counts prefetch (that bring data to L2) data reads that miss in the
        L3. Offcore response can be programmed only with a specific pair of
        event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l2_data_rd.l3_miss.remote_hit_forward
       [Counts prefetch (that bring data to L2) data reads that miss the L3
        and clean or shared data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_miss.remote_hitm
       [Counts prefetch (that bring data to L2) data reads that miss the L3
        and the modified data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts prefetch (that bring data to L2) data reads that miss the L3
        and the data is returned from local or remote dram. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts prefetch (that bring data to L2) data reads that miss the L3
        and the data is returned from local dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l2_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts prefetch (that bring data to L2) data reads that miss the L3
        and the data is returned from remote dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_miss.any_snoop      
       [Counts all prefetch (that bring data to L2) RFOs that miss in the L3.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_rfo.l3_miss.remote_hit_forward
       [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and
        clean or shared data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_rfo.l3_miss.remote_hitm    
       [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and
        the modified data is transferred from remote cache. Offcore response
        can be programmed only with a specific pair of event select and
        counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l2_rfo.l3_miss.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and
        the data is returned from local or remote dram. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and
        the data is returned from local dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l2_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and
        the data is returned from remote dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_miss.any_snoop  
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        in the L3. Offcore response can be programmed only with a specific
        pair of event select and counter MSR, and with specific event codes
        and predefine mask bit value in a dedicated MSR to specify attributes
        of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_miss.remote_hit_forward
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        the L3 and clean or shared data is transferred from remote cache.
        Offcore response can be programmed only with a specific pair of event
        select and counter MSR, and with specific event codes and predefine
        mask bit value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_data_rd.l3_miss.remote_hitm
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        the L3 and the modified data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_data_rd.l3_miss.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        the L3 and the data is returned from local or remote dram. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        the L3 and the data is returned from local dram. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l3_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) data reads that miss
        the L3 and the data is returned from remote dram. Offcore response can
        be programmed only with a specific pair of event select and counter
        MSR, and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l3_rfo.l3_miss.any_snoop      
       [Counts all prefetch (that bring data to LLC only) RFOs that miss in
        the L3. Offcore response can be programmed only with a specific pair
        of event select and counter MSR, and with specific event codes and
        predefine mask bit value in a dedicated MSR to specify attributes of
        the offcore transaction]
  offcore_response.pf_l3_rfo.l3_miss.remote_hit_forward
       [Counts all prefetch (that bring data to LLC only) RFOs that miss the
        L3 and clean or shared data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_rfo.l3_miss.remote_hitm    
       [Counts all prefetch (that bring data to LLC only) RFOs that miss the
        L3 and the modified data is transferred from remote cache. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_rfo.l3_miss.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) RFOs that miss the
        L3 and the data is returned from local or remote dram. Offcore
        response can be programmed only with a specific pair of event select
        and counter MSR, and with specific event codes and predefine mask bit
        value in a dedicated MSR to specify attributes of the offcore
        transaction]
  offcore_response.pf_l3_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) RFOs that miss the
        L3 and the data is returned from local dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  offcore_response.pf_l3_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd
       [Counts all prefetch (that bring data to LLC only) RFOs that miss the
        L3 and the data is returned from remote dram. Offcore response can be
        programmed only with a specific pair of event select and counter MSR,
        and with specific event codes and predefine mask bit value in a
        dedicated MSR to specify attributes of the offcore transaction]
  rtm_retired.aborted                               
       [Number of times RTM abort was triggered. (PEBS) (Precise event)]
  rtm_retired.aborted_events                        
       [Number of times an RTM execution aborted due to none of the previous 4
        categories (e.g. interrupt)]
  rtm_retired.aborted_mem                           
       [Number of times an RTM execution aborted due to various memory events
        (e.g. read/write capacity and conflicts)]
  rtm_retired.aborted_memtype                       
       [Number of times an RTM execution aborted due to incompatible memory
        type]
  rtm_retired.aborted_timer                         
       [Number of times an RTM execution aborted due to uncommon conditions]
  rtm_retired.aborted_unfriendly                    
       [Number of times an RTM execution aborted due to HLE-unfriendly
        instructions]
  rtm_retired.commit                                
       [Number of times RTM commit succeeded]
  rtm_retired.start                                 
       [Number of times we entered an RTM region. Does not count nested
        transactions]
  tx_exec.misc1                                     
       [Counts the number of times a class of instructions that may cause a
        transactional abort was executed. Since this is the count of
        execution, it may not always cause a transactional abort]
  tx_exec.misc2                                     
       [Unfriendly TSX abort triggered by a vzeroupper instruction]
  tx_exec.misc3                                     
       [Unfriendly TSX abort triggered by a nest count that is too deep]
  tx_exec.misc4                                     
       [RTM region detected inside HLE]
  tx_exec.misc5                                     
       [Counts the number of times an HLE XACQUIRE instruction was executed
        inside an RTM transactional region]
  tx_mem.abort_capacity                             
       [Number of times a transactional abort was signaled due to a data
        capacity limitation for transactional reads or writes]
  tx_mem.abort_conflict                             
       [Number of times a TSX line had a cache conflict]
  tx_mem.abort_hle_elision_buffer_mismatch          
       [Number of times a TSX Abort was triggered due to release/commit but
        data and address mismatch]
  tx_mem.abort_hle_elision_buffer_not_empty         
       [Number of times a TSX Abort was triggered due to commit but Lock
        Buffer not empty]
  tx_mem.abort_hle_elision_buffer_unsupported_alignment
       [Number of times a TSX Abort was triggered due to attempting an
        unsupported alignment from Lock Buffer]
  tx_mem.abort_hle_store_to_elided_lock             
       [Number of times a TSX Abort was triggered due to a non-release/commit
        store to lock]
  tx_mem.hle_elision_buffer_full                    
       [Number of times we could not allocate Lock Buffer]

other:
  core_power.lvl0_turbo_license                     
       [Core cycles where the core was running with power-delivery for
        baseline license level 0. This includes non-AVX codes, SSE, AVX
        128-bit, and low-current AVX 256-bit codes]
  core_power.lvl1_turbo_license                     
       [Core cycles where the core was running with power-delivery for license
        level 1. This includes high current AVX 256-bit instructions as well
        as low current AVX 512-bit instructions]
  core_power.lvl2_turbo_license                     
       [Core cycles where the core was running with power-delivery for license
        level 2 (introduced in Skylake Server michroarchtecture). This
        includes high current AVX 512-bit instructions]
  core_power.throttle                               
       [Core cycles the out-of-order engine was throttled due to a pending
        power level request]
  core_snoop_response.rsp_ifwdfe                    
       [(null)]
  core_snoop_response.rsp_ifwdm                     
       [(null)]
  core_snoop_response.rsp_ihitfse                   
       [(null)]
  core_snoop_response.rsp_ihiti                     
       [(null)]
  core_snoop_response.rsp_sfwdfe                    
       [(null)]
  core_snoop_response.rsp_sfwdm                     
       [(null)]
  core_snoop_response.rsp_shitfse                   
       [(null)]
  hw_interrupts.received                            
       [Counts the number of hardware interruptions received by the processor]
  idi_misc.wb_downgrade                             
       [Counts number of cache lines that are dropped and not written back to
        L3 as they are deemed to be less likely to be reused shortly]
  idi_misc.wb_upgrade                               
       [Counts number of cache lines that are allocated and written back to L3
        with the intention that they are more likely to be reused shortly]
  sw_prefetch_access.nta                            
       [Number of PREFETCHNTA instructions executed]
  sw_prefetch_access.prefetchw                      
       [Number of PREFETCHW instructions executed]
  sw_prefetch_access.t0                             
       [Number of PREFETCHT0 instructions executed]
  sw_prefetch_access.t1_t2                          
       [Number of PREFETCHT1 or PREFETCHT2 instructions executed]

pipeline:
  arith.divider_active                              
       [Cycles when divide unit is busy executing divide or square root
        operations. Accounts for integer and floating-point operations]
  baclears.any                                      
       [Counts the number of times the front-end is resteered when it finds a
        branch instruction in a fetch line. This occurs for the first time a
        branch instruction is fetched or when the branch is not tracked by the
        BPU (Branch Prediction Unit) anymore]
  br_inst_retired.all_branches                      
       [Counts all (macro) branch instructions retired Spec update: SKL091]
  br_inst_retired.all_branches_pebs                 
       [This is a precise version of BR_INST_RETIRED.ALL_BRANCHES that counts
        all (macro) branch instructions retired Spec update: SKL091 (Must be
        precise)]
  br_inst_retired.conditional                       
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts conditional branch instructions retired Spec update:
        SKL091 (Precise event)]
  br_inst_retired.far_branch                        
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts far branch instructions retired Spec update: SKL091
        (Precise event)]
  br_inst_retired.near_call                         
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts both direct and indirect near call instructions
        retired Spec update: SKL091 (Precise event)]
  br_inst_retired.near_return                       
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts return instructions retired Spec update: SKL091
        (Precise event)]
  br_inst_retired.near_taken                        
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts taken branch instructions retired Spec update:
        SKL091 (Precise event)]
  br_inst_retired.not_taken                         
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts not taken branch instructions retired Spec update:
        SKL091]
  br_misp_retired.all_branches                      
       [Counts all the retired branch instructions that were mispredicted by
        the processor. A branch misprediction occurs when the processor
        incorrectly predicts the destination of the branch. When the
        misprediction is discovered at execution, all the instructions
        executed in the wrong (speculative) path must be discarded, and the
        processor must start fetching from the correct path]
  br_misp_retired.all_branches_pebs                 
       [This is a precise version of BR_MISP_RETIRED.ALL_BRANCHES that counts
        all mispredicted macro branch instructions retired (Must be precise)]
  br_misp_retired.conditional                       
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts mispredicted conditional branch instructions retired
        (Precise event)]
  br_misp_retired.near_call                         
       [Counts both taken and not taken retired mispredicted direct and
        indirect near calls, including both register and memory indirect
        (Precise event)]
  br_misp_retired.near_taken                        
       [Number of near branch instructions retired that were mispredicted and
        taken (Precise event)]
  cpu_clk_thread_unhalted.one_thread_active         
       [Core crystal clock cycles when this thread is unhalted and the other
        thread is halted]
  cpu_clk_thread_unhalted.ref_xclk                  
       [Core crystal clock cycles when the thread is unhalted]
  cpu_clk_thread_unhalted.ref_xclk_any              
       [Core crystal clock cycles when at least one thread on the physical
        core is unhalted]
  cpu_clk_unhalted.one_thread_active                
       [Core crystal clock cycles when this thread is unhalted and the other
        thread is halted]
  cpu_clk_unhalted.ref_tsc                          
       [Counts the number of reference cycles when the core is not in a halt
        state. The core enters the halt state when it is running the HLT
        instruction or the MWAIT instruction. This event is not affected by
        core frequency changes (for example, P states, TM2 transitions) but
        has the same incrementing frequency as the time stamp counter. This
        event can approximate elapsed time while the core was not in a halt
        state. This event has a constant ratio with the
        CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed
        counter, leaving the four (eight when Hyperthreading is disabled)
        programmable counters available for other events. Note: On all current
        platforms this event stops counting during 'throttling (TM)' states
        duty off periods the processor is 'halted'. The counter update is done
        at a lower clock rate then the core clock the overflow status bit for
        this counter may appear 'sticky'. After the counter has overflowed and
        software clears the overflow status bit and resets the counter to less
        than MAX. The reset value to the counter is not clocked immediately so
        the overflow status bit will flip 'high (1)' and generate another PMI
        (if enabled) after which the reset value gets clocked into the
        counter. Therefore, software will get the interrupt, read the overflow
        status bit '1 for bit 34 while the counter value is less than MAX.
        Software should ignore this case]
  cpu_clk_unhalted.ref_xclk                         
       [Core crystal clock cycles when the thread is unhalted]
  cpu_clk_unhalted.ref_xclk_any                     
       [Core crystal clock cycles when at least one thread on the physical
        core is unhalted]
  cpu_clk_unhalted.ring0_trans                      
       [Counts when the Current Privilege Level (CPL) transitions from ring 1,
        2 or 3 to ring 0 (Kernel)]
  cpu_clk_unhalted.thread                           
       [Counts the number of core cycles while the thread is not in a halt
        state. The thread enters the halt state when it is running the HLT
        instruction. This event is a component in many key event ratios. The
        core frequency may change from time to time due to transitions
        associated with Enhanced Intel SpeedStep Technology or TM2. For this
        reason this event may have a changing ratio with regards to time. When
        the core frequency is constant, this event can approximate elapsed
        time while the core was not in the halt state. It is counted on a
        dedicated fixed counter, leaving the four (eight when Hyperthreading
        is disabled) programmable counters available for other events]
  cpu_clk_unhalted.thread_any                       
       [Core cycles when at least one thread on the physical core is not in
        halt state]
  cpu_clk_unhalted.thread_p                         
       [This is an architectural event that counts the number of thread cycles
        while the thread is not in a halt state. The thread enters the halt
        state when it is running the HLT instruction. The core frequency may
        change from time to time due to power or thermal throttling. For this
        reason, this event may have a changing ratio with regards to wall
        clock time]
  cpu_clk_unhalted.thread_p_any                     
       [Core cycles when at least one thread on the physical core is not in
        halt state]
  cycle_activity.cycles_l1d_miss                    
       [Cycles while L1 cache miss demand load is outstanding]
  cycle_activity.cycles_l2_miss                     
       [Cycles while L2 cache miss demand load is outstanding]
  cycle_activity.cycles_mem_any                     
       [Cycles while memory subsystem has an outstanding load]
  cycle_activity.stalls_l1d_miss                    
       [Execution stalls while L1 cache miss demand load is outstanding]
  cycle_activity.stalls_l2_miss                     
       [Execution stalls while L2 cache miss demand load is outstanding]
  cycle_activity.stalls_mem_any                     
       [Execution stalls while memory subsystem has an outstanding load]
  cycle_activity.stalls_total                       
       [Total execution stalls]
  exe_activity.1_ports_util                         
       [Counts cycles during which a total of 1 uop was executed on all ports
        and Reservation Station (RS) was not empty]
  exe_activity.2_ports_util                         
       [Counts cycles during which a total of 2 uops were executed on all
        ports and Reservation Station (RS) was not empty]
  exe_activity.3_ports_util                         
       [Cycles total of 3 uops are executed on all ports and Reservation
        Station (RS) was not empty]
  exe_activity.4_ports_util                         
       [Cycles total of 4 uops are executed on all ports and Reservation
        Station (RS) was not empty]
  exe_activity.bound_on_stores                      
       [Cycles where the Store Buffer was full and no outstanding load]
  exe_activity.exe_bound_0_ports                    
       [Counts cycles during which no uops were executed on all ports and
        Reservation Station (RS) was not empty]
  ild_stall.lcp                                     
       [Counts cycles that the Instruction Length decoder (ILD) stalls
        occurred due to dynamically changing prefix length of the decoded
        instruction (by operand size prefix instruction 0x66, address size
        prefix instruction 0x67 or REX.W for Intel64). Count is proportional
        to the number of prefixes in a 16B-line. This may result in a
        three-cycle penalty for each LCP (Length changing prefix) in a 16-byte
        chunk]
  inst_retired.any                                  
       [Counts the number of instructions retired from execution. For
        instructions that consist of multiple micro-ops, Counts the retirement
        of the last micro-op of the instruction. Counting continues during
        hardware interrupts, traps, and inside interrupt handlers. Notes:
        INST_RETIRED.ANY is counted by a designated fixed counter, leaving the
        four (eight when Hyperthreading is disabled) programmable counters
        available for other events. INST_RETIRED.ANY_P is counted by a
        programmable counter and it is an architectural performance event.
        Counting: Faulting executions of GETSEC/VM entry/VM Exit/MWait will
        not count as retired instructions]
  inst_retired.any_p                                
       [Counts the number of instructions (EOMs) retired. Counting covers
        macro-fused instructions individually (that is, increments by two)
        Spec update: SKL091, SKL044]
  inst_retired.prec_dist                            
       [A version of INST_RETIRED that allows for a more unbiased distribution
        of samples across instructions retired. It utilizes the Precise
        Distribution of Instructions Retired (PDIR) feature to mitigate some
        bias in how retired instructions get sampled Spec update: SKL091,
        SKL044 (Must be precise)]
  inst_retired.total_cycles_ps                      
       [Number of cycles using an always true condition applied to PEBS
        instructions retired event. (inst_ret< 16) Spec update: SKL091, SKL044
        (Must be precise)]
  int_misc.clear_resteer_cycles                     
       [Cycles the issue-stage is waiting for front-end to fetch from
        resteered path following branch misprediction or machine clear events]
  int_misc.recovery_cycles                          
       [Core cycles the Resource allocator was stalled due to recovery from an
        earlier branch misprediction or machine clear event]
  int_misc.recovery_cycles_any                      
       [Core cycles the allocator was stalled due to recovery from earlier
        clear event for any thread running on the physical core (e.g.
        misprediction or memory nuke)]
  ld_blocks.no_sr                                   
       [The number of times that split load operations are temporarily blocked
        because all resources for handling the split accesses are in use]
  ld_blocks.store_forward                           
       [Counts how many times the load operation got the true Block-on-Store
        blocking code preventing store forwarding. This includes cases when:a.
        preceding store conflicts with the load (incomplete overlap),b. store
        forwarding is impossible due to u-arch limitations,c. preceding lock
        RMW operations are not forwarded,d. store has the no-forward bit set
        (uncacheable/page-split/masked stores),e. all-blocking stores are used
        (mostly, fences and port I/O), and others.The most common case is a
        load blocked due to its address range overlapping with a preceding
        smaller uncompleted store. Note: This event does not take into account
        cases of out-of-SW-control (for example, SbTailHit), unknown physical
        STA, and cases of blocking loads on store due to being non-WB memory
        type or a lock. These cases are covered by other events. See the table
        of not supported store forwards in the Optimization Guide]
  ld_blocks_partial.address_alias                   
       [Counts false dependencies in MOB when the partial comparison upon
        loose net check and dependency was resolved by the Enhanced Loose net
        mechanism. This may not result in high performance penalties. Loose
        net checks can fail when loads and stores are 4k aliased]
  load_hit_pre.sw_pf                                
       [Counts all not software-prefetch load dispatches that hit the fill
        buffer (FB) allocated for the software prefetch. It can also be
        incremented by some lock instructions. So it should only be used with
        profiling so that the locks can be excluded by ASM (Assembly File)
        inspection of the nearby instructions]
  lsd.cycles_4_uops                                 
       [Counts the cycles when 4 uops are delivered by the LSD (Loop-stream
        detector)]
  lsd.cycles_active                                 
       [Counts the cycles when at least one uop is delivered by the LSD
        (Loop-stream detector)]
  lsd.uops                                          
       [Number of uops delivered to the back-end by the LSD(Loop Stream
        Detector)]
  machine_clears.count                              
       [Number of machine clears (nukes) of any type]
  machine_clears.smc                                
       [Counts self-modifying code (SMC) detected, which causes a machine
        clear]
  other_assists.any                                 
       [Number of times a microcode assist is invoked by HW other than
        FP-assist. Examples include AD (page Access Dirty) and AVX* related
        assists]
  resource_stalls.any                               
       [Counts resource-related stall cycles. Reasons for stalls can be as
        follows:a. *any* u-arch structure got full (LB, SB, RS, ROB, BOB, LM,
        Physical Register Reclaim Table (PRRT), or Physical History Table
        (PHT) slots).b. *any* u-arch structure got empty (like INT/SIMD
        FreeLists).c. FPU control word (FPCW), MXCSR.and others. This counts
        cycles that the pipeline back-end blocked uop delivery from the
        front-end]
  resource_stalls.sb                                
       [Counts allocation stall cycles caused by the store buffer (SB) being
        full. This counts cycles that the pipeline back-end blocked uop
        delivery from the front-end]
  rob_misc_events.lbr_inserts                       
       [Increments when an entry is added to the Last Branch Record (LBR)
        array (or removed from the array in case of RETURNs in call stack
        mode). The event requires LBR enable via IA32_DEBUGCTL MSR and branch
        type selection via MSR_LBR_SELECT]
  rs_events.empty_cycles                            
       [Counts cycles during which the reservation station (RS) is empty for
        the thread.; Note: In ST-mode, not active thread should drive 0. This
        is usually caused by severely costly branch mispredictions, or
        allocator/FE issues]
  rs_events.empty_end                               
       [Counts end of periods where the Reservation Station (RS) was empty.
        Could be useful to precisely locate front-end Latency Bound issues]
  uops_dispatched_port.port_0                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 0]
  uops_dispatched_port.port_1                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 1]
  uops_dispatched_port.port_2                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 2]
  uops_dispatched_port.port_3                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 3]
  uops_dispatched_port.port_4                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 4]
  uops_dispatched_port.port_5                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 5]
  uops_dispatched_port.port_6                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 6]
  uops_dispatched_port.port_7                       
       [Counts, on the per-thread basis, cycles during which at least one uop
        is dispatched from the Reservation Station (RS) to port 7]
  uops_executed.core                                
       [Number of uops executed from any thread]
  uops_executed.core_cycles_ge_1                    
       [Cycles at least 1 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_2                    
       [Cycles at least 2 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_3                    
       [Cycles at least 3 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_4                    
       [Cycles at least 4 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_none                    
       [Cycles with no micro-ops executed from any thread on physical core]
  uops_executed.cycles_ge_1_uop_exec                
       [Cycles where at least 1 uop was executed per-thread]
  uops_executed.cycles_ge_2_uops_exec               
       [Cycles where at least 2 uops were executed per-thread]
  uops_executed.cycles_ge_3_uops_exec               
       [Cycles where at least 3 uops were executed per-thread]
  uops_executed.cycles_ge_4_uops_exec               
       [Cycles where at least 4 uops were executed per-thread]
  uops_executed.stall_cycles                        
       [Counts cycles during which no uops were dispatched from the
        Reservation Station (RS) per thread]
  uops_executed.thread                              
       [Number of uops to be executed per-thread each cycle]
  uops_executed.x87                                 
       [Counts the number of x87 uops executed]
  uops_issued.any                                   
       [Counts the number of uops that the Resource Allocation Table (RAT)
        issues to the Reservation Station (RS)]
  uops_issued.slow_lea                              
       [Number of slow LEA uops being allocated. A uop is generally considered
        SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if
        as a result of LEA instruction or not]
  uops_issued.stall_cycles                          
       [Counts cycles during which the Resource Allocation Table (RAT) does
        not issue any Uops to the reservation station (RS) for the current
        thread]
  uops_issued.vector_width_mismatch                 
       [Counts the number of Blend Uops issued by the Resource Allocation
        Table (RAT) to the reservation station (RS) in order to preserve upper
        bits of vector registers. Starting with the Skylake microarchitecture,
        these Blend uops are needed since every Intel SSE instruction executed
        in Dirty Upper State needs to preserve bits 128-255 of the destination
        register. For more information, refer to “Mixing Intel AVX and Intel
        SSE Code” section of the Optimization Guide]
  uops_retired.retire_slots                         
       [Counts the retirement slots used]
  uops_retired.stall_cycles                         
       [This is a non-precise version (that is, does not use PEBS) of the
        event that counts cycles without actually retired uops]
  uops_retired.total_cycles                         
       [Number of cycles using always true condition (uops_ret < 16) applied
        to non PEBS uops retired event]

virtual memory:
  dtlb_load_misses.miss_causes_a_walk               
       [Counts demand data loads that caused a page walk of any page size
        (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk
        need not have completed]
  dtlb_load_misses.stlb_hit                         
       [Counts loads that miss the DTLB (Data TLB) and hit the STLB (Second
        level TLB)]
  dtlb_load_misses.walk_active                      
       [Counts cycles when at least one PMH (Page Miss Handler) is busy with a
        page walk for a load]
  dtlb_load_misses.walk_completed                   
       [Counts demand data loads that caused a completed page walk of any page
        size (4K/2M/4M/1G). This implies it missed in all TLB levels. The page
        walk can end with or without a fault]
  dtlb_load_misses.walk_completed_1g                
       [Counts page walks completed due to demand data loads whose address
        translations missed in the TLB and were mapped to 4K pages. The page
        walks can end with or without a page fault]
  dtlb_load_misses.walk_completed_2m_4m             
       [Counts page walks completed due to demand data loads whose address
        translations missed in the TLB and were mapped to 2M/4M pages. The
        page walks can end with or without a page fault]
  dtlb_load_misses.walk_completed_4k                
       [Counts page walks completed due to demand data loads whose address
        translations missed in the TLB and were mapped to 4K pages. The page
        walks can end with or without a page fault]
  dtlb_load_misses.walk_pending                     
       [Counts 1 per cycle for each PMH that is busy with a page walk for a
        load. EPT page walk duration are excluded in Skylake microarchitecture]
  dtlb_store_misses.miss_causes_a_walk              
       [Counts demand data stores that caused a page walk of any page size
        (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk
        need not have completed]
  dtlb_store_misses.stlb_hit                        
       [Stores that miss the DTLB (Data TLB) and hit the STLB (2nd Level TLB)]
  dtlb_store_misses.walk_active                     
       [Counts cycles when at least one PMH (Page Miss Handler) is busy with a
        page walk for a store]
  dtlb_store_misses.walk_completed                  
       [Counts demand data stores that caused a completed page walk of any
        page size (4K/2M/4M/1G). This implies it missed in all TLB levels. The
        page walk can end with or without a fault]
  dtlb_store_misses.walk_completed_1g               
       [Counts page walks completed due to demand data stores whose address
        translations missed in the TLB and were mapped to 1G pages. The page
        walks can end with or without a page fault]
  dtlb_store_misses.walk_completed_2m_4m            
       [Counts page walks completed due to demand data stores whose address
        translations missed in the TLB and were mapped to 2M/4M pages. The
        page walks can end with or without a page fault]
  dtlb_store_misses.walk_completed_4k               
       [Counts page walks completed due to demand data stores whose address
        translations missed in the TLB and were mapped to 4K pages. The page
        walks can end with or without a page fault]
  dtlb_store_misses.walk_pending                    
       [Counts 1 per cycle for each PMH that is busy with a page walk for a
        store. EPT page walk duration are excluded in Skylake
        microarchitecture]
  ept.walk_pending                                  
       [Counts cycles for each PMH (Page Miss Handler) that is busy with an
        EPT (Extended Page Table) walk for any request type]
  itlb.itlb_flush                                   
       [Counts the number of flushes of the big or small ITLB pages. Counting
        include both TLB Flush (covering all sets) and TLB Set Clear
        (set-specific)]
  itlb_misses.miss_causes_a_walk                    
       [Counts page walks of any page size (4K/2M/4M/1G) caused by a code
        fetch. This implies it missed in the ITLB and further levels of TLB,
        but the walk need not have completed]
  itlb_misses.stlb_hit                              
       [Instruction fetch requests that miss the ITLB and hit the STLB]
  itlb_misses.walk_active                           
       [Cycles when at least one PMH is busy with a page walk for code
        (instruction fetch) request. EPT page walk duration are excluded in
        Skylake microarchitecture]
  itlb_misses.walk_completed                        
       [Counts completed page walks (2M and 4M page sizes) caused by a code
        fetch. This implies it missed in the ITLB and further levels of TLB.
        The page walk can end with or without a fault]
  itlb_misses.walk_completed_1g                     
       [Counts store misses in all DTLB levels that cause a completed page
        walk (1G page size). The page walk can end with or without a fault]
  itlb_misses.walk_completed_2m_4m                  
       [Counts code misses in all ITLB levels that caused a completed page
        walk (2M and 4M page sizes). The page walk can end with or without a
        fault]
  itlb_misses.walk_completed_4k                     
       [Counts completed page walks (4K page size) caused by a code fetch.
        This implies it missed in the ITLB and further levels of TLB. The page
        walk can end with or without a fault]
  itlb_misses.walk_pending                          
       [Counts 1 per cycle for each PMH (Page Miss Handler) that is busy with
        a page walk for an instruction fetch request. EPT page walk duration
        are excluded in Skylake michroarchitecture]
  tlb_flush.dtlb_thread                             
       [Counts the number of DTLB flush attempts of the thread-specific
        entries]
  tlb_flush.stlb_any                                
       [Counts the number of any STLB flush attempts (such as entire, VPID,
        PCID, InvPage, CR3 write, etc.)]
  rNNN                                               [Raw hardware event descriptor]
  cpu/t1=v1[,t2=v2,t3 ...]/modifier                  [Raw hardware event descriptor]
  mem:<addr>[/len][:access]                          [Hardware breakpoint]
  alarmtimer:alarmtimer_cancel                       [Tracepoint event]
  alarmtimer:alarmtimer_fired                        [Tracepoint event]
  alarmtimer:alarmtimer_start                        [Tracepoint event]
  alarmtimer:alarmtimer_suspend                      [Tracepoint event]
  amd_cpu:amd_pstate_perf                            [Tracepoint event]
  avc:selinux_audited                                [Tracepoint event]
  block:block_bio_backmerge                          [Tracepoint event]
  block:block_bio_bounce                             [Tracepoint event]
  block:block_bio_complete                           [Tracepoint event]
  block:block_bio_frontmerge                         [Tracepoint event]
  block:block_bio_queue                              [Tracepoint event]
  block:block_bio_remap                              [Tracepoint event]
  block:block_dirty_buffer                           [Tracepoint event]
  block:block_getrq                                  [Tracepoint event]
  block:block_plug                                   [Tracepoint event]
  block:block_rq_complete                            [Tracepoint event]
  block:block_rq_error                               [Tracepoint event]
  block:block_rq_insert                              [Tracepoint event]
  block:block_rq_issue                               [Tracepoint event]
  block:block_rq_merge                               [Tracepoint event]
  block:block_rq_remap                               [Tracepoint event]
  block:block_rq_requeue                             [Tracepoint event]
  block:block_split                                  [Tracepoint event]
  block:block_touch_buffer                           [Tracepoint event]
  block:block_unplug                                 [Tracepoint event]
  bpf_test_run:bpf_test_finish                       [Tracepoint event]
  bpf_trace:bpf_trace_printk                         [Tracepoint event]
  bridge:br_fdb_add                                  [Tracepoint event]
  bridge:br_fdb_external_learn_add                   [Tracepoint event]
  bridge:br_fdb_update                               [Tracepoint event]
  bridge:br_mdb_full                                 [Tracepoint event]
  bridge:fdb_delete                                  [Tracepoint event]
  btrfs:__extent_writepage                           [Tracepoint event]
  btrfs:add_delayed_data_ref                         [Tracepoint event]
  btrfs:add_delayed_ref_head                         [Tracepoint event]
  btrfs:add_delayed_tree_ref                         [Tracepoint event]
  btrfs:alloc_extent_state                           [Tracepoint event]
  btrfs:btrfs_add_block_group                        [Tracepoint event]
  btrfs:btrfs_add_reclaim_block_group                [Tracepoint event]
  btrfs:btrfs_add_unused_block_group                 [Tracepoint event]
  btrfs:btrfs_all_work_done                          [Tracepoint event]
  btrfs:btrfs_chunk_alloc                            [Tracepoint event]
  btrfs:btrfs_chunk_free                             [Tracepoint event]
  btrfs:btrfs_clear_extent_bit                       [Tracepoint event]
  btrfs:btrfs_convert_extent_bit                     [Tracepoint event]
  btrfs:btrfs_cow_block                              [Tracepoint event]
  btrfs:btrfs_done_preemptive_reclaim                [Tracepoint event]
  btrfs:btrfs_fail_all_tickets                       [Tracepoint event]
  btrfs:btrfs_failed_cluster_setup                   [Tracepoint event]
  btrfs:btrfs_find_cluster                           [Tracepoint event]
  btrfs:btrfs_flush_space                            [Tracepoint event]
  btrfs:btrfs_get_extent                             [Tracepoint event]
  btrfs:btrfs_get_extent_show_fi_inline              [Tracepoint event]
  btrfs:btrfs_get_extent_show_fi_regular             [Tracepoint event]
  btrfs:btrfs_handle_em_exist                        [Tracepoint event]
  btrfs:btrfs_inode_evict                            [Tracepoint event]
  btrfs:btrfs_inode_mod_outstanding_extents          [Tracepoint event]
  btrfs:btrfs_inode_new                              [Tracepoint event]
  btrfs:btrfs_inode_request                          [Tracepoint event]
  btrfs:btrfs_ordered_extent_add                     [Tracepoint event]
  btrfs:btrfs_ordered_extent_dec_test_pending        [Tracepoint event]
  btrfs:btrfs_ordered_extent_lookup                  [Tracepoint event]
  btrfs:btrfs_ordered_extent_lookup_first            [Tracepoint event]
  btrfs:btrfs_ordered_extent_lookup_first_range      [Tracepoint event]
  btrfs:btrfs_ordered_extent_lookup_for_logging      [Tracepoint event]
  btrfs:btrfs_ordered_extent_lookup_range            [Tracepoint event]
  btrfs:btrfs_ordered_extent_mark_finished           [Tracepoint event]
  btrfs:btrfs_ordered_extent_put                     [Tracepoint event]
  btrfs:btrfs_ordered_extent_remove                  [Tracepoint event]
  btrfs:btrfs_ordered_extent_split                   [Tracepoint event]
  btrfs:btrfs_ordered_extent_start                   [Tracepoint event]
  btrfs:btrfs_ordered_sched                          [Tracepoint event]
  btrfs:btrfs_prelim_ref_insert                      [Tracepoint event]
  btrfs:btrfs_prelim_ref_merge                       [Tracepoint event]
  btrfs:btrfs_qgroup_account_extent                  [Tracepoint event]
  btrfs:btrfs_qgroup_account_extents                 [Tracepoint event]
  btrfs:btrfs_qgroup_release_data                    [Tracepoint event]
  btrfs:btrfs_qgroup_reserve_data                    [Tracepoint event]
  btrfs:btrfs_qgroup_trace_extent                    [Tracepoint event]
  btrfs:btrfs_reclaim_block_group                    [Tracepoint event]
  btrfs:btrfs_remove_block_group                     [Tracepoint event]
  btrfs:btrfs_reserve_extent                         [Tracepoint event]
  btrfs:btrfs_reserve_extent_cluster                 [Tracepoint event]
  btrfs:btrfs_reserve_ticket                         [Tracepoint event]
  btrfs:btrfs_reserved_extent_alloc                  [Tracepoint event]
  btrfs:btrfs_reserved_extent_free                   [Tracepoint event]
  btrfs:btrfs_set_extent_bit                         [Tracepoint event]
  btrfs:btrfs_set_lock_blocking_read                 [Tracepoint event]
  btrfs:btrfs_set_lock_blocking_write                [Tracepoint event]
  btrfs:btrfs_setup_cluster                          [Tracepoint event]
  btrfs:btrfs_skip_unused_block_group                [Tracepoint event]
  btrfs:btrfs_space_reservation                      [Tracepoint event]
  btrfs:btrfs_sync_file                              [Tracepoint event]
  btrfs:btrfs_sync_fs                                [Tracepoint event]
  btrfs:btrfs_transaction_commit                     [Tracepoint event]
  btrfs:btrfs_tree_lock                              [Tracepoint event]
  btrfs:btrfs_tree_read_lock                         [Tracepoint event]
  btrfs:btrfs_tree_read_lock_atomic                  [Tracepoint event]
  btrfs:btrfs_tree_read_unlock                       [Tracepoint event]
  btrfs:btrfs_tree_read_unlock_blocking              [Tracepoint event]
  btrfs:btrfs_tree_unlock                            [Tracepoint event]
  btrfs:btrfs_trigger_flush                          [Tracepoint event]
  btrfs:btrfs_truncate_show_fi_inline                [Tracepoint event]
  btrfs:btrfs_truncate_show_fi_regular               [Tracepoint event]
  btrfs:btrfs_try_tree_read_lock                     [Tracepoint event]
  btrfs:btrfs_try_tree_write_lock                    [Tracepoint event]
  btrfs:btrfs_work_queued                            [Tracepoint event]
  btrfs:btrfs_work_sched                             [Tracepoint event]
  btrfs:btrfs_workqueue_alloc                        [Tracepoint event]
  btrfs:btrfs_workqueue_destroy                      [Tracepoint event]
  btrfs:btrfs_writepage_end_io_hook                  [Tracepoint event]
  btrfs:find_free_extent                             [Tracepoint event]
  btrfs:find_free_extent_have_block_group            [Tracepoint event]
  btrfs:find_free_extent_search_loop                 [Tracepoint event]
  btrfs:free_extent_state                            [Tracepoint event]
  btrfs:qgroup_meta_convert                          [Tracepoint event]
  btrfs:qgroup_meta_free_all_pertrans                [Tracepoint event]
  btrfs:qgroup_meta_reserve                          [Tracepoint event]
  btrfs:qgroup_num_dirty_extents                     [Tracepoint event]
  btrfs:qgroup_update_counters                       [Tracepoint event]
  btrfs:qgroup_update_reserve                        [Tracepoint event]
  btrfs:raid56_read_partial                          [Tracepoint event]
  btrfs:raid56_scrub_read                            [Tracepoint event]
  btrfs:raid56_scrub_read_recover                    [Tracepoint event]
  btrfs:raid56_scrub_write_stripe                    [Tracepoint event]
  btrfs:raid56_write_stripe                          [Tracepoint event]
  btrfs:run_delayed_data_ref                         [Tracepoint event]
  btrfs:run_delayed_ref_head                         [Tracepoint event]
  btrfs:run_delayed_tree_ref                         [Tracepoint event]
  btrfs:update_bytes_may_use                         [Tracepoint event]
  btrfs:update_bytes_pinned                          [Tracepoint event]
  cgroup:cgroup_attach_task                          [Tracepoint event]
  cgroup:cgroup_destroy_root                         [Tracepoint event]
  cgroup:cgroup_freeze                               [Tracepoint event]
  cgroup:cgroup_mkdir                                [Tracepoint event]
  cgroup:cgroup_notify_frozen                        [Tracepoint event]
  cgroup:cgroup_notify_populated                     [Tracepoint event]
  cgroup:cgroup_release                              [Tracepoint event]
  cgroup:cgroup_remount                              [Tracepoint event]
  cgroup:cgroup_rename                               [Tracepoint event]
  cgroup:cgroup_rmdir                                [Tracepoint event]
  cgroup:cgroup_setup_root                           [Tracepoint event]
  cgroup:cgroup_transfer_tasks                       [Tracepoint event]
  cgroup:cgroup_unfreeze                             [Tracepoint event]
  clk:clk_disable                                    [Tracepoint event]
  clk:clk_disable_complete                           [Tracepoint event]
  clk:clk_enable                                     [Tracepoint event]
  clk:clk_enable_complete                            [Tracepoint event]
  clk:clk_prepare                                    [Tracepoint event]
  clk:clk_prepare_complete                           [Tracepoint event]
  clk:clk_rate_request_done                          [Tracepoint event]
  clk:clk_rate_request_start                         [Tracepoint event]
  clk:clk_set_duty_cycle                             [Tracepoint event]
  clk:clk_set_duty_cycle_complete                    [Tracepoint event]
  clk:clk_set_max_rate                               [Tracepoint event]
  clk:clk_set_min_rate                               [Tracepoint event]
  clk:clk_set_parent                                 [Tracepoint event]
  clk:clk_set_parent_complete                        [Tracepoint event]
  clk:clk_set_phase                                  [Tracepoint event]
  clk:clk_set_phase_complete                         [Tracepoint event]
  clk:clk_set_rate                                   [Tracepoint event]
  clk:clk_set_rate_complete                          [Tracepoint event]
  clk:clk_set_rate_range                             [Tracepoint event]
  clk:clk_unprepare                                  [Tracepoint event]
  clk:clk_unprepare_complete                         [Tracepoint event]
  compaction:mm_compaction_begin                     [Tracepoint event]
  compaction:mm_compaction_defer_compaction          [Tracepoint event]
  compaction:mm_compaction_defer_reset               [Tracepoint event]
  compaction:mm_compaction_deferred                  [Tracepoint event]
  compaction:mm_compaction_end                       [Tracepoint event]
  compaction:mm_compaction_finished                  [Tracepoint event]
  compaction:mm_compaction_isolate_freepages         [Tracepoint event]
  compaction:mm_compaction_isolate_migratepages      [Tracepoint event]
  compaction:mm_compaction_kcompactd_sleep           [Tracepoint event]
  compaction:mm_compaction_kcompactd_wake            [Tracepoint event]
  compaction:mm_compaction_migratepages              [Tracepoint event]
  compaction:mm_compaction_suitable                  [Tracepoint event]
  compaction:mm_compaction_try_to_compact_pages      [Tracepoint event]
  compaction:mm_compaction_wakeup_kcompactd          [Tracepoint event]
  context_tracking:user_enter                        [Tracepoint event]
  context_tracking:user_exit                         [Tracepoint event]
  cpuhp:cpuhp_enter                                  [Tracepoint event]
  cpuhp:cpuhp_exit                                   [Tracepoint event]
  cpuhp:cpuhp_multi_enter                            [Tracepoint event]
  dev:devres_log                                     [Tracepoint event]
  devfreq:devfreq_frequency                          [Tracepoint event]
  devfreq:devfreq_monitor                            [Tracepoint event]
  devlink:devlink_health_recover_aborted             [Tracepoint event]
  devlink:devlink_health_report                      [Tracepoint event]
  devlink:devlink_health_reporter_state_update       [Tracepoint event]
  devlink:devlink_hwerr                              [Tracepoint event]
  devlink:devlink_hwmsg                              [Tracepoint event]
  devlink:devlink_trap_report                        [Tracepoint event]
  dma_fence:dma_fence_destroy                        [Tracepoint event]
  dma_fence:dma_fence_emit                           [Tracepoint event]
  dma_fence:dma_fence_enable_signal                  [Tracepoint event]
  dma_fence:dma_fence_init                           [Tracepoint event]
  dma_fence:dma_fence_signaled                       [Tracepoint event]
  dma_fence:dma_fence_wait_end                       [Tracepoint event]
  dma_fence:dma_fence_wait_start                     [Tracepoint event]
  drm:drm_vblank_event                               [Tracepoint event]
  drm:drm_vblank_event_delivered                     [Tracepoint event]
  drm:drm_vblank_event_queued                        [Tracepoint event]
  error_report:error_report_end                      [Tracepoint event]
  exceptions:page_fault_kernel                       [Tracepoint event]
  exceptions:page_fault_user                         [Tracepoint event]
  fib6:fib6_table_lookup                             [Tracepoint event]
  fib:fib_table_lookup                               [Tracepoint event]
  filelock:break_lease_block                         [Tracepoint event]
  filelock:break_lease_noblock                       [Tracepoint event]
  filelock:break_lease_unblock                       [Tracepoint event]
  filelock:fcntl_setlk                               [Tracepoint event]
  filelock:flock_lock_inode                          [Tracepoint event]
  filelock:generic_add_lease                         [Tracepoint event]
  filelock:generic_delete_lease                      [Tracepoint event]
  filelock:leases_conflict                           [Tracepoint event]
  filelock:locks_get_lock_context                    [Tracepoint event]
  filelock:locks_remove_posix                        [Tracepoint event]
  filelock:posix_lock_inode                          [Tracepoint event]
  filelock:time_out_leases                           [Tracepoint event]
  filemap:file_check_and_advance_wb_err              [Tracepoint event]
  filemap:filemap_set_wb_err                         [Tracepoint event]
  filemap:mm_filemap_add_to_page_cache               [Tracepoint event]
  filemap:mm_filemap_delete_from_page_cache          [Tracepoint event]
  fs_dax:dax_insert_mapping                          [Tracepoint event]
  fs_dax:dax_insert_pfn_mkwrite                      [Tracepoint event]
  fs_dax:dax_insert_pfn_mkwrite_no_entry             [Tracepoint event]
  fs_dax:dax_load_hole                               [Tracepoint event]
  fs_dax:dax_pmd_fault                               [Tracepoint event]
  fs_dax:dax_pmd_fault_done                          [Tracepoint event]
  fs_dax:dax_pmd_insert_mapping                      [Tracepoint event]
  fs_dax:dax_pmd_load_hole                           [Tracepoint event]
  fs_dax:dax_pmd_load_hole_fallback                  [Tracepoint event]
  fs_dax:dax_pte_fault                               [Tracepoint event]
  fs_dax:dax_pte_fault_done                          [Tracepoint event]
  fs_dax:dax_writeback_one                           [Tracepoint event]
  fs_dax:dax_writeback_range                         [Tracepoint event]
  fs_dax:dax_writeback_range_done                    [Tracepoint event]
  ftrace:function                                    [Tracepoint event]
  ftrace:print                                       [Tracepoint event]
  gpio:gpio_direction                                [Tracepoint event]
  gpio:gpio_value                                    [Tracepoint event]
  handshake:handshake_cancel                         [Tracepoint event]
  handshake:handshake_cancel_busy                    [Tracepoint event]
  handshake:handshake_cancel_none                    [Tracepoint event]
  handshake:handshake_cmd_accept                     [Tracepoint event]
  handshake:handshake_cmd_accept_err                 [Tracepoint event]
  handshake:handshake_cmd_done                       [Tracepoint event]
  handshake:handshake_cmd_done_err                   [Tracepoint event]
  handshake:handshake_complete                       [Tracepoint event]
  handshake:handshake_destruct                       [Tracepoint event]
  handshake:handshake_notify_err                     [Tracepoint event]
  handshake:handshake_submit                         [Tracepoint event]
  handshake:handshake_submit_err                     [Tracepoint event]
  huge_memory:mm_collapse_huge_page                  [Tracepoint event]
  huge_memory:mm_collapse_huge_page_isolate          [Tracepoint event]
  huge_memory:mm_collapse_huge_page_swapin           [Tracepoint event]
  huge_memory:mm_khugepaged_collapse_file            [Tracepoint event]
  huge_memory:mm_khugepaged_scan_file                [Tracepoint event]
  huge_memory:mm_khugepaged_scan_pmd                 [Tracepoint event]
  hwmon:hwmon_attr_show                              [Tracepoint event]
  hwmon:hwmon_attr_show_string                       [Tracepoint event]
  hwmon:hwmon_attr_store                             [Tracepoint event]
  hyperv:hyperv_mmu_flush_tlb_multi                  [Tracepoint event]
  hyperv:hyperv_nested_flush_guest_mapping           [Tracepoint event]
  hyperv:hyperv_nested_flush_guest_mapping_range     [Tracepoint event]
  hyperv:hyperv_send_ipi_mask                        [Tracepoint event]
  hyperv:hyperv_send_ipi_one                         [Tracepoint event]
  i2c:i2c_read                                       [Tracepoint event]
  i2c:i2c_reply                                      [Tracepoint event]
  i2c:i2c_result                                     [Tracepoint event]
  i2c:i2c_write                                      [Tracepoint event]
  i2c_slave:i2c_slave                                [Tracepoint event]
  initcall:initcall_finish                           [Tracepoint event]
  initcall:initcall_level                            [Tracepoint event]
  initcall:initcall_start                            [Tracepoint event]
  intel_iommu:prq_report                             [Tracepoint event]
  intel_iommu:qi_submit                              [Tracepoint event]
  io_uring:io_uring_complete                         [Tracepoint event]
  io_uring:io_uring_cqe_overflow                     [Tracepoint event]
  io_uring:io_uring_cqring_wait                      [Tracepoint event]
  io_uring:io_uring_create                           [Tracepoint event]
  io_uring:io_uring_defer                            [Tracepoint event]
  io_uring:io_uring_fail_link                        [Tracepoint event]
  io_uring:io_uring_file_get                         [Tracepoint event]
  io_uring:io_uring_link                             [Tracepoint event]
  io_uring:io_uring_local_work_run                   [Tracepoint event]
  io_uring:io_uring_poll_arm                         [Tracepoint event]
  io_uring:io_uring_queue_async_work                 [Tracepoint event]
  io_uring:io_uring_register                         [Tracepoint event]
  io_uring:io_uring_req_failed                       [Tracepoint event]
  io_uring:io_uring_short_write                      [Tracepoint event]
  io_uring:io_uring_submit_req                       [Tracepoint event]
  io_uring:io_uring_task_add                         [Tracepoint event]
  io_uring:io_uring_task_work_run                    [Tracepoint event]
  iomap:iomap_dio_complete                           [Tracepoint event]
  iomap:iomap_dio_invalidate_fail                    [Tracepoint event]
  iomap:iomap_dio_rw_begin                           [Tracepoint event]
  iomap:iomap_dio_rw_queued                          [Tracepoint event]
  iomap:iomap_invalidate_folio                       [Tracepoint event]
  iomap:iomap_iter                                   [Tracepoint event]
  iomap:iomap_iter_dstmap                            [Tracepoint event]
  iomap:iomap_iter_srcmap                            [Tracepoint event]
  iomap:iomap_readahead                              [Tracepoint event]
  iomap:iomap_readpage                               [Tracepoint event]
  iomap:iomap_release_folio                          [Tracepoint event]
  iomap:iomap_writepage                              [Tracepoint event]
  iomap:iomap_writepage_map                          [Tracepoint event]
  iommu:add_device_to_group                          [Tracepoint event]
  iommu:attach_device_to_domain                      [Tracepoint event]
  iommu:io_page_fault                                [Tracepoint event]
  iommu:map                                          [Tracepoint event]
  iommu:remove_device_from_group                     [Tracepoint event]
  iommu:unmap                                        [Tracepoint event]
  ipi:ipi_entry                                      [Tracepoint event]
  ipi:ipi_exit                                       [Tracepoint event]
  ipi:ipi_raise                                      [Tracepoint event]
  ipi:ipi_send_cpu                                   [Tracepoint event]
  ipi:ipi_send_cpumask                               [Tracepoint event]
  irq:irq_handler_entry                              [Tracepoint event]
  irq:irq_handler_exit                               [Tracepoint event]
  irq:softirq_entry                                  [Tracepoint event]
  irq:softirq_exit                                   [Tracepoint event]
  irq:softirq_raise                                  [Tracepoint event]
  irq:tasklet_entry                                  [Tracepoint event]
  irq:tasklet_exit                                   [Tracepoint event]
  irq_matrix:irq_matrix_alloc                        [Tracepoint event]
  irq_matrix:irq_matrix_alloc_managed                [Tracepoint event]
  irq_matrix:irq_matrix_alloc_reserved               [Tracepoint event]
  irq_matrix:irq_matrix_assign                       [Tracepoint event]
  irq_matrix:irq_matrix_assign_system                [Tracepoint event]
  irq_matrix:irq_matrix_free                         [Tracepoint event]
  irq_matrix:irq_matrix_offline                      [Tracepoint event]
  irq_matrix:irq_matrix_online                       [Tracepoint event]
  irq_matrix:irq_matrix_remove_managed               [Tracepoint event]
  irq_matrix:irq_matrix_remove_reserved              [Tracepoint event]
  irq_matrix:irq_matrix_reserve                      [Tracepoint event]
  irq_matrix:irq_matrix_reserve_managed              [Tracepoint event]
  irq_vectors:call_function_entry                    [Tracepoint event]
  irq_vectors:call_function_exit                     [Tracepoint event]
  irq_vectors:call_function_single_entry             [Tracepoint event]
  irq_vectors:call_function_single_exit              [Tracepoint event]
  irq_vectors:deferred_error_apic_entry              [Tracepoint event]
  irq_vectors:deferred_error_apic_exit               [Tracepoint event]
  irq_vectors:error_apic_entry                       [Tracepoint event]
  irq_vectors:error_apic_exit                        [Tracepoint event]
  irq_vectors:irq_work_entry                         [Tracepoint event]
  irq_vectors:irq_work_exit                          [Tracepoint event]
  irq_vectors:local_timer_entry                      [Tracepoint event]
  irq_vectors:local_timer_exit                       [Tracepoint event]
  irq_vectors:reschedule_entry                       [Tracepoint event]
  irq_vectors:reschedule_exit                        [Tracepoint event]
  irq_vectors:spurious_apic_entry                    [Tracepoint event]
  irq_vectors:spurious_apic_exit                     [Tracepoint event]
  irq_vectors:thermal_apic_entry                     [Tracepoint event]
  irq_vectors:thermal_apic_exit                      [Tracepoint event]
  irq_vectors:threshold_apic_entry                   [Tracepoint event]
  irq_vectors:threshold_apic_exit                    [Tracepoint event]
  irq_vectors:vector_activate                        [Tracepoint event]
  irq_vectors:vector_alloc                           [Tracepoint event]
  irq_vectors:vector_alloc_managed                   [Tracepoint event]
  irq_vectors:vector_clear                           [Tracepoint event]
  irq_vectors:vector_config                          [Tracepoint event]
  irq_vectors:vector_deactivate                      [Tracepoint event]
  irq_vectors:vector_free_moved                      [Tracepoint event]
  irq_vectors:vector_reserve                         [Tracepoint event]
  irq_vectors:vector_reserve_managed                 [Tracepoint event]
  irq_vectors:vector_setup                           [Tracepoint event]
  irq_vectors:vector_teardown                        [Tracepoint event]
  irq_vectors:vector_update                          [Tracepoint event]
  irq_vectors:x86_platform_ipi_entry                 [Tracepoint event]
  irq_vectors:x86_platform_ipi_exit                  [Tracepoint event]
  kmem:kfree                                         [Tracepoint event]
  kmem:kmalloc                                       [Tracepoint event]
  kmem:kmem_cache_alloc                              [Tracepoint event]
  kmem:kmem_cache_free                               [Tracepoint event]
  kmem:mm_page_alloc                                 [Tracepoint event]
  kmem:mm_page_alloc_extfrag                         [Tracepoint event]
  kmem:mm_page_alloc_zone_locked                     [Tracepoint event]
  kmem:mm_page_free                                  [Tracepoint event]
  kmem:mm_page_free_batched                          [Tracepoint event]
  kmem:mm_page_pcpu_drain                            [Tracepoint event]
  kmem:rss_stat                                      [Tracepoint event]
  ksm:ksm_enter                                      [Tracepoint event]
  ksm:ksm_exit                                       [Tracepoint event]
  ksm:ksm_merge_one_page                             [Tracepoint event]
  ksm:ksm_merge_with_ksm_page                        [Tracepoint event]
  ksm:ksm_remove_ksm_page                            [Tracepoint event]
  ksm:ksm_remove_rmap_item                           [Tracepoint event]
  ksm:ksm_start_scan                                 [Tracepoint event]
  ksm:ksm_stop_scan                                  [Tracepoint event]
  kvm:kvm_ack_irq                                    [Tracepoint event]
  kvm:kvm_age_hva                                    [Tracepoint event]
  kvm:kvm_apic                                       [Tracepoint event]
  kvm:kvm_apic_accept_irq                            [Tracepoint event]
  kvm:kvm_apic_ipi                                   [Tracepoint event]
  kvm:kvm_apicv_accept_irq                           [Tracepoint event]
  kvm:kvm_apicv_inhibit_changed                      [Tracepoint event]
  kvm:kvm_async_pf_completed                         [Tracepoint event]
  kvm:kvm_async_pf_not_present                       [Tracepoint event]
  kvm:kvm_async_pf_ready                             [Tracepoint event]
  kvm:kvm_async_pf_repeated_fault                    [Tracepoint event]
  kvm:kvm_avic_doorbell                              [Tracepoint event]
  kvm:kvm_avic_ga_log                                [Tracepoint event]
  kvm:kvm_avic_incomplete_ipi                        [Tracepoint event]
  kvm:kvm_avic_kick_vcpu_slowpath                    [Tracepoint event]
  kvm:kvm_avic_unaccelerated_access                  [Tracepoint event]
  kvm:kvm_cpuid                                      [Tracepoint event]
  kvm:kvm_cr                                         [Tracepoint event]
  kvm:kvm_dirty_ring_exit                            [Tracepoint event]
  kvm:kvm_dirty_ring_push                            [Tracepoint event]
  kvm:kvm_dirty_ring_reset                           [Tracepoint event]
  kvm:kvm_emulate_insn                               [Tracepoint event]
  kvm:kvm_entry                                      [Tracepoint event]
  kvm:kvm_eoi                                        [Tracepoint event]
  kvm:kvm_exit                                       [Tracepoint event]
  kvm:kvm_fast_mmio                                  [Tracepoint event]
  kvm:kvm_fpu                                        [Tracepoint event]
  kvm:kvm_halt_poll_ns                               [Tracepoint event]
  kvm:kvm_hv_flush_tlb                               [Tracepoint event]
  kvm:kvm_hv_flush_tlb_ex                            [Tracepoint event]
  kvm:kvm_hv_hypercall                               [Tracepoint event]
  kvm:kvm_hv_hypercall_done                          [Tracepoint event]
  kvm:kvm_hv_notify_acked_sint                       [Tracepoint event]
  kvm:kvm_hv_send_ipi                                [Tracepoint event]
  kvm:kvm_hv_send_ipi_ex                             [Tracepoint event]
  kvm:kvm_hv_stimer_callback                         [Tracepoint event]
  kvm:kvm_hv_stimer_cleanup                          [Tracepoint event]
  kvm:kvm_hv_stimer_expiration                       [Tracepoint event]
  kvm:kvm_hv_stimer_set_config                       [Tracepoint event]
  kvm:kvm_hv_stimer_set_count                        [Tracepoint event]
  kvm:kvm_hv_stimer_start_one_shot                   [Tracepoint event]
  kvm:kvm_hv_stimer_start_periodic                   [Tracepoint event]
  kvm:kvm_hv_syndbg_get_msr                          [Tracepoint event]
  kvm:kvm_hv_syndbg_set_msr                          [Tracepoint event]
  kvm:kvm_hv_synic_send_eoi                          [Tracepoint event]
  kvm:kvm_hv_synic_set_irq                           [Tracepoint event]
  kvm:kvm_hv_synic_set_msr                           [Tracepoint event]
  kvm:kvm_hv_timer_state                             [Tracepoint event]
  kvm:kvm_hypercall                                  [Tracepoint event]
  kvm:kvm_inj_exception                              [Tracepoint event]
  kvm:kvm_inj_virq                                   [Tracepoint event]
  kvm:kvm_invlpga                                    [Tracepoint event]
  kvm:kvm_ioapic_delayed_eoi_inj                     [Tracepoint event]
  kvm:kvm_ioapic_set_irq                             [Tracepoint event]
  kvm:kvm_mmio                                       [Tracepoint event]
  kvm:kvm_msi_set_irq                                [Tracepoint event]
  kvm:kvm_msr                                        [Tracepoint event]
  kvm:kvm_nested_intercepts                          [Tracepoint event]
  kvm:kvm_nested_intr_vmexit                         [Tracepoint event]
  kvm:kvm_nested_vmenter                             [Tracepoint event]
  kvm:kvm_nested_vmenter_failed                      [Tracepoint event]
  kvm:kvm_nested_vmexit                              [Tracepoint event]
  kvm:kvm_nested_vmexit_inject                       [Tracepoint event]
  kvm:kvm_page_fault                                 [Tracepoint event]
  kvm:kvm_pi_irte_update                             [Tracepoint event]
  kvm:kvm_pic_set_irq                                [Tracepoint event]
  kvm:kvm_pio                                        [Tracepoint event]
  kvm:kvm_ple_window_update                          [Tracepoint event]
  kvm:kvm_pml_full                                   [Tracepoint event]
  kvm:kvm_pv_eoi                                     [Tracepoint event]
  kvm:kvm_pv_tlb_flush                               [Tracepoint event]
  kvm:kvm_pvclock_update                             [Tracepoint event]
  kvm:kvm_set_irq                                    [Tracepoint event]
  kvm:kvm_set_spte_hva                               [Tracepoint event]
  kvm:kvm_skinit                                     [Tracepoint event]
  kvm:kvm_smm_transition                             [Tracepoint event]
  kvm:kvm_test_age_hva                               [Tracepoint event]
  kvm:kvm_track_tsc                                  [Tracepoint event]
  kvm:kvm_try_async_get_page                         [Tracepoint event]
  kvm:kvm_unmap_hva_range                            [Tracepoint event]
  kvm:kvm_update_master_clock                        [Tracepoint event]
  kvm:kvm_userspace_exit                             [Tracepoint event]
  kvm:kvm_vcpu_wakeup                                [Tracepoint event]
  kvm:kvm_vmgexit_enter                              [Tracepoint event]
  kvm:kvm_vmgexit_exit                               [Tracepoint event]
  kvm:kvm_vmgexit_msr_protocol_enter                 [Tracepoint event]
  kvm:kvm_vmgexit_msr_protocol_exit                  [Tracepoint event]
  kvm:kvm_wait_lapic_expire                          [Tracepoint event]
  kvm:kvm_write_tsc_offset                           [Tracepoint event]
  kvm:kvm_xen_hypercall                              [Tracepoint event]
  kvm:vcpu_match_mmio                                [Tracepoint event]
  kvmmmu:check_mmio_spte                             [Tracepoint event]
  kvmmmu:fast_page_fault                             [Tracepoint event]
  kvmmmu:handle_mmio_page_fault                      [Tracepoint event]
  kvmmmu:kvm_mmu_get_page                            [Tracepoint event]
  kvmmmu:kvm_mmu_pagetable_walk                      [Tracepoint event]
  kvmmmu:kvm_mmu_paging_element                      [Tracepoint event]
  kvmmmu:kvm_mmu_prepare_zap_page                    [Tracepoint event]
  kvmmmu:kvm_mmu_set_accessed_bit                    [Tracepoint event]
  kvmmmu:kvm_mmu_set_dirty_bit                       [Tracepoint event]
  kvmmmu:kvm_mmu_set_spte                            [Tracepoint event]
  kvmmmu:kvm_mmu_split_huge_page                     [Tracepoint event]
  kvmmmu:kvm_mmu_spte_requested                      [Tracepoint event]
  kvmmmu:kvm_mmu_sync_page                           [Tracepoint event]
  kvmmmu:kvm_mmu_unsync_page                         [Tracepoint event]
  kvmmmu:kvm_mmu_walker_error                        [Tracepoint event]
  kvmmmu:kvm_mmu_zap_all_fast                        [Tracepoint event]
  kvmmmu:kvm_tdp_mmu_spte_changed                    [Tracepoint event]
  kvmmmu:mark_mmio_spte                              [Tracepoint event]
  kyber:kyber_adjust                                 [Tracepoint event]
  kyber:kyber_latency                                [Tracepoint event]
  kyber:kyber_throttled                              [Tracepoint event]
  libata:ata_bmdma_setup                             [Tracepoint event]
  libata:ata_bmdma_start                             [Tracepoint event]
  libata:ata_bmdma_status                            [Tracepoint event]
  libata:ata_bmdma_stop                              [Tracepoint event]
  libata:ata_eh_about_to_do                          [Tracepoint event]
  libata:ata_eh_done                                 [Tracepoint event]
  libata:ata_eh_link_autopsy                         [Tracepoint event]
  libata:ata_eh_link_autopsy_qc                      [Tracepoint event]
  libata:ata_exec_command                            [Tracepoint event]
  libata:ata_link_hardreset_begin                    [Tracepoint event]
  libata:ata_link_hardreset_end                      [Tracepoint event]
  libata:ata_link_postreset                          [Tracepoint event]
  libata:ata_link_softreset_begin                    [Tracepoint event]
  libata:ata_link_softreset_end                      [Tracepoint event]
  libata:ata_port_freeze                             [Tracepoint event]
  libata:ata_port_thaw                               [Tracepoint event]
  libata:ata_qc_complete_done                        [Tracepoint event]
  libata:ata_qc_complete_failed                      [Tracepoint event]
  libata:ata_qc_complete_internal                    [Tracepoint event]
  libata:ata_qc_issue                                [Tracepoint event]
  libata:ata_qc_prep                                 [Tracepoint event]
  libata:ata_sff_flush_pio_task                      [Tracepoint event]
  libata:ata_sff_hsm_command_complete                [Tracepoint event]
  libata:ata_sff_hsm_state                           [Tracepoint event]
  libata:ata_sff_pio_transfer_data                   [Tracepoint event]
  libata:ata_sff_port_intr                           [Tracepoint event]
  libata:ata_slave_hardreset_begin                   [Tracepoint event]
  libata:ata_slave_hardreset_end                     [Tracepoint event]
  libata:ata_slave_postreset                         [Tracepoint event]
  libata:ata_std_sched_eh                            [Tracepoint event]
  libata:ata_tf_load                                 [Tracepoint event]
  libata:atapi_pio_transfer_data                     [Tracepoint event]
  libata:atapi_send_cdb                              [Tracepoint event]
  lock:contention_begin                              [Tracepoint event]
  lock:contention_end                                [Tracepoint event]
  maple_tree:ma_op                                   [Tracepoint event]
  maple_tree:ma_read                                 [Tracepoint event]
  maple_tree:ma_write                                [Tracepoint event]
  mce:mce_record                                     [Tracepoint event]
  mdio:mdio_access                                   [Tracepoint event]
  mei:mei_pci_cfg_read                               [Tracepoint event]
  mei:mei_reg_read                                   [Tracepoint event]
  mei:mei_reg_write                                  [Tracepoint event]
  migrate:mm_migrate_pages                           [Tracepoint event]
  migrate:mm_migrate_pages_start                     [Tracepoint event]
  migrate:remove_migration_pte                       [Tracepoint event]
  migrate:set_migration_pte                          [Tracepoint event]
  mmap:exit_mmap                                     [Tracepoint event]
  mmap:vm_unmapped_area                              [Tracepoint event]
  mmap:vma_mas_szero                                 [Tracepoint event]
  mmap:vma_store                                     [Tracepoint event]
  mmap_lock:mmap_lock_acquire_returned               [Tracepoint event]
  mmap_lock:mmap_lock_released                       [Tracepoint event]
  mmap_lock:mmap_lock_start_locking                  [Tracepoint event]
  module:module_free                                 [Tracepoint event]
  module:module_get                                  [Tracepoint event]
  module:module_load                                 [Tracepoint event]
  module:module_put                                  [Tracepoint event]
  module:module_request                              [Tracepoint event]
  mptcp:ack_update_msk                               [Tracepoint event]
  mptcp:get_mapping_status                           [Tracepoint event]
  mptcp:mptcp_sendmsg_frag                           [Tracepoint event]
  mptcp:mptcp_subflow_get_send                       [Tracepoint event]
  mptcp:subflow_check_data_avail                     [Tracepoint event]
  msr:rdpmc                                          [Tracepoint event]
  msr:read_msr                                       [Tracepoint event]
  msr:write_msr                                      [Tracepoint event]
  napi:napi_poll                                     [Tracepoint event]
  neigh:neigh_cleanup_and_release                    [Tracepoint event]
  neigh:neigh_create                                 [Tracepoint event]
  neigh:neigh_event_send_dead                        [Tracepoint event]
  neigh:neigh_event_send_done                        [Tracepoint event]
  neigh:neigh_timer_handler                          [Tracepoint event]
  neigh:neigh_update                                 [Tracepoint event]
  neigh:neigh_update_done                            [Tracepoint event]
  net:napi_gro_frags_entry                           [Tracepoint event]
  net:napi_gro_frags_exit                            [Tracepoint event]
  net:napi_gro_receive_entry                         [Tracepoint event]
  net:napi_gro_receive_exit                          [Tracepoint event]
  net:net_dev_queue                                  [Tracepoint event]
  net:net_dev_start_xmit                             [Tracepoint event]
  net:net_dev_xmit                                   [Tracepoint event]
  net:net_dev_xmit_timeout                           [Tracepoint event]
  net:netif_receive_skb                              [Tracepoint event]
  net:netif_receive_skb_entry                        [Tracepoint event]
  net:netif_receive_skb_exit                         [Tracepoint event]
  net:netif_receive_skb_list_entry                   [Tracepoint event]
  net:netif_receive_skb_list_exit                    [Tracepoint event]
  net:netif_rx                                       [Tracepoint event]
  net:netif_rx_entry                                 [Tracepoint event]
  net:netif_rx_exit                                  [Tracepoint event]
  netlink:netlink_extack                             [Tracepoint event]
  nmi:nmi_handler                                    [Tracepoint event]
  notifier:notifier_register                         [Tracepoint event]
  notifier:notifier_run                              [Tracepoint event]
  notifier:notifier_unregister                       [Tracepoint event]
  oom:compact_retry                                  [Tracepoint event]
  oom:finish_task_reaping                            [Tracepoint event]
  oom:mark_victim                                    [Tracepoint event]
  oom:oom_score_adj_update                           [Tracepoint event]
  oom:reclaim_retry_zone                             [Tracepoint event]
  oom:skip_task_reaping                              [Tracepoint event]
  oom:start_task_reaping                             [Tracepoint event]
  oom:wake_reaper                                    [Tracepoint event]
  page_isolation:test_pages_isolated                 [Tracepoint event]
  page_pool:page_pool_release                        [Tracepoint event]
  page_pool:page_pool_state_hold                     [Tracepoint event]
  page_pool:page_pool_state_release                  [Tracepoint event]
  page_pool:page_pool_update_nid                     [Tracepoint event]
  pagemap:mm_lru_activate                            [Tracepoint event]
  pagemap:mm_lru_insertion                           [Tracepoint event]
  percpu:percpu_alloc_percpu                         [Tracepoint event]
  percpu:percpu_alloc_percpu_fail                    [Tracepoint event]
  percpu:percpu_create_chunk                         [Tracepoint event]
  percpu:percpu_destroy_chunk                        [Tracepoint event]
  percpu:percpu_free_percpu                          [Tracepoint event]
  power:clock_disable                                [Tracepoint event]
  power:clock_enable                                 [Tracepoint event]
  power:clock_set_rate                               [Tracepoint event]
  power:cpu_frequency                                [Tracepoint event]
  power:cpu_frequency_limits                         [Tracepoint event]
  power:cpu_idle                                     [Tracepoint event]
  power:cpu_idle_miss                                [Tracepoint event]
  power:dev_pm_qos_add_request                       [Tracepoint event]
  power:dev_pm_qos_remove_request                    [Tracepoint event]
  power:dev_pm_qos_update_request                    [Tracepoint event]
  power:device_pm_callback_end                       [Tracepoint event]
  power:device_pm_callback_start                     [Tracepoint event]
  power:guest_halt_poll_ns                           [Tracepoint event]
  power:pm_qos_add_request                           [Tracepoint event]
  power:pm_qos_remove_request                        [Tracepoint event]
  power:pm_qos_update_flags                          [Tracepoint event]
  power:pm_qos_update_request                        [Tracepoint event]
  power:pm_qos_update_target                         [Tracepoint event]
  power:power_domain_target                          [Tracepoint event]
  power:powernv_throttle                             [Tracepoint event]
  power:pstate_sample                                [Tracepoint event]
  power:suspend_resume                               [Tracepoint event]
  power:wakeup_source_activate                       [Tracepoint event]
  power:wakeup_source_deactivate                     [Tracepoint event]
  printk:console                                     [Tracepoint event]
  qdisc:qdisc_create                                 [Tracepoint event]
  qdisc:qdisc_dequeue                                [Tracepoint event]
  qdisc:qdisc_destroy                                [Tracepoint event]
  qdisc:qdisc_enqueue                                [Tracepoint event]
  qdisc:qdisc_reset                                  [Tracepoint event]
  ras:aer_event                                      [Tracepoint event]
  ras:arm_event                                      [Tracepoint event]
  ras:mc_event                                       [Tracepoint event]
  ras:memory_failure_event                           [Tracepoint event]
  ras:non_standard_event                             [Tracepoint event]
  raw_syscalls:sys_enter                             [Tracepoint event]
  raw_syscalls:sys_exit                              [Tracepoint event]
  rcu:rcu_stall_warning                              [Tracepoint event]
  rcu:rcu_utilization                                [Tracepoint event]
  regmap:regcache_drop_region                        [Tracepoint event]
  regmap:regcache_sync                               [Tracepoint event]
  regmap:regmap_async_complete_done                  [Tracepoint event]
  regmap:regmap_async_complete_start                 [Tracepoint event]
  regmap:regmap_async_io_complete                    [Tracepoint event]
  regmap:regmap_async_write_start                    [Tracepoint event]
  regmap:regmap_bulk_read                            [Tracepoint event]
  regmap:regmap_bulk_write                           [Tracepoint event]
  regmap:regmap_cache_bypass                         [Tracepoint event]
  regmap:regmap_cache_only                           [Tracepoint event]
  regmap:regmap_hw_read_done                         [Tracepoint event]
  regmap:regmap_hw_read_start                        [Tracepoint event]
  regmap:regmap_hw_write_done                        [Tracepoint event]
  regmap:regmap_hw_write_start                       [Tracepoint event]
  regmap:regmap_reg_read                             [Tracepoint event]
  regmap:regmap_reg_read_cache                       [Tracepoint event]
  regmap:regmap_reg_write                            [Tracepoint event]
  regulator:regulator_bypass_disable                 [Tracepoint event]
  regulator:regulator_bypass_disable_complete        [Tracepoint event]
  regulator:regulator_bypass_enable                  [Tracepoint event]
  regulator:regulator_bypass_enable_complete         [Tracepoint event]
  regulator:regulator_disable                        [Tracepoint event]
  regulator:regulator_disable_complete               [Tracepoint event]
  regulator:regulator_enable                         [Tracepoint event]
  regulator:regulator_enable_complete                [Tracepoint event]
  regulator:regulator_enable_delay                   [Tracepoint event]
  regulator:regulator_set_voltage                    [Tracepoint event]
  regulator:regulator_set_voltage_complete           [Tracepoint event]
  rpm:rpm_idle                                       [Tracepoint event]
  rpm:rpm_resume                                     [Tracepoint event]
  rpm:rpm_return_int                                 [Tracepoint event]
  rpm:rpm_suspend                                    [Tracepoint event]
  rpm:rpm_usage                                      [Tracepoint event]
  rseq:rseq_ip_fixup                                 [Tracepoint event]
  rseq:rseq_update                                   [Tracepoint event]
  rtc:rtc_alarm_irq_enable                           [Tracepoint event]
  rtc:rtc_irq_set_freq                               [Tracepoint event]
  rtc:rtc_irq_set_state                              [Tracepoint event]
  rtc:rtc_read_alarm                                 [Tracepoint event]
  rtc:rtc_read_offset                                [Tracepoint event]
  rtc:rtc_read_time                                  [Tracepoint event]
  rtc:rtc_set_alarm                                  [Tracepoint event]
  rtc:rtc_set_offset                                 [Tracepoint event]
  rtc:rtc_set_time                                   [Tracepoint event]
  rtc:rtc_timer_dequeue                              [Tracepoint event]
  rtc:rtc_timer_enqueue                              [Tracepoint event]
  rtc:rtc_timer_fired                                [Tracepoint event]
  sched:sched_kthread_stop                           [Tracepoint event]
  sched:sched_kthread_stop_ret                       [Tracepoint event]
  sched:sched_kthread_work_execute_end               [Tracepoint event]
  sched:sched_kthread_work_execute_start             [Tracepoint event]
  sched:sched_kthread_work_queue_work                [Tracepoint event]
  sched:sched_migrate_task                           [Tracepoint event]
  sched:sched_move_numa                              [Tracepoint event]
  sched:sched_pi_setprio                             [Tracepoint event]
  sched:sched_process_exec                           [Tracepoint event]
  sched:sched_process_exit                           [Tracepoint event]
  sched:sched_process_fork                           [Tracepoint event]
  sched:sched_process_free                           [Tracepoint event]
  sched:sched_process_hang                           [Tracepoint event]
  sched:sched_process_wait                           [Tracepoint event]
  sched:sched_stat_blocked                           [Tracepoint event]
  sched:sched_stat_iowait                            [Tracepoint event]
  sched:sched_stat_runtime                           [Tracepoint event]
  sched:sched_stat_sleep                             [Tracepoint event]
  sched:sched_stat_wait                              [Tracepoint event]
  sched:sched_stick_numa                             [Tracepoint event]
  sched:sched_swap_numa                              [Tracepoint event]
  sched:sched_switch                                 [Tracepoint event]
  sched:sched_wait_task                              [Tracepoint event]
  sched:sched_wake_idle_without_ipi                  [Tracepoint event]
  sched:sched_wakeup                                 [Tracepoint event]
  sched:sched_wakeup_new                             [Tracepoint event]
  sched:sched_waking                                 [Tracepoint event]
  scsi:scsi_dispatch_cmd_done                        [Tracepoint event]
  scsi:scsi_dispatch_cmd_error                       [Tracepoint event]
  scsi:scsi_dispatch_cmd_start                       [Tracepoint event]
  scsi:scsi_dispatch_cmd_timeout                     [Tracepoint event]
  scsi:scsi_eh_wakeup                                [Tracepoint event]
  sd:scsi_prepare_zone_append                        [Tracepoint event]
  sd:scsi_zone_wp_update                             [Tracepoint event]
  signal:signal_deliver                              [Tracepoint event]
  signal:signal_generate                             [Tracepoint event]
  skb:consume_skb                                    [Tracepoint event]
  skb:kfree_skb                                      [Tracepoint event]
  skb:skb_copy_datagram_iovec                        [Tracepoint event]
  smbus:smbus_read                                   [Tracepoint event]
  smbus:smbus_reply                                  [Tracepoint event]
  smbus:smbus_result                                 [Tracepoint event]
  smbus:smbus_write                                  [Tracepoint event]
  sock:inet_sk_error_report                          [Tracepoint event]
  sock:inet_sock_set_state                           [Tracepoint event]
  sock:sk_data_ready                                 [Tracepoint event]
  sock:sock_exceed_buf_limit                         [Tracepoint event]
  sock:sock_rcvqueue_full                            [Tracepoint event]
  sock:sock_recv_length                              [Tracepoint event]
  sock:sock_send_length                              [Tracepoint event]
  spi:spi_controller_busy                            [Tracepoint event]
  spi:spi_controller_idle                            [Tracepoint event]
  spi:spi_message_done                               [Tracepoint event]
  spi:spi_message_start                              [Tracepoint event]
  spi:spi_message_submit                             [Tracepoint event]
  spi:spi_set_cs                                     [Tracepoint event]
  spi:spi_setup                                      [Tracepoint event]
  spi:spi_transfer_start                             [Tracepoint event]
  spi:spi_transfer_stop                              [Tracepoint event]
  sunrpc:cache_entry_expired                         [Tracepoint event]
  sunrpc:cache_entry_make_negative                   [Tracepoint event]
  sunrpc:cache_entry_no_listener                     [Tracepoint event]
  sunrpc:cache_entry_upcall                          [Tracepoint event]
  sunrpc:cache_entry_update                          [Tracepoint event]
  sunrpc:pmap_register                               [Tracepoint event]
  sunrpc:rpc__auth_tooweak                           [Tracepoint event]
  sunrpc:rpc__bad_creds                              [Tracepoint event]
  sunrpc:rpc__garbage_args                           [Tracepoint event]
  sunrpc:rpc__mismatch                               [Tracepoint event]
  sunrpc:rpc__proc_unavail                           [Tracepoint event]
  sunrpc:rpc__prog_mismatch                          [Tracepoint event]
  sunrpc:rpc__prog_unavail                           [Tracepoint event]
  sunrpc:rpc__stale_creds                            [Tracepoint event]
  sunrpc:rpc__unparsable                             [Tracepoint event]
  sunrpc:rpc_bad_callhdr                             [Tracepoint event]
  sunrpc:rpc_bad_verifier                            [Tracepoint event]
  sunrpc:rpc_buf_alloc                               [Tracepoint event]
  sunrpc:rpc_call_rpcerror                           [Tracepoint event]
  sunrpc:rpc_call_status                             [Tracepoint event]
  sunrpc:rpc_clnt_clone_err                          [Tracepoint event]
  sunrpc:rpc_clnt_free                               [Tracepoint event]
  sunrpc:rpc_clnt_killall                            [Tracepoint event]
  sunrpc:rpc_clnt_new                                [Tracepoint event]
  sunrpc:rpc_clnt_new_err                            [Tracepoint event]
  sunrpc:rpc_clnt_release                            [Tracepoint event]
  sunrpc:rpc_clnt_replace_xprt                       [Tracepoint event]
  sunrpc:rpc_clnt_replace_xprt_err                   [Tracepoint event]
  sunrpc:rpc_clnt_shutdown                           [Tracepoint event]
  sunrpc:rpc_connect_status                          [Tracepoint event]
  sunrpc:rpc_refresh_status                          [Tracepoint event]
  sunrpc:rpc_request                                 [Tracepoint event]
  sunrpc:rpc_retry_refresh_status                    [Tracepoint event]
  sunrpc:rpc_socket_close                            [Tracepoint event]
  sunrpc:rpc_socket_connect                          [Tracepoint event]
  sunrpc:rpc_socket_error                            [Tracepoint event]
  sunrpc:rpc_socket_nospace                          [Tracepoint event]
  sunrpc:rpc_socket_reset_connection                 [Tracepoint event]
  sunrpc:rpc_socket_shutdown                         [Tracepoint event]
  sunrpc:rpc_socket_state_change                     [Tracepoint event]
  sunrpc:rpc_stats_latency                           [Tracepoint event]
  sunrpc:rpc_task_begin                              [Tracepoint event]
  sunrpc:rpc_task_call_done                          [Tracepoint event]
  sunrpc:rpc_task_complete                           [Tracepoint event]
  sunrpc:rpc_task_end                                [Tracepoint event]
  sunrpc:rpc_task_run_action                         [Tracepoint event]
  sunrpc:rpc_task_signalled                          [Tracepoint event]
  sunrpc:rpc_task_sleep                              [Tracepoint event]
  sunrpc:rpc_task_sync_sleep                         [Tracepoint event]
  sunrpc:rpc_task_sync_wake                          [Tracepoint event]
  sunrpc:rpc_task_timeout                            [Tracepoint event]
  sunrpc:rpc_task_wakeup                             [Tracepoint event]
  sunrpc:rpc_timeout_status                          [Tracepoint event]
  sunrpc:rpc_xdr_alignment                           [Tracepoint event]
  sunrpc:rpc_xdr_overflow                            [Tracepoint event]
  sunrpc:rpc_xdr_recvfrom                            [Tracepoint event]
  sunrpc:rpc_xdr_reply_pages                         [Tracepoint event]
  sunrpc:rpc_xdr_sendto                              [Tracepoint event]
  sunrpc:rpcb_bind_version_err                       [Tracepoint event]
  sunrpc:rpcb_getport                                [Tracepoint event]
  sunrpc:rpcb_prog_unavail_err                       [Tracepoint event]
  sunrpc:rpcb_register                               [Tracepoint event]
  sunrpc:rpcb_setport                                [Tracepoint event]
  sunrpc:rpcb_timeout_err                            [Tracepoint event]
  sunrpc:rpcb_unreachable_err                        [Tracepoint event]
  sunrpc:rpcb_unrecognized_err                       [Tracepoint event]
  sunrpc:rpcb_unregister                             [Tracepoint event]
  sunrpc:svc_alloc_arg_err                           [Tracepoint event]
  sunrpc:svc_authenticate                            [Tracepoint event]
  sunrpc:svc_defer                                   [Tracepoint event]
  sunrpc:svc_defer_drop                              [Tracepoint event]
  sunrpc:svc_defer_queue                             [Tracepoint event]
  sunrpc:svc_defer_recv                              [Tracepoint event]
  sunrpc:svc_drop                                    [Tracepoint event]
  sunrpc:svc_noregister                              [Tracepoint event]
  sunrpc:svc_process                                 [Tracepoint event]
  sunrpc:svc_register                                [Tracepoint event]
  sunrpc:svc_replace_page_err                        [Tracepoint event]
  sunrpc:svc_send                                    [Tracepoint event]
  sunrpc:svc_stats_latency                           [Tracepoint event]
  sunrpc:svc_tls_not_started                         [Tracepoint event]
  sunrpc:svc_tls_start                               [Tracepoint event]
  sunrpc:svc_tls_timed_out                           [Tracepoint event]
  sunrpc:svc_tls_unavailable                         [Tracepoint event]
  sunrpc:svc_tls_upcall                              [Tracepoint event]
  sunrpc:svc_unregister                              [Tracepoint event]
  sunrpc:svc_wake_up                                 [Tracepoint event]
  sunrpc:svc_xdr_recvfrom                            [Tracepoint event]
  sunrpc:svc_xdr_sendto                              [Tracepoint event]
  sunrpc:svc_xprt_accept                             [Tracepoint event]
  sunrpc:svc_xprt_close                              [Tracepoint event]
  sunrpc:svc_xprt_create_err                         [Tracepoint event]
  sunrpc:svc_xprt_dequeue                            [Tracepoint event]
  sunrpc:svc_xprt_detach                             [Tracepoint event]
  sunrpc:svc_xprt_enqueue                            [Tracepoint event]
  sunrpc:svc_xprt_free                               [Tracepoint event]
  sunrpc:svc_xprt_no_write_space                     [Tracepoint event]
  sunrpc:svcsock_accept_err                          [Tracepoint event]
  sunrpc:svcsock_data_ready                          [Tracepoint event]
  sunrpc:svcsock_getpeername_err                     [Tracepoint event]
  sunrpc:svcsock_marker                              [Tracepoint event]
  sunrpc:svcsock_new_socket                          [Tracepoint event]
  sunrpc:svcsock_tcp_recv                            [Tracepoint event]
  sunrpc:svcsock_tcp_recv_eagain                     [Tracepoint event]
  sunrpc:svcsock_tcp_recv_err                        [Tracepoint event]
  sunrpc:svcsock_tcp_recv_short                      [Tracepoint event]
  sunrpc:svcsock_tcp_send                            [Tracepoint event]
  sunrpc:svcsock_tcp_state                           [Tracepoint event]
  sunrpc:svcsock_udp_recv                            [Tracepoint event]
  sunrpc:svcsock_udp_recv_err                        [Tracepoint event]
  sunrpc:svcsock_udp_send                            [Tracepoint event]
  sunrpc:svcsock_write_space                         [Tracepoint event]
  sunrpc:xprt_connect                                [Tracepoint event]
  sunrpc:xprt_create                                 [Tracepoint event]
  sunrpc:xprt_destroy                                [Tracepoint event]
  sunrpc:xprt_disconnect_auto                        [Tracepoint event]
  sunrpc:xprt_disconnect_done                        [Tracepoint event]
  sunrpc:xprt_disconnect_force                       [Tracepoint event]
  sunrpc:xprt_get_cong                               [Tracepoint event]
  sunrpc:xprt_lookup_rqst                            [Tracepoint event]
  sunrpc:xprt_ping                                   [Tracepoint event]
  sunrpc:xprt_put_cong                               [Tracepoint event]
  sunrpc:xprt_release_cong                           [Tracepoint event]
  sunrpc:xprt_release_xprt                           [Tracepoint event]
  sunrpc:xprt_reserve                                [Tracepoint event]
  sunrpc:xprt_reserve_cong                           [Tracepoint event]
  sunrpc:xprt_reserve_xprt                           [Tracepoint event]
  sunrpc:xprt_retransmit                             [Tracepoint event]
  sunrpc:xprt_timer                                  [Tracepoint event]
  sunrpc:xprt_transmit                               [Tracepoint event]
  sunrpc:xs_data_ready                               [Tracepoint event]
  sunrpc:xs_stream_read_data                         [Tracepoint event]
  sunrpc:xs_stream_read_request                      [Tracepoint event]
  swiotlb:swiotlb_bounced                            [Tracepoint event]
  syscalls:sys_enter_accept                          [Tracepoint event]
  syscalls:sys_enter_accept4                         [Tracepoint event]
  syscalls:sys_enter_access                          [Tracepoint event]
  syscalls:sys_enter_acct                            [Tracepoint event]
  syscalls:sys_enter_add_key                         [Tracepoint event]
  syscalls:sys_enter_adjtimex                        [Tracepoint event]
  syscalls:sys_enter_alarm                           [Tracepoint event]
  syscalls:sys_enter_arch_prctl                      [Tracepoint event]
  syscalls:sys_enter_bind                            [Tracepoint event]
  syscalls:sys_enter_bpf                             [Tracepoint event]
  syscalls:sys_enter_brk                             [Tracepoint event]
  syscalls:sys_enter_capget                          [Tracepoint event]
  syscalls:sys_enter_capset                          [Tracepoint event]
  syscalls:sys_enter_chdir                           [Tracepoint event]
  syscalls:sys_enter_chmod                           [Tracepoint event]
  syscalls:sys_enter_chown                           [Tracepoint event]
  syscalls:sys_enter_chroot                          [Tracepoint event]
  syscalls:sys_enter_clock_adjtime                   [Tracepoint event]
  syscalls:sys_enter_clock_getres                    [Tracepoint event]
  syscalls:sys_enter_clock_gettime                   [Tracepoint event]
  syscalls:sys_enter_clock_nanosleep                 [Tracepoint event]
  syscalls:sys_enter_clock_settime                   [Tracepoint event]
  syscalls:sys_enter_clone                           [Tracepoint event]
  syscalls:sys_enter_clone3                          [Tracepoint event]
  syscalls:sys_enter_close                           [Tracepoint event]
  syscalls:sys_enter_close_range                     [Tracepoint event]
  syscalls:sys_enter_connect                         [Tracepoint event]
  syscalls:sys_enter_copy_file_range                 [Tracepoint event]
  syscalls:sys_enter_creat                           [Tracepoint event]
  syscalls:sys_enter_delete_module                   [Tracepoint event]
  syscalls:sys_enter_dup                             [Tracepoint event]
  syscalls:sys_enter_dup2                            [Tracepoint event]
  syscalls:sys_enter_dup3                            [Tracepoint event]
  syscalls:sys_enter_epoll_create                    [Tracepoint event]
  syscalls:sys_enter_epoll_create1                   [Tracepoint event]
  syscalls:sys_enter_epoll_ctl                       [Tracepoint event]
  syscalls:sys_enter_epoll_pwait                     [Tracepoint event]
  syscalls:sys_enter_epoll_pwait2                    [Tracepoint event]
  syscalls:sys_enter_epoll_wait                      [Tracepoint event]
  syscalls:sys_enter_eventfd                         [Tracepoint event]
  syscalls:sys_enter_eventfd2                        [Tracepoint event]
  syscalls:sys_enter_execve                          [Tracepoint event]
  syscalls:sys_enter_execveat                        [Tracepoint event]
  syscalls:sys_enter_exit                            [Tracepoint event]
  syscalls:sys_enter_exit_group                      [Tracepoint event]
  syscalls:sys_enter_faccessat                       [Tracepoint event]
  syscalls:sys_enter_faccessat2                      [Tracepoint event]
  syscalls:sys_enter_fadvise64                       [Tracepoint event]
  syscalls:sys_enter_fallocate                       [Tracepoint event]
  syscalls:sys_enter_fanotify_init                   [Tracepoint event]
  syscalls:sys_enter_fanotify_mark                   [Tracepoint event]
  syscalls:sys_enter_fchdir                          [Tracepoint event]
  syscalls:sys_enter_fchmod                          [Tracepoint event]
  syscalls:sys_enter_fchmodat                        [Tracepoint event]
  syscalls:sys_enter_fchown                          [Tracepoint event]
  syscalls:sys_enter_fchownat                        [Tracepoint event]
  syscalls:sys_enter_fcntl                           [Tracepoint event]
  syscalls:sys_enter_fdatasync                       [Tracepoint event]
  syscalls:sys_enter_fgetxattr                       [Tracepoint event]
  syscalls:sys_enter_finit_module                    [Tracepoint event]
  syscalls:sys_enter_flistxattr                      [Tracepoint event]
  syscalls:sys_enter_flock                           [Tracepoint event]
  syscalls:sys_enter_fork                            [Tracepoint event]
  syscalls:sys_enter_fremovexattr                    [Tracepoint event]
  syscalls:sys_enter_fsconfig                        [Tracepoint event]
  syscalls:sys_enter_fsetxattr                       [Tracepoint event]
  syscalls:sys_enter_fsmount                         [Tracepoint event]
  syscalls:sys_enter_fsopen                          [Tracepoint event]
  syscalls:sys_enter_fspick                          [Tracepoint event]
  syscalls:sys_enter_fstatfs                         [Tracepoint event]
  syscalls:sys_enter_fsync                           [Tracepoint event]
  syscalls:sys_enter_ftruncate                       [Tracepoint event]
  syscalls:sys_enter_futex                           [Tracepoint event]
  syscalls:sys_enter_futex_waitv                     [Tracepoint event]
  syscalls:sys_enter_futimesat                       [Tracepoint event]
  syscalls:sys_enter_get_mempolicy                   [Tracepoint event]
  syscalls:sys_enter_get_robust_list                 [Tracepoint event]
  syscalls:sys_enter_getcpu                          [Tracepoint event]
  syscalls:sys_enter_getcwd                          [Tracepoint event]
  syscalls:sys_enter_getdents                        [Tracepoint event]
  syscalls:sys_enter_getdents64                      [Tracepoint event]
  syscalls:sys_enter_getegid                         [Tracepoint event]
  syscalls:sys_enter_geteuid                         [Tracepoint event]
  syscalls:sys_enter_getgid                          [Tracepoint event]
  syscalls:sys_enter_getgroups                       [Tracepoint event]
  syscalls:sys_enter_getitimer                       [Tracepoint event]
  syscalls:sys_enter_getpeername                     [Tracepoint event]
  syscalls:sys_enter_getpgid                         [Tracepoint event]
  syscalls:sys_enter_getpgrp                         [Tracepoint event]
  syscalls:sys_enter_getpid                          [Tracepoint event]
  syscalls:sys_enter_getppid                         [Tracepoint event]
  syscalls:sys_enter_getpriority                     [Tracepoint event]
  syscalls:sys_enter_getrandom                       [Tracepoint event]
  syscalls:sys_enter_getresgid                       [Tracepoint event]
  syscalls:sys_enter_getresuid                       [Tracepoint event]
  syscalls:sys_enter_getrlimit                       [Tracepoint event]
  syscalls:sys_enter_getrusage                       [Tracepoint event]
  syscalls:sys_enter_getsid                          [Tracepoint event]
  syscalls:sys_enter_getsockname                     [Tracepoint event]
  syscalls:sys_enter_getsockopt                      [Tracepoint event]
  syscalls:sys_enter_gettid                          [Tracepoint event]
  syscalls:sys_enter_gettimeofday                    [Tracepoint event]
  syscalls:sys_enter_getuid                          [Tracepoint event]
  syscalls:sys_enter_getxattr                        [Tracepoint event]
  syscalls:sys_enter_init_module                     [Tracepoint event]
  syscalls:sys_enter_inotify_add_watch               [Tracepoint event]
  syscalls:sys_enter_inotify_init                    [Tracepoint event]
  syscalls:sys_enter_inotify_init1                   [Tracepoint event]
  syscalls:sys_enter_inotify_rm_watch                [Tracepoint event]
  syscalls:sys_enter_io_cancel                       [Tracepoint event]
  syscalls:sys_enter_io_destroy                      [Tracepoint event]
  syscalls:sys_enter_io_getevents                    [Tracepoint event]
  syscalls:sys_enter_io_pgetevents                   [Tracepoint event]
  syscalls:sys_enter_io_setup                        [Tracepoint event]
  syscalls:sys_enter_io_submit                       [Tracepoint event]
  syscalls:sys_enter_io_uring_enter                  [Tracepoint event]
  syscalls:sys_enter_io_uring_register               [Tracepoint event]
  syscalls:sys_enter_io_uring_setup                  [Tracepoint event]
  syscalls:sys_enter_ioctl                           [Tracepoint event]
  syscalls:sys_enter_ioperm                          [Tracepoint event]
  syscalls:sys_enter_iopl                            [Tracepoint event]
  syscalls:sys_enter_ioprio_get                      [Tracepoint event]
  syscalls:sys_enter_ioprio_set                      [Tracepoint event]
  syscalls:sys_enter_kcmp                            [Tracepoint event]
  syscalls:sys_enter_kexec_load                      [Tracepoint event]
  syscalls:sys_enter_keyctl                          [Tracepoint event]
  syscalls:sys_enter_kill                            [Tracepoint event]
  syscalls:sys_enter_lchown                          [Tracepoint event]
  syscalls:sys_enter_lgetxattr                       [Tracepoint event]
  syscalls:sys_enter_link                            [Tracepoint event]
  syscalls:sys_enter_linkat                          [Tracepoint event]
  syscalls:sys_enter_listen                          [Tracepoint event]
  syscalls:sys_enter_listxattr                       [Tracepoint event]
  syscalls:sys_enter_llistxattr                      [Tracepoint event]
  syscalls:sys_enter_lremovexattr                    [Tracepoint event]
  syscalls:sys_enter_lseek                           [Tracepoint event]
  syscalls:sys_enter_lsetxattr                       [Tracepoint event]
  syscalls:sys_enter_madvise                         [Tracepoint event]
  syscalls:sys_enter_mbind                           [Tracepoint event]
  syscalls:sys_enter_membarrier                      [Tracepoint event]
  syscalls:sys_enter_memfd_create                    [Tracepoint event]
  syscalls:sys_enter_memfd_secret                    [Tracepoint event]
  syscalls:sys_enter_migrate_pages                   [Tracepoint event]
  syscalls:sys_enter_mincore                         [Tracepoint event]
  syscalls:sys_enter_mkdir                           [Tracepoint event]
  syscalls:sys_enter_mkdirat                         [Tracepoint event]
  syscalls:sys_enter_mknod                           [Tracepoint event]
  syscalls:sys_enter_mknodat                         [Tracepoint event]
  syscalls:sys_enter_mlock                           [Tracepoint event]
  syscalls:sys_enter_mlock2                          [Tracepoint event]
  syscalls:sys_enter_mlockall                        [Tracepoint event]
  syscalls:sys_enter_mmap                            [Tracepoint event]
  syscalls:sys_enter_modify_ldt                      [Tracepoint event]
  syscalls:sys_enter_mount                           [Tracepoint event]
  syscalls:sys_enter_mount_setattr                   [Tracepoint event]
  syscalls:sys_enter_move_mount                      [Tracepoint event]
  syscalls:sys_enter_move_pages                      [Tracepoint event]
  syscalls:sys_enter_mprotect                        [Tracepoint event]
  syscalls:sys_enter_mq_getsetattr                   [Tracepoint event]
  syscalls:sys_enter_mq_notify                       [Tracepoint event]
  syscalls:sys_enter_mq_open                         [Tracepoint event]
  syscalls:sys_enter_mq_timedreceive                 [Tracepoint event]
  syscalls:sys_enter_mq_timedsend                    [Tracepoint event]
  syscalls:sys_enter_mq_unlink                       [Tracepoint event]
  syscalls:sys_enter_mremap                          [Tracepoint event]
  syscalls:sys_enter_msgctl                          [Tracepoint event]
  syscalls:sys_enter_msgget                          [Tracepoint event]
  syscalls:sys_enter_msgrcv                          [Tracepoint event]
  syscalls:sys_enter_msgsnd                          [Tracepoint event]
  syscalls:sys_enter_msync                           [Tracepoint event]
  syscalls:sys_enter_munlock                         [Tracepoint event]
  syscalls:sys_enter_munlockall                      [Tracepoint event]
  syscalls:sys_enter_munmap                          [Tracepoint event]
  syscalls:sys_enter_name_to_handle_at               [Tracepoint event]
  syscalls:sys_enter_nanosleep                       [Tracepoint event]
  syscalls:sys_enter_newfstat                        [Tracepoint event]
  syscalls:sys_enter_newfstatat                      [Tracepoint event]
  syscalls:sys_enter_newlstat                        [Tracepoint event]
  syscalls:sys_enter_newstat                         [Tracepoint event]
  syscalls:sys_enter_newuname                        [Tracepoint event]
  syscalls:sys_enter_open                            [Tracepoint event]
  syscalls:sys_enter_open_by_handle_at               [Tracepoint event]
  syscalls:sys_enter_open_tree                       [Tracepoint event]
  syscalls:sys_enter_openat                          [Tracepoint event]
  syscalls:sys_enter_openat2                         [Tracepoint event]
  syscalls:sys_enter_pause                           [Tracepoint event]
  syscalls:sys_enter_perf_event_open                 [Tracepoint event]
  syscalls:sys_enter_personality                     [Tracepoint event]
  syscalls:sys_enter_pidfd_getfd                     [Tracepoint event]
  syscalls:sys_enter_pidfd_open                      [Tracepoint event]
  syscalls:sys_enter_pidfd_send_signal               [Tracepoint event]
  syscalls:sys_enter_pipe                            [Tracepoint event]
  syscalls:sys_enter_pipe2                           [Tracepoint event]
  syscalls:sys_enter_pivot_root                      [Tracepoint event]
  syscalls:sys_enter_pkey_alloc                      [Tracepoint event]
  syscalls:sys_enter_pkey_free                       [Tracepoint event]
  syscalls:sys_enter_pkey_mprotect                   [Tracepoint event]
  syscalls:sys_enter_poll                            [Tracepoint event]
  syscalls:sys_enter_ppoll                           [Tracepoint event]
  syscalls:sys_enter_prctl                           [Tracepoint event]
  syscalls:sys_enter_pread64                         [Tracepoint event]
  syscalls:sys_enter_preadv                          [Tracepoint event]
  syscalls:sys_enter_preadv2                         [Tracepoint event]
  syscalls:sys_enter_prlimit64                       [Tracepoint event]
  syscalls:sys_enter_process_madvise                 [Tracepoint event]
  syscalls:sys_enter_process_mrelease                [Tracepoint event]
  syscalls:sys_enter_process_vm_readv                [Tracepoint event]
  syscalls:sys_enter_process_vm_writev               [Tracepoint event]
  syscalls:sys_enter_pselect6                        [Tracepoint event]
  syscalls:sys_enter_ptrace                          [Tracepoint event]
  syscalls:sys_enter_pwrite64                        [Tracepoint event]
  syscalls:sys_enter_pwritev                         [Tracepoint event]
  syscalls:sys_enter_pwritev2                        [Tracepoint event]
  syscalls:sys_enter_quotactl                        [Tracepoint event]
  syscalls:sys_enter_quotactl_fd                     [Tracepoint event]
  syscalls:sys_enter_read                            [Tracepoint event]
  syscalls:sys_enter_readahead                       [Tracepoint event]
  syscalls:sys_enter_readlink                        [Tracepoint event]
  syscalls:sys_enter_readlinkat                      [Tracepoint event]
  syscalls:sys_enter_readv                           [Tracepoint event]
  syscalls:sys_enter_reboot                          [Tracepoint event]
  syscalls:sys_enter_recvfrom                        [Tracepoint event]
  syscalls:sys_enter_recvmmsg                        [Tracepoint event]
  syscalls:sys_enter_recvmsg                         [Tracepoint event]
  syscalls:sys_enter_remap_file_pages                [Tracepoint event]
  syscalls:sys_enter_removexattr                     [Tracepoint event]
  syscalls:sys_enter_rename                          [Tracepoint event]
  syscalls:sys_enter_renameat                        [Tracepoint event]
  syscalls:sys_enter_renameat2                       [Tracepoint event]
  syscalls:sys_enter_request_key                     [Tracepoint event]
  syscalls:sys_enter_restart_syscall                 [Tracepoint event]
  syscalls:sys_enter_rmdir                           [Tracepoint event]
  syscalls:sys_enter_rseq                            [Tracepoint event]
  syscalls:sys_enter_rt_sigaction                    [Tracepoint event]
  syscalls:sys_enter_rt_sigpending                   [Tracepoint event]
  syscalls:sys_enter_rt_sigprocmask                  [Tracepoint event]
  syscalls:sys_enter_rt_sigqueueinfo                 [Tracepoint event]
  syscalls:sys_enter_rt_sigreturn                    [Tracepoint event]
  syscalls:sys_enter_rt_sigsuspend                   [Tracepoint event]
  syscalls:sys_enter_rt_sigtimedwait                 [Tracepoint event]
  syscalls:sys_enter_rt_tgsigqueueinfo               [Tracepoint event]
  syscalls:sys_enter_sched_get_priority_max          [Tracepoint event]
  syscalls:sys_enter_sched_get_priority_min          [Tracepoint event]
  syscalls:sys_enter_sched_getaffinity               [Tracepoint event]
  syscalls:sys_enter_sched_getattr                   [Tracepoint event]
  syscalls:sys_enter_sched_getparam                  [Tracepoint event]
  syscalls:sys_enter_sched_getscheduler              [Tracepoint event]
  syscalls:sys_enter_sched_rr_get_interval           [Tracepoint event]
  syscalls:sys_enter_sched_setaffinity               [Tracepoint event]
  syscalls:sys_enter_sched_setattr                   [Tracepoint event]
  syscalls:sys_enter_sched_setparam                  [Tracepoint event]
  syscalls:sys_enter_sched_setscheduler              [Tracepoint event]
  syscalls:sys_enter_sched_yield                     [Tracepoint event]
  syscalls:sys_enter_seccomp                         [Tracepoint event]
  syscalls:sys_enter_select                          [Tracepoint event]
  syscalls:sys_enter_semctl                          [Tracepoint event]
  syscalls:sys_enter_semget                          [Tracepoint event]
  syscalls:sys_enter_semop                           [Tracepoint event]
  syscalls:sys_enter_semtimedop                      [Tracepoint event]
  syscalls:sys_enter_sendfile64                      [Tracepoint event]
  syscalls:sys_enter_sendmmsg                        [Tracepoint event]
  syscalls:sys_enter_sendmsg                         [Tracepoint event]
  syscalls:sys_enter_sendto                          [Tracepoint event]
  syscalls:sys_enter_set_mempolicy                   [Tracepoint event]
  syscalls:sys_enter_set_mempolicy_home_node         [Tracepoint event]
  syscalls:sys_enter_set_robust_list                 [Tracepoint event]
  syscalls:sys_enter_set_tid_address                 [Tracepoint event]
  syscalls:sys_enter_setdomainname                   [Tracepoint event]
  syscalls:sys_enter_setfsgid                        [Tracepoint event]
  syscalls:sys_enter_setfsuid                        [Tracepoint event]
  syscalls:sys_enter_setgid                          [Tracepoint event]
  syscalls:sys_enter_setgroups                       [Tracepoint event]
  syscalls:sys_enter_sethostname                     [Tracepoint event]
  syscalls:sys_enter_setitimer                       [Tracepoint event]
  syscalls:sys_enter_setns                           [Tracepoint event]
  syscalls:sys_enter_setpgid                         [Tracepoint event]
  syscalls:sys_enter_setpriority                     [Tracepoint event]
  syscalls:sys_enter_setregid                        [Tracepoint event]
  syscalls:sys_enter_setresgid                       [Tracepoint event]
  syscalls:sys_enter_setresuid                       [Tracepoint event]
  syscalls:sys_enter_setreuid                        [Tracepoint event]
  syscalls:sys_enter_setrlimit                       [Tracepoint event]
  syscalls:sys_enter_setsid                          [Tracepoint event]
  syscalls:sys_enter_setsockopt                      [Tracepoint event]
  syscalls:sys_enter_settimeofday                    [Tracepoint event]
  syscalls:sys_enter_setuid                          [Tracepoint event]
  syscalls:sys_enter_setxattr                        [Tracepoint event]
  syscalls:sys_enter_shmat                           [Tracepoint event]
  syscalls:sys_enter_shmctl                          [Tracepoint event]
  syscalls:sys_enter_shmdt                           [Tracepoint event]
  syscalls:sys_enter_shmget                          [Tracepoint event]
  syscalls:sys_enter_shutdown                        [Tracepoint event]
  syscalls:sys_enter_sigaltstack                     [Tracepoint event]
  syscalls:sys_enter_signalfd                        [Tracepoint event]
  syscalls:sys_enter_signalfd4                       [Tracepoint event]
  syscalls:sys_enter_socket                          [Tracepoint event]
  syscalls:sys_enter_socketpair                      [Tracepoint event]
  syscalls:sys_enter_splice                          [Tracepoint event]
  syscalls:sys_enter_statfs                          [Tracepoint event]
  syscalls:sys_enter_statx                           [Tracepoint event]
  syscalls:sys_enter_swapoff                         [Tracepoint event]
  syscalls:sys_enter_swapon                          [Tracepoint event]
  syscalls:sys_enter_symlink                         [Tracepoint event]
  syscalls:sys_enter_symlinkat                       [Tracepoint event]
  syscalls:sys_enter_sync                            [Tracepoint event]
  syscalls:sys_enter_sync_file_range                 [Tracepoint event]
  syscalls:sys_enter_syncfs                          [Tracepoint event]
  syscalls:sys_enter_sysfs                           [Tracepoint event]
  syscalls:sys_enter_sysinfo                         [Tracepoint event]
  syscalls:sys_enter_syslog                          [Tracepoint event]
  syscalls:sys_enter_tee                             [Tracepoint event]
  syscalls:sys_enter_tgkill                          [Tracepoint event]
  syscalls:sys_enter_time                            [Tracepoint event]
  syscalls:sys_enter_timer_create                    [Tracepoint event]
  syscalls:sys_enter_timer_delete                    [Tracepoint event]
  syscalls:sys_enter_timer_getoverrun                [Tracepoint event]
  syscalls:sys_enter_timer_gettime                   [Tracepoint event]
  syscalls:sys_enter_timer_settime                   [Tracepoint event]
  syscalls:sys_enter_timerfd_create                  [Tracepoint event]
  syscalls:sys_enter_timerfd_gettime                 [Tracepoint event]
  syscalls:sys_enter_timerfd_settime                 [Tracepoint event]
  syscalls:sys_enter_times                           [Tracepoint event]
  syscalls:sys_enter_tkill                           [Tracepoint event]
  syscalls:sys_enter_truncate                        [Tracepoint event]
  syscalls:sys_enter_umask                           [Tracepoint event]
  syscalls:sys_enter_umount                          [Tracepoint event]
  syscalls:sys_enter_unlink                          [Tracepoint event]
  syscalls:sys_enter_unlinkat                        [Tracepoint event]
  syscalls:sys_enter_unshare                         [Tracepoint event]
  syscalls:sys_enter_userfaultfd                     [Tracepoint event]
  syscalls:sys_enter_ustat                           [Tracepoint event]
  syscalls:sys_enter_utime                           [Tracepoint event]
  syscalls:sys_enter_utimensat                       [Tracepoint event]
  syscalls:sys_enter_utimes                          [Tracepoint event]
  syscalls:sys_enter_vfork                           [Tracepoint event]
  syscalls:sys_enter_vhangup                         [Tracepoint event]
  syscalls:sys_enter_vmsplice                        [Tracepoint event]
  syscalls:sys_enter_wait4                           [Tracepoint event]
  syscalls:sys_enter_waitid                          [Tracepoint event]
  syscalls:sys_enter_write                           [Tracepoint event]
  syscalls:sys_enter_writev                          [Tracepoint event]
  syscalls:sys_exit_accept                           [Tracepoint event]
  syscalls:sys_exit_accept4                          [Tracepoint event]
  syscalls:sys_exit_access                           [Tracepoint event]
  syscalls:sys_exit_acct                             [Tracepoint event]
  syscalls:sys_exit_add_key                          [Tracepoint event]
  syscalls:sys_exit_adjtimex                         [Tracepoint event]
  syscalls:sys_exit_alarm                            [Tracepoint event]
  syscalls:sys_exit_arch_prctl                       [Tracepoint event]
  syscalls:sys_exit_bind                             [Tracepoint event]
  syscalls:sys_exit_bpf                              [Tracepoint event]
  syscalls:sys_exit_brk                              [Tracepoint event]
  syscalls:sys_exit_capget                           [Tracepoint event]
  syscalls:sys_exit_capset                           [Tracepoint event]
  syscalls:sys_exit_chdir                            [Tracepoint event]
  syscalls:sys_exit_chmod                            [Tracepoint event]
  syscalls:sys_exit_chown                            [Tracepoint event]
  syscalls:sys_exit_chroot                           [Tracepoint event]
  syscalls:sys_exit_clock_adjtime                    [Tracepoint event]
  syscalls:sys_exit_clock_getres                     [Tracepoint event]
  syscalls:sys_exit_clock_gettime                    [Tracepoint event]
  syscalls:sys_exit_clock_nanosleep                  [Tracepoint event]
  syscalls:sys_exit_clock_settime                    [Tracepoint event]
  syscalls:sys_exit_clone                            [Tracepoint event]
  syscalls:sys_exit_clone3                           [Tracepoint event]
  syscalls:sys_exit_close                            [Tracepoint event]
  syscalls:sys_exit_close_range                      [Tracepoint event]
  syscalls:sys_exit_connect                          [Tracepoint event]
  syscalls:sys_exit_copy_file_range                  [Tracepoint event]
  syscalls:sys_exit_creat                            [Tracepoint event]
  syscalls:sys_exit_delete_module                    [Tracepoint event]
  syscalls:sys_exit_dup                              [Tracepoint event]
  syscalls:sys_exit_dup2                             [Tracepoint event]
  syscalls:sys_exit_dup3                             [Tracepoint event]
  syscalls:sys_exit_epoll_create                     [Tracepoint event]
  syscalls:sys_exit_epoll_create1                    [Tracepoint event]
  syscalls:sys_exit_epoll_ctl                        [Tracepoint event]
  syscalls:sys_exit_epoll_pwait                      [Tracepoint event]
  syscalls:sys_exit_epoll_pwait2                     [Tracepoint event]
  syscalls:sys_exit_epoll_wait                       [Tracepoint event]
  syscalls:sys_exit_eventfd                          [Tracepoint event]
  syscalls:sys_exit_eventfd2                         [Tracepoint event]
  syscalls:sys_exit_execve                           [Tracepoint event]
  syscalls:sys_exit_execveat                         [Tracepoint event]
  syscalls:sys_exit_exit                             [Tracepoint event]
  syscalls:sys_exit_exit_group                       [Tracepoint event]
  syscalls:sys_exit_faccessat                        [Tracepoint event]
  syscalls:sys_exit_faccessat2                       [Tracepoint event]
  syscalls:sys_exit_fadvise64                        [Tracepoint event]
  syscalls:sys_exit_fallocate                        [Tracepoint event]
  syscalls:sys_exit_fanotify_init                    [Tracepoint event]
  syscalls:sys_exit_fanotify_mark                    [Tracepoint event]
  syscalls:sys_exit_fchdir                           [Tracepoint event]
  syscalls:sys_exit_fchmod                           [Tracepoint event]
  syscalls:sys_exit_fchmodat                         [Tracepoint event]
  syscalls:sys_exit_fchown                           [Tracepoint event]
  syscalls:sys_exit_fchownat                         [Tracepoint event]
  syscalls:sys_exit_fcntl                            [Tracepoint event]
  syscalls:sys_exit_fdatasync                        [Tracepoint event]
  syscalls:sys_exit_fgetxattr                        [Tracepoint event]
  syscalls:sys_exit_finit_module                     [Tracepoint event]
  syscalls:sys_exit_flistxattr                       [Tracepoint event]
  syscalls:sys_exit_flock                            [Tracepoint event]
  syscalls:sys_exit_fork                             [Tracepoint event]
  syscalls:sys_exit_fremovexattr                     [Tracepoint event]
  syscalls:sys_exit_fsconfig                         [Tracepoint event]
  syscalls:sys_exit_fsetxattr                        [Tracepoint event]
  syscalls:sys_exit_fsmount                          [Tracepoint event]
  syscalls:sys_exit_fsopen                           [Tracepoint event]
  syscalls:sys_exit_fspick                           [Tracepoint event]
  syscalls:sys_exit_fstatfs                          [Tracepoint event]
  syscalls:sys_exit_fsync                            [Tracepoint event]
  syscalls:sys_exit_ftruncate                        [Tracepoint event]
  syscalls:sys_exit_futex                            [Tracepoint event]
  syscalls:sys_exit_futex_waitv                      [Tracepoint event]
  syscalls:sys_exit_futimesat                        [Tracepoint event]
  syscalls:sys_exit_get_mempolicy                    [Tracepoint event]
  syscalls:sys_exit_get_robust_list                  [Tracepoint event]
  syscalls:sys_exit_getcpu                           [Tracepoint event]
  syscalls:sys_exit_getcwd                           [Tracepoint event]
  syscalls:sys_exit_getdents                         [Tracepoint event]
  syscalls:sys_exit_getdents64                       [Tracepoint event]
  syscalls:sys_exit_getegid                          [Tracepoint event]
  syscalls:sys_exit_geteuid                          [Tracepoint event]
  syscalls:sys_exit_getgid                           [Tracepoint event]
  syscalls:sys_exit_getgroups                        [Tracepoint event]
  syscalls:sys_exit_getitimer                        [Tracepoint event]
  syscalls:sys_exit_getpeername                      [Tracepoint event]
  syscalls:sys_exit_getpgid                          [Tracepoint event]
  syscalls:sys_exit_getpgrp                          [Tracepoint event]
  syscalls:sys_exit_getpid                           [Tracepoint event]
  syscalls:sys_exit_getppid                          [Tracepoint event]
  syscalls:sys_exit_getpriority                      [Tracepoint event]
  syscalls:sys_exit_getrandom                        [Tracepoint event]
  syscalls:sys_exit_getresgid                        [Tracepoint event]
  syscalls:sys_exit_getresuid                        [Tracepoint event]
  syscalls:sys_exit_getrlimit                        [Tracepoint event]
  syscalls:sys_exit_getrusage                        [Tracepoint event]
  syscalls:sys_exit_getsid                           [Tracepoint event]
  syscalls:sys_exit_getsockname                      [Tracepoint event]
  syscalls:sys_exit_getsockopt                       [Tracepoint event]
  syscalls:sys_exit_gettid                           [Tracepoint event]
  syscalls:sys_exit_gettimeofday                     [Tracepoint event]
  syscalls:sys_exit_getuid                           [Tracepoint event]
  syscalls:sys_exit_getxattr                         [Tracepoint event]
  syscalls:sys_exit_init_module                      [Tracepoint event]
  syscalls:sys_exit_inotify_add_watch                [Tracepoint event]
  syscalls:sys_exit_inotify_init                     [Tracepoint event]
  syscalls:sys_exit_inotify_init1                    [Tracepoint event]
  syscalls:sys_exit_inotify_rm_watch                 [Tracepoint event]
  syscalls:sys_exit_io_cancel                        [Tracepoint event]
  syscalls:sys_exit_io_destroy                       [Tracepoint event]
  syscalls:sys_exit_io_getevents                     [Tracepoint event]
  syscalls:sys_exit_io_pgetevents                    [Tracepoint event]
  syscalls:sys_exit_io_setup                         [Tracepoint event]
  syscalls:sys_exit_io_submit                        [Tracepoint event]
  syscalls:sys_exit_io_uring_enter                   [Tracepoint event]
  syscalls:sys_exit_io_uring_register                [Tracepoint event]
  syscalls:sys_exit_io_uring_setup                   [Tracepoint event]
  syscalls:sys_exit_ioctl                            [Tracepoint event]
  syscalls:sys_exit_ioperm                           [Tracepoint event]
  syscalls:sys_exit_iopl                             [Tracepoint event]
  syscalls:sys_exit_ioprio_get                       [Tracepoint event]
  syscalls:sys_exit_ioprio_set                       [Tracepoint event]
  syscalls:sys_exit_kcmp                             [Tracepoint event]
  syscalls:sys_exit_kexec_load                       [Tracepoint event]
  syscalls:sys_exit_keyctl                           [Tracepoint event]
  syscalls:sys_exit_kill                             [Tracepoint event]
  syscalls:sys_exit_lchown                           [Tracepoint event]
  syscalls:sys_exit_lgetxattr                        [Tracepoint event]
  syscalls:sys_exit_link                             [Tracepoint event]
  syscalls:sys_exit_linkat                           [Tracepoint event]
  syscalls:sys_exit_listen                           [Tracepoint event]
  syscalls:sys_exit_listxattr                        [Tracepoint event]
  syscalls:sys_exit_llistxattr                       [Tracepoint event]
  syscalls:sys_exit_lremovexattr                     [Tracepoint event]
  syscalls:sys_exit_lseek                            [Tracepoint event]
  syscalls:sys_exit_lsetxattr                        [Tracepoint event]
  syscalls:sys_exit_madvise                          [Tracepoint event]
  syscalls:sys_exit_mbind                            [Tracepoint event]
  syscalls:sys_exit_membarrier                       [Tracepoint event]
  syscalls:sys_exit_memfd_create                     [Tracepoint event]
  syscalls:sys_exit_memfd_secret                     [Tracepoint event]
  syscalls:sys_exit_migrate_pages                    [Tracepoint event]
  syscalls:sys_exit_mincore                          [Tracepoint event]
  syscalls:sys_exit_mkdir                            [Tracepoint event]
  syscalls:sys_exit_mkdirat                          [Tracepoint event]
  syscalls:sys_exit_mknod                            [Tracepoint event]
  syscalls:sys_exit_mknodat                          [Tracepoint event]
  syscalls:sys_exit_mlock                            [Tracepoint event]
  syscalls:sys_exit_mlock2                           [Tracepoint event]
  syscalls:sys_exit_mlockall                         [Tracepoint event]
  syscalls:sys_exit_mmap                             [Tracepoint event]
  syscalls:sys_exit_modify_ldt                       [Tracepoint event]
  syscalls:sys_exit_mount                            [Tracepoint event]
  syscalls:sys_exit_mount_setattr                    [Tracepoint event]
  syscalls:sys_exit_move_mount                       [Tracepoint event]
  syscalls:sys_exit_move_pages                       [Tracepoint event]
  syscalls:sys_exit_mprotect                         [Tracepoint event]
  syscalls:sys_exit_mq_getsetattr                    [Tracepoint event]
  syscalls:sys_exit_mq_notify                        [Tracepoint event]
  syscalls:sys_exit_mq_open                          [Tracepoint event]
  syscalls:sys_exit_mq_timedreceive                  [Tracepoint event]
  syscalls:sys_exit_mq_timedsend                     [Tracepoint event]
  syscalls:sys_exit_mq_unlink                        [Tracepoint event]
  syscalls:sys_exit_mremap                           [Tracepoint event]
  syscalls:sys_exit_msgctl                           [Tracepoint event]
  syscalls:sys_exit_msgget                           [Tracepoint event]
  syscalls:sys_exit_msgrcv                           [Tracepoint event]
  syscalls:sys_exit_msgsnd                           [Tracepoint event]
  syscalls:sys_exit_msync                            [Tracepoint event]
  syscalls:sys_exit_munlock                          [Tracepoint event]
  syscalls:sys_exit_munlockall                       [Tracepoint event]
  syscalls:sys_exit_munmap                           [Tracepoint event]
  syscalls:sys_exit_name_to_handle_at                [Tracepoint event]
  syscalls:sys_exit_nanosleep                        [Tracepoint event]
  syscalls:sys_exit_newfstat                         [Tracepoint event]
  syscalls:sys_exit_newfstatat                       [Tracepoint event]
  syscalls:sys_exit_newlstat                         [Tracepoint event]
  syscalls:sys_exit_newstat                          [Tracepoint event]
  syscalls:sys_exit_newuname                         [Tracepoint event]
  syscalls:sys_exit_open                             [Tracepoint event]
  syscalls:sys_exit_open_by_handle_at                [Tracepoint event]
  syscalls:sys_exit_open_tree                        [Tracepoint event]
  syscalls:sys_exit_openat                           [Tracepoint event]
  syscalls:sys_exit_openat2                          [Tracepoint event]
  syscalls:sys_exit_pause                            [Tracepoint event]
  syscalls:sys_exit_perf_event_open                  [Tracepoint event]
  syscalls:sys_exit_personality                      [Tracepoint event]
  syscalls:sys_exit_pidfd_getfd                      [Tracepoint event]
  syscalls:sys_exit_pidfd_open                       [Tracepoint event]
  syscalls:sys_exit_pidfd_send_signal                [Tracepoint event]
  syscalls:sys_exit_pipe                             [Tracepoint event]
  syscalls:sys_exit_pipe2                            [Tracepoint event]
  syscalls:sys_exit_pivot_root                       [Tracepoint event]
  syscalls:sys_exit_pkey_alloc                       [Tracepoint event]
  syscalls:sys_exit_pkey_free                        [Tracepoint event]
  syscalls:sys_exit_pkey_mprotect                    [Tracepoint event]
  syscalls:sys_exit_poll                             [Tracepoint event]
  syscalls:sys_exit_ppoll                            [Tracepoint event]
  syscalls:sys_exit_prctl                            [Tracepoint event]
  syscalls:sys_exit_pread64                          [Tracepoint event]
  syscalls:sys_exit_preadv                           [Tracepoint event]
  syscalls:sys_exit_preadv2                          [Tracepoint event]
  syscalls:sys_exit_prlimit64                        [Tracepoint event]
  syscalls:sys_exit_process_madvise                  [Tracepoint event]
  syscalls:sys_exit_process_mrelease                 [Tracepoint event]
  syscalls:sys_exit_process_vm_readv                 [Tracepoint event]
  syscalls:sys_exit_process_vm_writev                [Tracepoint event]
  syscalls:sys_exit_pselect6                         [Tracepoint event]
  syscalls:sys_exit_ptrace                           [Tracepoint event]
  syscalls:sys_exit_pwrite64                         [Tracepoint event]
  syscalls:sys_exit_pwritev                          [Tracepoint event]
  syscalls:sys_exit_pwritev2                         [Tracepoint event]
  syscalls:sys_exit_quotactl                         [Tracepoint event]
  syscalls:sys_exit_quotactl_fd                      [Tracepoint event]
  syscalls:sys_exit_read                             [Tracepoint event]
  syscalls:sys_exit_readahead                        [Tracepoint event]
  syscalls:sys_exit_readlink                         [Tracepoint event]
  syscalls:sys_exit_readlinkat                       [Tracepoint event]
  syscalls:sys_exit_readv                            [Tracepoint event]
  syscalls:sys_exit_reboot                           [Tracepoint event]
  syscalls:sys_exit_recvfrom                         [Tracepoint event]
  syscalls:sys_exit_recvmmsg                         [Tracepoint event]
  syscalls:sys_exit_recvmsg                          [Tracepoint event]
  syscalls:sys_exit_remap_file_pages                 [Tracepoint event]
  syscalls:sys_exit_removexattr                      [Tracepoint event]
  syscalls:sys_exit_rename                           [Tracepoint event]
  syscalls:sys_exit_renameat                         [Tracepoint event]
  syscalls:sys_exit_renameat2                        [Tracepoint event]
  syscalls:sys_exit_request_key                      [Tracepoint event]
  syscalls:sys_exit_restart_syscall                  [Tracepoint event]
  syscalls:sys_exit_rmdir                            [Tracepoint event]
  syscalls:sys_exit_rseq                             [Tracepoint event]
  syscalls:sys_exit_rt_sigaction                     [Tracepoint event]
  syscalls:sys_exit_rt_sigpending                    [Tracepoint event]
  syscalls:sys_exit_rt_sigprocmask                   [Tracepoint event]
  syscalls:sys_exit_rt_sigqueueinfo                  [Tracepoint event]
  syscalls:sys_exit_rt_sigreturn                     [Tracepoint event]
  syscalls:sys_exit_rt_sigsuspend                    [Tracepoint event]
  syscalls:sys_exit_rt_sigtimedwait                  [Tracepoint event]
  syscalls:sys_exit_rt_tgsigqueueinfo                [Tracepoint event]
  syscalls:sys_exit_sched_get_priority_max           [Tracepoint event]
  syscalls:sys_exit_sched_get_priority_min           [Tracepoint event]
  syscalls:sys_exit_sched_getaffinity                [Tracepoint event]
  syscalls:sys_exit_sched_getattr                    [Tracepoint event]
  syscalls:sys_exit_sched_getparam                   [Tracepoint event]
  syscalls:sys_exit_sched_getscheduler               [Tracepoint event]
  syscalls:sys_exit_sched_rr_get_interval            [Tracepoint event]
  syscalls:sys_exit_sched_setaffinity                [Tracepoint event]
  syscalls:sys_exit_sched_setattr                    [Tracepoint event]
  syscalls:sys_exit_sched_setparam                   [Tracepoint event]
  syscalls:sys_exit_sched_setscheduler               [Tracepoint event]
  syscalls:sys_exit_sched_yield                      [Tracepoint event]
  syscalls:sys_exit_seccomp                          [Tracepoint event]
  syscalls:sys_exit_select                           [Tracepoint event]
  syscalls:sys_exit_semctl                           [Tracepoint event]
  syscalls:sys_exit_semget                           [Tracepoint event]
  syscalls:sys_exit_semop                            [Tracepoint event]
  syscalls:sys_exit_semtimedop                       [Tracepoint event]
  syscalls:sys_exit_sendfile64                       [Tracepoint event]
  syscalls:sys_exit_sendmmsg                         [Tracepoint event]
  syscalls:sys_exit_sendmsg                          [Tracepoint event]
  syscalls:sys_exit_sendto                           [Tracepoint event]
  syscalls:sys_exit_set_mempolicy                    [Tracepoint event]
  syscalls:sys_exit_set_mempolicy_home_node          [Tracepoint event]
  syscalls:sys_exit_set_robust_list                  [Tracepoint event]
  syscalls:sys_exit_set_tid_address                  [Tracepoint event]
  syscalls:sys_exit_setdomainname                    [Tracepoint event]
  syscalls:sys_exit_setfsgid                         [Tracepoint event]
  syscalls:sys_exit_setfsuid                         [Tracepoint event]
  syscalls:sys_exit_setgid                           [Tracepoint event]
  syscalls:sys_exit_setgroups                        [Tracepoint event]
  syscalls:sys_exit_sethostname                      [Tracepoint event]
  syscalls:sys_exit_setitimer                        [Tracepoint event]
  syscalls:sys_exit_setns                            [Tracepoint event]
  syscalls:sys_exit_setpgid                          [Tracepoint event]
  syscalls:sys_exit_setpriority                      [Tracepoint event]
  syscalls:sys_exit_setregid                         [Tracepoint event]
  syscalls:sys_exit_setresgid                        [Tracepoint event]
  syscalls:sys_exit_setresuid                        [Tracepoint event]
  syscalls:sys_exit_setreuid                         [Tracepoint event]
  syscalls:sys_exit_setrlimit                        [Tracepoint event]
  syscalls:sys_exit_setsid                           [Tracepoint event]
  syscalls:sys_exit_setsockopt                       [Tracepoint event]
  syscalls:sys_exit_settimeofday                     [Tracepoint event]
  syscalls:sys_exit_setuid                           [Tracepoint event]
  syscalls:sys_exit_setxattr                         [Tracepoint event]
  syscalls:sys_exit_shmat                            [Tracepoint event]
  syscalls:sys_exit_shmctl                           [Tracepoint event]
  syscalls:sys_exit_shmdt                            [Tracepoint event]
  syscalls:sys_exit_shmget                           [Tracepoint event]
  syscalls:sys_exit_shutdown                         [Tracepoint event]
  syscalls:sys_exit_sigaltstack                      [Tracepoint event]
  syscalls:sys_exit_signalfd                         [Tracepoint event]
  syscalls:sys_exit_signalfd4                        [Tracepoint event]
  syscalls:sys_exit_socket                           [Tracepoint event]
  syscalls:sys_exit_socketpair                       [Tracepoint event]
  syscalls:sys_exit_splice                           [Tracepoint event]
  syscalls:sys_exit_statfs                           [Tracepoint event]
  syscalls:sys_exit_statx                            [Tracepoint event]
  syscalls:sys_exit_swapoff                          [Tracepoint event]
  syscalls:sys_exit_swapon                           [Tracepoint event]
  syscalls:sys_exit_symlink                          [Tracepoint event]
  syscalls:sys_exit_symlinkat                        [Tracepoint event]
  syscalls:sys_exit_sync                             [Tracepoint event]
  syscalls:sys_exit_sync_file_range                  [Tracepoint event]
  syscalls:sys_exit_syncfs                           [Tracepoint event]
  syscalls:sys_exit_sysfs                            [Tracepoint event]
  syscalls:sys_exit_sysinfo                          [Tracepoint event]
  syscalls:sys_exit_syslog                           [Tracepoint event]
  syscalls:sys_exit_tee                              [Tracepoint event]
  syscalls:sys_exit_tgkill                           [Tracepoint event]
  syscalls:sys_exit_time                             [Tracepoint event]
  syscalls:sys_exit_timer_create                     [Tracepoint event]
  syscalls:sys_exit_timer_delete                     [Tracepoint event]
  syscalls:sys_exit_timer_getoverrun                 [Tracepoint event]
  syscalls:sys_exit_timer_gettime                    [Tracepoint event]
  syscalls:sys_exit_timer_settime                    [Tracepoint event]
  syscalls:sys_exit_timerfd_create                   [Tracepoint event]
  syscalls:sys_exit_timerfd_gettime                  [Tracepoint event]
  syscalls:sys_exit_timerfd_settime                  [Tracepoint event]
  syscalls:sys_exit_times                            [Tracepoint event]
  syscalls:sys_exit_tkill                            [Tracepoint event]
  syscalls:sys_exit_truncate                         [Tracepoint event]
  syscalls:sys_exit_umask                            [Tracepoint event]
  syscalls:sys_exit_umount                           [Tracepoint event]
  syscalls:sys_exit_unlink                           [Tracepoint event]
  syscalls:sys_exit_unlinkat                         [Tracepoint event]
  syscalls:sys_exit_unshare                          [Tracepoint event]
  syscalls:sys_exit_userfaultfd                      [Tracepoint event]
  syscalls:sys_exit_ustat                            [Tracepoint event]
  syscalls:sys_exit_utime                            [Tracepoint event]
  syscalls:sys_exit_utimensat                        [Tracepoint event]
  syscalls:sys_exit_utimes                           [Tracepoint event]
  syscalls:sys_exit_vfork                            [Tracepoint event]
  syscalls:sys_exit_vhangup                          [Tracepoint event]
  syscalls:sys_exit_vmsplice                         [Tracepoint event]
  syscalls:sys_exit_wait4                            [Tracepoint event]
  syscalls:sys_exit_waitid                           [Tracepoint event]
  syscalls:sys_exit_write                            [Tracepoint event]
  syscalls:sys_exit_writev                           [Tracepoint event]
  task:task_newtask                                  [Tracepoint event]
  task:task_rename                                   [Tracepoint event]
  tcp:tcp_bad_csum                                   [Tracepoint event]
  tcp:tcp_cong_state_set                             [Tracepoint event]
  tcp:tcp_destroy_sock                               [Tracepoint event]
  tcp:tcp_probe                                      [Tracepoint event]
  tcp:tcp_rcv_space_adjust                           [Tracepoint event]
  tcp:tcp_receive_reset                              [Tracepoint event]
  tcp:tcp_retransmit_skb                             [Tracepoint event]
  tcp:tcp_retransmit_synack                          [Tracepoint event]
  tcp:tcp_send_reset                                 [Tracepoint event]
  thermal:cdev_update                                [Tracepoint event]
  thermal:thermal_temperature                        [Tracepoint event]
  thermal:thermal_zone_trip                          [Tracepoint event]
  thp:hugepage_set_pmd                               [Tracepoint event]
  thp:hugepage_update                                [Tracepoint event]
  thp:remove_migration_pmd                           [Tracepoint event]
  thp:set_migration_pmd                              [Tracepoint event]
  timer:hrtimer_cancel                               [Tracepoint event]
  timer:hrtimer_expire_entry                         [Tracepoint event]
  timer:hrtimer_expire_exit                          [Tracepoint event]
  timer:hrtimer_init                                 [Tracepoint event]
  timer:hrtimer_start                                [Tracepoint event]
  timer:itimer_expire                                [Tracepoint event]
  timer:itimer_state                                 [Tracepoint event]
  timer:tick_stop                                    [Tracepoint event]
  timer:timer_cancel                                 [Tracepoint event]
  timer:timer_expire_entry                           [Tracepoint event]
  timer:timer_expire_exit                            [Tracepoint event]
  timer:timer_init                                   [Tracepoint event]
  timer:timer_start                                  [Tracepoint event]
  tlb:tlb_flush                                      [Tracepoint event]
  udp:udp_fail_queue_rcv_skb                         [Tracepoint event]
  vmalloc:alloc_vmap_area                            [Tracepoint event]
  vmalloc:free_vmap_area_noflush                     [Tracepoint event]
  vmalloc:purge_vmap_area_lazy                       [Tracepoint event]
  vmscan:mm_shrink_slab_end                          [Tracepoint event]
  vmscan:mm_shrink_slab_start                        [Tracepoint event]
  vmscan:mm_vmscan_direct_reclaim_begin              [Tracepoint event]
  vmscan:mm_vmscan_direct_reclaim_end                [Tracepoint event]
  vmscan:mm_vmscan_kswapd_sleep                      [Tracepoint event]
  vmscan:mm_vmscan_kswapd_wake                       [Tracepoint event]
  vmscan:mm_vmscan_lru_isolate                       [Tracepoint event]
  vmscan:mm_vmscan_lru_shrink_active                 [Tracepoint event]
  vmscan:mm_vmscan_lru_shrink_inactive               [Tracepoint event]
  vmscan:mm_vmscan_memcg_reclaim_begin               [Tracepoint event]
  vmscan:mm_vmscan_memcg_reclaim_end                 [Tracepoint event]
  vmscan:mm_vmscan_memcg_softlimit_reclaim_begin     [Tracepoint event]
  vmscan:mm_vmscan_memcg_softlimit_reclaim_end       [Tracepoint event]
  vmscan:mm_vmscan_node_reclaim_begin                [Tracepoint event]
  vmscan:mm_vmscan_node_reclaim_end                  [Tracepoint event]
  vmscan:mm_vmscan_throttled                         [Tracepoint event]
  vmscan:mm_vmscan_wakeup_kswapd                     [Tracepoint event]
  vmscan:mm_vmscan_write_folio                       [Tracepoint event]
  vsock:virtio_transport_alloc_pkt                   [Tracepoint event]
  vsock:virtio_transport_recv_pkt                    [Tracepoint event]
  vsyscall:emulate_vsyscall                          [Tracepoint event]
  watchdog:watchdog_ping                             [Tracepoint event]
  watchdog:watchdog_set_timeout                      [Tracepoint event]
  watchdog:watchdog_start                            [Tracepoint event]
  watchdog:watchdog_stop                             [Tracepoint event]
  wbt:wbt_lat                                        [Tracepoint event]
  wbt:wbt_stat                                       [Tracepoint event]
  wbt:wbt_step                                       [Tracepoint event]
  wbt:wbt_timer                                      [Tracepoint event]
  workqueue:workqueue_activate_work                  [Tracepoint event]
  workqueue:workqueue_execute_end                    [Tracepoint event]
  workqueue:workqueue_execute_start                  [Tracepoint event]
  workqueue:workqueue_queue_work                     [Tracepoint event]
  writeback:balance_dirty_pages                      [Tracepoint event]
  writeback:bdi_dirty_ratelimit                      [Tracepoint event]
  writeback:flush_foreign                            [Tracepoint event]
  writeback:folio_wait_writeback                     [Tracepoint event]
  writeback:global_dirty_state                       [Tracepoint event]
  writeback:inode_foreign_history                    [Tracepoint event]
  writeback:inode_switch_wbs                         [Tracepoint event]
  writeback:sb_clear_inode_writeback                 [Tracepoint event]
  writeback:sb_mark_inode_writeback                  [Tracepoint event]
  writeback:track_foreign_dirty                      [Tracepoint event]
  writeback:wbc_writepage                            [Tracepoint event]
  writeback:writeback_bdi_register                   [Tracepoint event]
  writeback:writeback_dirty_folio                    [Tracepoint event]
  writeback:writeback_dirty_inode                    [Tracepoint event]
  writeback:writeback_dirty_inode_enqueue            [Tracepoint event]
  writeback:writeback_dirty_inode_start              [Tracepoint event]
  writeback:writeback_exec                           [Tracepoint event]
  writeback:writeback_lazytime                       [Tracepoint event]
  writeback:writeback_lazytime_iput                  [Tracepoint event]
  writeback:writeback_mark_inode_dirty               [Tracepoint event]
  writeback:writeback_pages_written                  [Tracepoint event]
  writeback:writeback_queue                          [Tracepoint event]
  writeback:writeback_queue_io                       [Tracepoint event]
  writeback:writeback_sb_inodes_requeue              [Tracepoint event]
  writeback:writeback_single_inode                   [Tracepoint event]
  writeback:writeback_single_inode_start             [Tracepoint event]
  writeback:writeback_start                          [Tracepoint event]
  writeback:writeback_wait                           [Tracepoint event]
  writeback:writeback_wake_background                [Tracepoint event]
  writeback:writeback_write_inode                    [Tracepoint event]
  writeback:writeback_write_inode_start              [Tracepoint event]
  writeback:writeback_written                        [Tracepoint event]
  x86_fpu:x86_fpu_after_restore                      [Tracepoint event]
  x86_fpu:x86_fpu_after_save                         [Tracepoint event]
  x86_fpu:x86_fpu_before_restore                     [Tracepoint event]
  x86_fpu:x86_fpu_before_save                        [Tracepoint event]
  x86_fpu:x86_fpu_copy_dst                           [Tracepoint event]
  x86_fpu:x86_fpu_copy_src                           [Tracepoint event]
  x86_fpu:x86_fpu_dropped                            [Tracepoint event]
  x86_fpu:x86_fpu_init_state                         [Tracepoint event]
  x86_fpu:x86_fpu_regs_activated                     [Tracepoint event]
  x86_fpu:x86_fpu_regs_deactivated                   [Tracepoint event]
  x86_fpu:x86_fpu_xstate_check_failed                [Tracepoint event]
  xdp:mem_connect                                    [Tracepoint event]
  xdp:mem_disconnect                                 [Tracepoint event]
  xdp:mem_return_failed                              [Tracepoint event]
  xdp:xdp_bulk_tx                                    [Tracepoint event]
  xdp:xdp_cpumap_enqueue                             [Tracepoint event]
  xdp:xdp_cpumap_kthread                             [Tracepoint event]
  xdp:xdp_devmap_xmit                                [Tracepoint event]
  xdp:xdp_exception                                  [Tracepoint event]
  xdp:xdp_redirect                                   [Tracepoint event]
  xdp:xdp_redirect_err                               [Tracepoint event]
  xdp:xdp_redirect_map                               [Tracepoint event]
  xdp:xdp_redirect_map_err                           [Tracepoint event]
  xen:xen_cpu_load_idt                               [Tracepoint event]
  xen:xen_cpu_set_ldt                                [Tracepoint event]
  xen:xen_cpu_write_gdt_entry                        [Tracepoint event]
  xen:xen_cpu_write_idt_entry                        [Tracepoint event]
  xen:xen_cpu_write_ldt_entry                        [Tracepoint event]
  xen:xen_mc_batch                                   [Tracepoint event]
  xen:xen_mc_callback                                [Tracepoint event]
  xen:xen_mc_entry                                   [Tracepoint event]
  xen:xen_mc_entry_alloc                             [Tracepoint event]
  xen:xen_mc_extend_args                             [Tracepoint event]
  xen:xen_mc_flush                                   [Tracepoint event]
  xen:xen_mc_flush_reason                            [Tracepoint event]
  xen:xen_mc_issue                                   [Tracepoint event]
  xen:xen_mmu_alloc_ptpage                           [Tracepoint event]
  xen:xen_mmu_flush_tlb_multi                        [Tracepoint event]
  xen:xen_mmu_flush_tlb_one_user                     [Tracepoint event]
  xen:xen_mmu_pgd_pin                                [Tracepoint event]
  xen:xen_mmu_pgd_unpin                              [Tracepoint event]
  xen:xen_mmu_ptep_modify_prot_commit                [Tracepoint event]
  xen:xen_mmu_ptep_modify_prot_start                 [Tracepoint event]
  xen:xen_mmu_release_ptpage                         [Tracepoint event]
  xen:xen_mmu_set_p4d                                [Tracepoint event]
  xen:xen_mmu_set_pmd                                [Tracepoint event]
  xen:xen_mmu_set_pte                                [Tracepoint event]
  xen:xen_mmu_set_pud                                [Tracepoint event]
  xen:xen_mmu_write_cr3                              [Tracepoint event]
  xfs:kmem_alloc                                     [Tracepoint event]
  xfs:xfs_ag_mark_healthy                            [Tracepoint event]
  xfs:xfs_ag_mark_sick                               [Tracepoint event]
  xfs:xfs_ag_resv_alloc_extent                       [Tracepoint event]
  xfs:xfs_ag_resv_critical                           [Tracepoint event]
  xfs:xfs_ag_resv_free                               [Tracepoint event]
  xfs:xfs_ag_resv_free_error                         [Tracepoint event]
  xfs:xfs_ag_resv_free_extent                        [Tracepoint event]
  xfs:xfs_ag_resv_init                               [Tracepoint event]
  xfs:xfs_ag_resv_init_error                         [Tracepoint event]
  xfs:xfs_ag_resv_needed                             [Tracepoint event]
  xfs:xfs_ag_unfixed_corruption                      [Tracepoint event]
  xfs:xfs_agf                                        [Tracepoint event]
  xfs:xfs_agfl_free_defer                            [Tracepoint event]
  xfs:xfs_agfl_free_deferred                         [Tracepoint event]
  xfs:xfs_agfl_reset                                 [Tracepoint event]
  xfs:xfs_ail_delete                                 [Tracepoint event]
  xfs:xfs_ail_flushing                               [Tracepoint event]
  xfs:xfs_ail_insert                                 [Tracepoint event]
  xfs:xfs_ail_locked                                 [Tracepoint event]
  xfs:xfs_ail_move                                   [Tracepoint event]
  xfs:xfs_ail_pinned                                 [Tracepoint event]
  xfs:xfs_ail_push                                   [Tracepoint event]
  xfs:xfs_alloc_cur                                  [Tracepoint event]
  xfs:xfs_alloc_cur_check                            [Tracepoint event]
  xfs:xfs_alloc_cur_left                             [Tracepoint event]
  xfs:xfs_alloc_cur_lookup                           [Tracepoint event]
  xfs:xfs_alloc_cur_lookup_done                      [Tracepoint event]
  xfs:xfs_alloc_cur_right                            [Tracepoint event]
  xfs:xfs_alloc_exact_done                           [Tracepoint event]
  xfs:xfs_alloc_exact_error                          [Tracepoint event]
  xfs:xfs_alloc_exact_notfound                       [Tracepoint event]
  xfs:xfs_alloc_file_space                           [Tracepoint event]
  xfs:xfs_alloc_near_busy                            [Tracepoint event]
  xfs:xfs_alloc_near_error                           [Tracepoint event]
  xfs:xfs_alloc_near_first                           [Tracepoint event]
  xfs:xfs_alloc_near_noentry                         [Tracepoint event]
  xfs:xfs_alloc_near_nominleft                       [Tracepoint event]
  xfs:xfs_alloc_read_agf                             [Tracepoint event]
  xfs:xfs_alloc_size_busy                            [Tracepoint event]
  xfs:xfs_alloc_size_done                            [Tracepoint event]
  xfs:xfs_alloc_size_error                           [Tracepoint event]
  xfs:xfs_alloc_size_neither                         [Tracepoint event]
  xfs:xfs_alloc_size_noentry                         [Tracepoint event]
  xfs:xfs_alloc_size_nominleft                       [Tracepoint event]
  xfs:xfs_alloc_small_done                           [Tracepoint event]
  xfs:xfs_alloc_small_error                          [Tracepoint event]
  xfs:xfs_alloc_small_freelist                       [Tracepoint event]
  xfs:xfs_alloc_small_notenough                      [Tracepoint event]
  xfs:xfs_alloc_vextent_allfailed                    [Tracepoint event]
  xfs:xfs_alloc_vextent_badargs                      [Tracepoint event]
  xfs:xfs_alloc_vextent_exact_bno                    [Tracepoint event]
  xfs:xfs_alloc_vextent_finish                       [Tracepoint event]
  xfs:xfs_alloc_vextent_first_ag                     [Tracepoint event]
  xfs:xfs_alloc_vextent_loopfailed                   [Tracepoint event]
  xfs:xfs_alloc_vextent_near_bno                     [Tracepoint event]
  xfs:xfs_alloc_vextent_noagbp                       [Tracepoint event]
  xfs:xfs_alloc_vextent_nofix                        [Tracepoint event]
  xfs:xfs_alloc_vextent_skip_deadlock                [Tracepoint event]
  xfs:xfs_alloc_vextent_start_ag                     [Tracepoint event]
  xfs:xfs_alloc_vextent_this_ag                      [Tracepoint event]
  xfs:xfs_attr_defer_add                             [Tracepoint event]
  xfs:xfs_attr_defer_remove                          [Tracepoint event]
  xfs:xfs_attr_defer_replace                         [Tracepoint event]
  xfs:xfs_attr_fillstate                             [Tracepoint event]
  xfs:xfs_attr_leaf_add                              [Tracepoint event]
  xfs:xfs_attr_leaf_add_new                          [Tracepoint event]
  xfs:xfs_attr_leaf_add_old                          [Tracepoint event]
  xfs:xfs_attr_leaf_add_work                         [Tracepoint event]
  xfs:xfs_attr_leaf_addname_return                   [Tracepoint event]
  xfs:xfs_attr_leaf_clearflag                        [Tracepoint event]
  xfs:xfs_attr_leaf_compact                          [Tracepoint event]
  xfs:xfs_attr_leaf_create                           [Tracepoint event]
  xfs:xfs_attr_leaf_flipflags                        [Tracepoint event]
  xfs:xfs_attr_leaf_get                              [Tracepoint event]
  xfs:xfs_attr_leaf_list                             [Tracepoint event]
  xfs:xfs_attr_leaf_lookup                           [Tracepoint event]
  xfs:xfs_attr_leaf_rebalance                        [Tracepoint event]
  xfs:xfs_attr_leaf_remove                           [Tracepoint event]
  xfs:xfs_attr_leaf_removename                       [Tracepoint event]
  xfs:xfs_attr_leaf_replace                          [Tracepoint event]
  xfs:xfs_attr_leaf_setflag                          [Tracepoint event]
  xfs:xfs_attr_leaf_split                            [Tracepoint event]
  xfs:xfs_attr_leaf_split_after                      [Tracepoint event]
  xfs:xfs_attr_leaf_split_before                     [Tracepoint event]
  xfs:xfs_attr_leaf_to_node                          [Tracepoint event]
  xfs:xfs_attr_leaf_to_sf                            [Tracepoint event]
  xfs:xfs_attr_leaf_toosmall                         [Tracepoint event]
  xfs:xfs_attr_leaf_unbalance                        [Tracepoint event]
  xfs:xfs_attr_list_add                              [Tracepoint event]
  xfs:xfs_attr_list_full                             [Tracepoint event]
  xfs:xfs_attr_list_leaf                             [Tracepoint event]
  xfs:xfs_attr_list_leaf_end                         [Tracepoint event]
  xfs:xfs_attr_list_node_descend                     [Tracepoint event]
  xfs:xfs_attr_list_notfound                         [Tracepoint event]
  xfs:xfs_attr_list_sf                               [Tracepoint event]
  xfs:xfs_attr_list_sf_all                           [Tracepoint event]
  xfs:xfs_attr_list_wrong_blk                        [Tracepoint event]
  xfs:xfs_attr_node_addname                          [Tracepoint event]
  xfs:xfs_attr_node_addname_return                   [Tracepoint event]
  xfs:xfs_attr_node_get                              [Tracepoint event]
  xfs:xfs_attr_node_list                             [Tracepoint event]
  xfs:xfs_attr_node_removename                       [Tracepoint event]
  xfs:xfs_attr_node_replace                          [Tracepoint event]
  xfs:xfs_attr_refillstate                           [Tracepoint event]
  xfs:xfs_attr_remove_iter_return                    [Tracepoint event]
  xfs:xfs_attr_rmtval_alloc                          [Tracepoint event]
  xfs:xfs_attr_rmtval_get                            [Tracepoint event]
  xfs:xfs_attr_rmtval_remove_return                  [Tracepoint event]
  xfs:xfs_attr_rmtval_set                            [Tracepoint event]
  xfs:xfs_attr_set_iter_return                       [Tracepoint event]
  xfs:xfs_attr_sf_add                                [Tracepoint event]
  xfs:xfs_attr_sf_addname                            [Tracepoint event]
  xfs:xfs_attr_sf_addname_return                     [Tracepoint event]
  xfs:xfs_attr_sf_create                             [Tracepoint event]
  xfs:xfs_attr_sf_lookup                             [Tracepoint event]
  xfs:xfs_attr_sf_remove                             [Tracepoint event]
  xfs:xfs_attr_sf_to_leaf                            [Tracepoint event]
  xfs:xfs_blockgc_flush_all                          [Tracepoint event]
  xfs:xfs_blockgc_free_space                         [Tracepoint event]
  xfs:xfs_blockgc_start                              [Tracepoint event]
  xfs:xfs_blockgc_stop                               [Tracepoint event]
  xfs:xfs_blockgc_worker                             [Tracepoint event]
  xfs:xfs_bmap_defer                                 [Tracepoint event]
  xfs:xfs_bmap_deferred                              [Tracepoint event]
  xfs:xfs_bmap_free_defer                            [Tracepoint event]
  xfs:xfs_bmap_free_deferred                         [Tracepoint event]
  xfs:xfs_bmap_post_update                           [Tracepoint event]
  xfs:xfs_bmap_pre_update                            [Tracepoint event]
  xfs:xfs_btree_bload_block                          [Tracepoint event]
  xfs:xfs_btree_bload_level_geometry                 [Tracepoint event]
  xfs:xfs_btree_commit_afakeroot                     [Tracepoint event]
  xfs:xfs_btree_commit_ifakeroot                     [Tracepoint event]
  xfs:xfs_btree_corrupt                              [Tracepoint event]
  xfs:xfs_btree_overlapped_query_range               [Tracepoint event]
  xfs:xfs_btree_updkeys                              [Tracepoint event]
  xfs:xfs_buf_delwri_pushbuf                         [Tracepoint event]
  xfs:xfs_buf_delwri_queue                           [Tracepoint event]
  xfs:xfs_buf_delwri_queued                          [Tracepoint event]
  xfs:xfs_buf_delwri_split                           [Tracepoint event]
  xfs:xfs_buf_drain_buftarg                          [Tracepoint event]
  xfs:xfs_buf_error_relse                            [Tracepoint event]
  xfs:xfs_buf_find                                   [Tracepoint event]
  xfs:xfs_buf_free                                   [Tracepoint event]
  xfs:xfs_buf_get                                    [Tracepoint event]
  xfs:xfs_buf_get_uncached                           [Tracepoint event]
  xfs:xfs_buf_hold                                   [Tracepoint event]
  xfs:xfs_buf_init                                   [Tracepoint event]
  xfs:xfs_buf_iodone                                 [Tracepoint event]
  xfs:xfs_buf_iodone_async                           [Tracepoint event]
  xfs:xfs_buf_ioerror                                [Tracepoint event]
  xfs:xfs_buf_iowait                                 [Tracepoint event]
  xfs:xfs_buf_iowait_done                            [Tracepoint event]
  xfs:xfs_buf_item_committed                         [Tracepoint event]
  xfs:xfs_buf_item_format                            [Tracepoint event]
  xfs:xfs_buf_item_format_stale                      [Tracepoint event]
  xfs:xfs_buf_item_ordered                           [Tracepoint event]
  xfs:xfs_buf_item_pin                               [Tracepoint event]
  xfs:xfs_buf_item_push                              [Tracepoint event]
  xfs:xfs_buf_item_release                           [Tracepoint event]
  xfs:xfs_buf_item_relse                             [Tracepoint event]
  xfs:xfs_buf_item_size                              [Tracepoint event]
  xfs:xfs_buf_item_size_ordered                      [Tracepoint event]
  xfs:xfs_buf_item_size_stale                        [Tracepoint event]
  xfs:xfs_buf_item_unpin                             [Tracepoint event]
  xfs:xfs_buf_item_unpin_stale                       [Tracepoint event]
  xfs:xfs_buf_lock                                   [Tracepoint event]
  xfs:xfs_buf_lock_done                              [Tracepoint event]
  xfs:xfs_buf_read                                   [Tracepoint event]
  xfs:xfs_buf_rele                                   [Tracepoint event]
  xfs:xfs_buf_submit                                 [Tracepoint event]
  xfs:xfs_buf_trylock                                [Tracepoint event]
  xfs:xfs_buf_trylock_fail                           [Tracepoint event]
  xfs:xfs_buf_unlock                                 [Tracepoint event]
  xfs:xfs_bunmap                                     [Tracepoint event]
  xfs:xfs_check_new_dalign                           [Tracepoint event]
  xfs:xfs_cil_whiteout_mark                          [Tracepoint event]
  xfs:xfs_cil_whiteout_skip                          [Tracepoint event]
  xfs:xfs_cil_whiteout_unpin                         [Tracepoint event]
  xfs:xfs_collapse_file_space                        [Tracepoint event]
  xfs:xfs_create                                     [Tracepoint event]
  xfs:xfs_da_fixhashpath                             [Tracepoint event]
  xfs:xfs_da_grow_inode                              [Tracepoint event]
  xfs:xfs_da_join                                    [Tracepoint event]
  xfs:xfs_da_link_after                              [Tracepoint event]
  xfs:xfs_da_link_before                             [Tracepoint event]
  xfs:xfs_da_node_add                                [Tracepoint event]
  xfs:xfs_da_node_create                             [Tracepoint event]
  xfs:xfs_da_node_rebalance                          [Tracepoint event]
  xfs:xfs_da_node_remove                             [Tracepoint event]
  xfs:xfs_da_node_split                              [Tracepoint event]
  xfs:xfs_da_node_toosmall                           [Tracepoint event]
  xfs:xfs_da_node_unbalance                          [Tracepoint event]
  xfs:xfs_da_path_shift                              [Tracepoint event]
  xfs:xfs_da_root_join                               [Tracepoint event]
  xfs:xfs_da_root_split                              [Tracepoint event]
  xfs:xfs_da_shrink_inode                            [Tracepoint event]
  xfs:xfs_da_split                                   [Tracepoint event]
  xfs:xfs_da_swap_lastblock                          [Tracepoint event]
  xfs:xfs_da_unlink_back                             [Tracepoint event]
  xfs:xfs_da_unlink_forward                          [Tracepoint event]
  xfs:xfs_defer_add_item                             [Tracepoint event]
  xfs:xfs_defer_cancel                               [Tracepoint event]
  xfs:xfs_defer_cancel_item                          [Tracepoint event]
  xfs:xfs_defer_cancel_list                          [Tracepoint event]
  xfs:xfs_defer_create_intent                        [Tracepoint event]
  xfs:xfs_defer_finish                               [Tracepoint event]
  xfs:xfs_defer_finish_done                          [Tracepoint event]
  xfs:xfs_defer_finish_error                         [Tracepoint event]
  xfs:xfs_defer_finish_item                          [Tracepoint event]
  xfs:xfs_defer_pending_abort                        [Tracepoint event]
  xfs:xfs_defer_pending_finish                       [Tracepoint event]
  xfs:xfs_defer_relog_intent                         [Tracepoint event]
  xfs:xfs_defer_trans_abort                          [Tracepoint event]
  xfs:xfs_defer_trans_roll                           [Tracepoint event]
  xfs:xfs_defer_trans_roll_error                     [Tracepoint event]
  xfs:xfs_delalloc_enospc                            [Tracepoint event]
  xfs:xfs_destroy_inode                              [Tracepoint event]
  xfs:xfs_dir2_block_addname                         [Tracepoint event]
  xfs:xfs_dir2_block_lookup                          [Tracepoint event]
  xfs:xfs_dir2_block_removename                      [Tracepoint event]
  xfs:xfs_dir2_block_replace                         [Tracepoint event]
  xfs:xfs_dir2_block_to_leaf                         [Tracepoint event]
  xfs:xfs_dir2_block_to_sf                           [Tracepoint event]
  xfs:xfs_dir2_grow_inode                            [Tracepoint event]
  xfs:xfs_dir2_leaf_addname                          [Tracepoint event]
  xfs:xfs_dir2_leaf_lookup                           [Tracepoint event]
  xfs:xfs_dir2_leaf_removename                       [Tracepoint event]
  xfs:xfs_dir2_leaf_replace                          [Tracepoint event]
  xfs:xfs_dir2_leaf_to_block                         [Tracepoint event]
  xfs:xfs_dir2_leaf_to_node                          [Tracepoint event]
  xfs:xfs_dir2_leafn_add                             [Tracepoint event]
  xfs:xfs_dir2_leafn_moveents                        [Tracepoint event]
  xfs:xfs_dir2_leafn_remove                          [Tracepoint event]
  xfs:xfs_dir2_node_addname                          [Tracepoint event]
  xfs:xfs_dir2_node_lookup                           [Tracepoint event]
  xfs:xfs_dir2_node_removename                       [Tracepoint event]
  xfs:xfs_dir2_node_replace                          [Tracepoint event]
  xfs:xfs_dir2_node_to_leaf                          [Tracepoint event]
  xfs:xfs_dir2_sf_addname                            [Tracepoint event]
  xfs:xfs_dir2_sf_create                             [Tracepoint event]
  xfs:xfs_dir2_sf_lookup                             [Tracepoint event]
  xfs:xfs_dir2_sf_removename                         [Tracepoint event]
  xfs:xfs_dir2_sf_replace                            [Tracepoint event]
  xfs:xfs_dir2_sf_to_block                           [Tracepoint event]
  xfs:xfs_dir2_sf_toino4                             [Tracepoint event]
  xfs:xfs_dir2_sf_toino8                             [Tracepoint event]
  xfs:xfs_dir2_shrink_inode                          [Tracepoint event]
  xfs:xfs_dir_fsync                                  [Tracepoint event]
  xfs:xfs_discard_busy                               [Tracepoint event]
  xfs:xfs_discard_exclude                            [Tracepoint event]
  xfs:xfs_discard_extent                             [Tracepoint event]
  xfs:xfs_discard_toosmall                           [Tracepoint event]
  xfs:xfs_dqadjust                                   [Tracepoint event]
  xfs:xfs_dqalloc                                    [Tracepoint event]
  xfs:xfs_dqattach_found                             [Tracepoint event]
  xfs:xfs_dqattach_get                               [Tracepoint event]
  xfs:xfs_dqflush                                    [Tracepoint event]
  xfs:xfs_dqflush_done                               [Tracepoint event]
  xfs:xfs_dqflush_force                              [Tracepoint event]
  xfs:xfs_dqget_dup                                  [Tracepoint event]
  xfs:xfs_dqget_freeing                              [Tracepoint event]
  xfs:xfs_dqget_hit                                  [Tracepoint event]
  xfs:xfs_dqget_miss                                 [Tracepoint event]
  xfs:xfs_dqput                                      [Tracepoint event]
  xfs:xfs_dqput_free                                 [Tracepoint event]
  xfs:xfs_dqread                                     [Tracepoint event]
  xfs:xfs_dqread_fail                                [Tracepoint event]
  xfs:xfs_dqreclaim_busy                             [Tracepoint event]
  xfs:xfs_dqreclaim_dirty                            [Tracepoint event]
  xfs:xfs_dqreclaim_done                             [Tracepoint event]
  xfs:xfs_dqreclaim_want                             [Tracepoint event]
  xfs:xfs_dqrele                                     [Tracepoint event]
  xfs:xfs_dqtobp_read                                [Tracepoint event]
  xfs:xfs_dquot_dqalloc                              [Tracepoint event]
  xfs:xfs_dquot_dqdetach                             [Tracepoint event]
  xfs:xfs_end_io_direct_write                        [Tracepoint event]
  xfs:xfs_end_io_direct_write_append                 [Tracepoint event]
  xfs:xfs_end_io_direct_write_unwritten              [Tracepoint event]
  xfs:xfs_extent_busy                                [Tracepoint event]
  xfs:xfs_extent_busy_clear                          [Tracepoint event]
  xfs:xfs_extent_busy_enomem                         [Tracepoint event]
  xfs:xfs_extent_busy_force                          [Tracepoint event]
  xfs:xfs_extent_busy_reuse                          [Tracepoint event]
  xfs:xfs_extent_busy_trim                           [Tracepoint event]
  xfs:xfs_file_buffered_read                         [Tracepoint event]
  xfs:xfs_file_buffered_write                        [Tracepoint event]
  xfs:xfs_file_compat_ioctl                          [Tracepoint event]
  xfs:xfs_file_dax_read                              [Tracepoint event]
  xfs:xfs_file_dax_write                             [Tracepoint event]
  xfs:xfs_file_direct_read                           [Tracepoint event]
  xfs:xfs_file_direct_write                          [Tracepoint event]
  xfs:xfs_file_fsync                                 [Tracepoint event]
  xfs:xfs_file_ioctl                                 [Tracepoint event]
  xfs:xfs_filemap_fault                              [Tracepoint event]
  xfs:xfs_filestream_free                            [Tracepoint event]
  xfs:xfs_filestream_lookup                          [Tracepoint event]
  xfs:xfs_filestream_pick                            [Tracepoint event]
  xfs:xfs_filestream_scan                            [Tracepoint event]
  xfs:xfs_force_shutdown                             [Tracepoint event]
  xfs:xfs_free_extent                                [Tracepoint event]
  xfs:xfs_free_file_space                            [Tracepoint event]
  xfs:xfs_fs_mark_healthy                            [Tracepoint event]
  xfs:xfs_fs_mark_sick                               [Tracepoint event]
  xfs:xfs_fs_sync_fs                                 [Tracepoint event]
  xfs:xfs_fs_unfixed_corruption                      [Tracepoint event]
  xfs:xfs_fsmap_high_key                             [Tracepoint event]
  xfs:xfs_fsmap_low_key                              [Tracepoint event]
  xfs:xfs_fsmap_mapping                              [Tracepoint event]
  xfs:xfs_get_acl                                    [Tracepoint event]
  xfs:xfs_getattr                                    [Tracepoint event]
  xfs:xfs_getfsmap_high_key                          [Tracepoint event]
  xfs:xfs_getfsmap_low_key                           [Tracepoint event]
  xfs:xfs_getfsmap_mapping                           [Tracepoint event]
  xfs:xfs_ialloc_read_agi                            [Tracepoint event]
  xfs:xfs_iext_insert                                [Tracepoint event]
  xfs:xfs_iext_remove                                [Tracepoint event]
  xfs:xfs_iget_hit                                   [Tracepoint event]
  xfs:xfs_iget_miss                                  [Tracepoint event]
  xfs:xfs_iget_recycle                               [Tracepoint event]
  xfs:xfs_iget_recycle_fail                          [Tracepoint event]
  xfs:xfs_iget_skip                                  [Tracepoint event]
  xfs:xfs_ilock                                      [Tracepoint event]
  xfs:xfs_ilock_demote                               [Tracepoint event]
  xfs:xfs_ilock_nowait                               [Tracepoint event]
  xfs:xfs_inactive_symlink                           [Tracepoint event]
  xfs:xfs_inode_clear_cowblocks_tag                  [Tracepoint event]
  xfs:xfs_inode_clear_eofblocks_tag                  [Tracepoint event]
  xfs:xfs_inode_free_cowblocks_invalid               [Tracepoint event]
  xfs:xfs_inode_free_eofblocks_invalid               [Tracepoint event]
  xfs:xfs_inode_inactivating                         [Tracepoint event]
  xfs:xfs_inode_mark_healthy                         [Tracepoint event]
  xfs:xfs_inode_mark_sick                            [Tracepoint event]
  xfs:xfs_inode_pin                                  [Tracepoint event]
  xfs:xfs_inode_reclaiming                           [Tracepoint event]
  xfs:xfs_inode_set_cowblocks_tag                    [Tracepoint event]
  xfs:xfs_inode_set_eofblocks_tag                    [Tracepoint event]
  xfs:xfs_inode_set_need_inactive                    [Tracepoint event]
  xfs:xfs_inode_set_reclaimable                      [Tracepoint event]
  xfs:xfs_inode_timestamp_range                      [Tracepoint event]
  xfs:xfs_inode_unpin                                [Tracepoint event]
  xfs:xfs_inode_unpin_nowait                         [Tracepoint event]
  xfs:xfs_inodegc_flush                              [Tracepoint event]
  xfs:xfs_inodegc_push                               [Tracepoint event]
  xfs:xfs_inodegc_queue                              [Tracepoint event]
  xfs:xfs_inodegc_shrinker_scan                      [Tracepoint event]
  xfs:xfs_inodegc_start                              [Tracepoint event]
  xfs:xfs_inodegc_stop                               [Tracepoint event]
  xfs:xfs_inodegc_throttle                           [Tracepoint event]
  xfs:xfs_inodegc_worker                             [Tracepoint event]
  xfs:xfs_insert_file_space                          [Tracepoint event]
  xfs:xfs_ioc_free_eofblocks                         [Tracepoint event]
  xfs:xfs_ioctl_clone                                [Tracepoint event]
  xfs:xfs_ioctl_setattr                              [Tracepoint event]
  xfs:xfs_iomap_alloc                                [Tracepoint event]
  xfs:xfs_iomap_found                                [Tracepoint event]
  xfs:xfs_iomap_invalid                              [Tracepoint event]
  xfs:xfs_iomap_prealloc_size                        [Tracepoint event]
  xfs:xfs_irec_merge_post                            [Tracepoint event]
  xfs:xfs_irec_merge_pre                             [Tracepoint event]
  xfs:xfs_irele                                      [Tracepoint event]
  xfs:xfs_itruncate_extents_end                      [Tracepoint event]
  xfs:xfs_itruncate_extents_start                    [Tracepoint event]
  xfs:xfs_iunlink                                    [Tracepoint event]
  xfs:xfs_iunlink_remove                             [Tracepoint event]
  xfs:xfs_iunlink_update_bucket                      [Tracepoint event]
  xfs:xfs_iunlink_update_dinode                      [Tracepoint event]
  xfs:xfs_iunlock                                    [Tracepoint event]
  xfs:xfs_iwalk_ag                                   [Tracepoint event]
  xfs:xfs_iwalk_ag_rec                               [Tracepoint event]
  xfs:xfs_link                                       [Tracepoint event]
  xfs:xfs_log_assign_tail_lsn                        [Tracepoint event]
  xfs:xfs_log_cil_wait                               [Tracepoint event]
  xfs:xfs_log_force                                  [Tracepoint event]
  xfs:xfs_log_get_max_trans_res                      [Tracepoint event]
  xfs:xfs_log_grant_sleep                            [Tracepoint event]
  xfs:xfs_log_grant_wake                             [Tracepoint event]
  xfs:xfs_log_grant_wake_up                          [Tracepoint event]
  xfs:xfs_log_recover                                [Tracepoint event]
  xfs:xfs_log_recover_buf_cancel                     [Tracepoint event]
  xfs:xfs_log_recover_buf_cancel_add                 [Tracepoint event]
  xfs:xfs_log_recover_buf_cancel_ref_inc             [Tracepoint event]
  xfs:xfs_log_recover_buf_dquot_buf                  [Tracepoint event]
  xfs:xfs_log_recover_buf_inode_buf                  [Tracepoint event]
  xfs:xfs_log_recover_buf_not_cancel                 [Tracepoint event]
  xfs:xfs_log_recover_buf_recover                    [Tracepoint event]
  xfs:xfs_log_recover_buf_reg_buf                    [Tracepoint event]
  xfs:xfs_log_recover_buf_skip                       [Tracepoint event]
  xfs:xfs_log_recover_icreate_cancel                 [Tracepoint event]
  xfs:xfs_log_recover_icreate_recover                [Tracepoint event]
  xfs:xfs_log_recover_inode_cancel                   [Tracepoint event]
  xfs:xfs_log_recover_inode_recover                  [Tracepoint event]
  xfs:xfs_log_recover_inode_skip                     [Tracepoint event]
  xfs:xfs_log_recover_item_add                       [Tracepoint event]
  xfs:xfs_log_recover_item_add_cont                  [Tracepoint event]
  xfs:xfs_log_recover_item_recover                   [Tracepoint event]
  xfs:xfs_log_recover_item_reorder_head              [Tracepoint event]
  xfs:xfs_log_recover_item_reorder_tail              [Tracepoint event]
  xfs:xfs_log_recover_record                         [Tracepoint event]
  xfs:xfs_log_regrant                                [Tracepoint event]
  xfs:xfs_log_regrant_exit                           [Tracepoint event]
  xfs:xfs_log_reserve                                [Tracepoint event]
  xfs:xfs_log_reserve_exit                           [Tracepoint event]
  xfs:xfs_log_ticket_regrant                         [Tracepoint event]
  xfs:xfs_log_ticket_regrant_exit                    [Tracepoint event]
  xfs:xfs_log_ticket_regrant_sub                     [Tracepoint event]
  xfs:xfs_log_ticket_ungrant                         [Tracepoint event]
  xfs:xfs_log_ticket_ungrant_exit                    [Tracepoint event]
  xfs:xfs_log_ticket_ungrant_sub                     [Tracepoint event]
  xfs:xfs_log_umount_write                           [Tracepoint event]
  xfs:xfs_lookup                                     [Tracepoint event]
  xfs:xfs_map_blocks_alloc                           [Tracepoint event]
  xfs:xfs_map_blocks_found                           [Tracepoint event]
  xfs:xfs_pagecache_inval                            [Tracepoint event]
  xfs:xfs_perag_clear_inode_tag                      [Tracepoint event]
  xfs:xfs_perag_get                                  [Tracepoint event]
  xfs:xfs_perag_get_tag                              [Tracepoint event]
  xfs:xfs_perag_grab                                 [Tracepoint event]
  xfs:xfs_perag_grab_tag                             [Tracepoint event]
  xfs:xfs_perag_hold                                 [Tracepoint event]
  xfs:xfs_perag_put                                  [Tracepoint event]
  xfs:xfs_perag_rele                                 [Tracepoint event]
  xfs:xfs_perag_set_inode_tag                        [Tracepoint event]
  xfs:xfs_pwork_init                                 [Tracepoint event]
  xfs:xfs_quota_expiry_range                         [Tracepoint event]
  xfs:xfs_read_agf                                   [Tracepoint event]
  xfs:xfs_read_agi                                   [Tracepoint event]
  xfs:xfs_read_extent                                [Tracepoint event]
  xfs:xfs_readdir                                    [Tracepoint event]
  xfs:xfs_readlink                                   [Tracepoint event]
  xfs:xfs_refcount_adjust_cow_error                  [Tracepoint event]
  xfs:xfs_refcount_adjust_error                      [Tracepoint event]
  xfs:xfs_refcount_cow_decrease                      [Tracepoint event]
  xfs:xfs_refcount_cow_increase                      [Tracepoint event]
  xfs:xfs_refcount_decrease                          [Tracepoint event]
  xfs:xfs_refcount_defer                             [Tracepoint event]
  xfs:xfs_refcount_deferred                          [Tracepoint event]
  xfs:xfs_refcount_delete                            [Tracepoint event]
  xfs:xfs_refcount_delete_error                      [Tracepoint event]
  xfs:xfs_refcount_find_left_extent                  [Tracepoint event]
  xfs:xfs_refcount_find_left_extent_error            [Tracepoint event]
  xfs:xfs_refcount_find_right_extent                 [Tracepoint event]
  xfs:xfs_refcount_find_right_extent_error           [Tracepoint event]
  xfs:xfs_refcount_find_shared                       [Tracepoint event]
  xfs:xfs_refcount_find_shared_error                 [Tracepoint event]
  xfs:xfs_refcount_find_shared_result                [Tracepoint event]
  xfs:xfs_refcount_finish_one_leftover               [Tracepoint event]
  xfs:xfs_refcount_get                               [Tracepoint event]
  xfs:xfs_refcount_increase                          [Tracepoint event]
  xfs:xfs_refcount_insert                            [Tracepoint event]
  xfs:xfs_refcount_insert_error                      [Tracepoint event]
  xfs:xfs_refcount_lookup                            [Tracepoint event]
  xfs:xfs_refcount_merge_center_extents              [Tracepoint event]
  xfs:xfs_refcount_merge_center_extents_error        [Tracepoint event]
  xfs:xfs_refcount_merge_left_extent                 [Tracepoint event]
  xfs:xfs_refcount_merge_left_extent_error           [Tracepoint event]
  xfs:xfs_refcount_merge_right_extent                [Tracepoint event]
  xfs:xfs_refcount_merge_right_extent_error          [Tracepoint event]
  xfs:xfs_refcount_modify_extent                     [Tracepoint event]
  xfs:xfs_refcount_modify_extent_error               [Tracepoint event]
  xfs:xfs_refcount_recover_extent                    [Tracepoint event]
  xfs:xfs_refcount_split_extent                      [Tracepoint event]
  xfs:xfs_refcount_split_extent_error                [Tracepoint event]
  xfs:xfs_refcount_update                            [Tracepoint event]
  xfs:xfs_refcount_update_error                      [Tracepoint event]
  xfs:xfs_refcountbt_alloc_block                     [Tracepoint event]
  xfs:xfs_refcountbt_free_block                      [Tracepoint event]
  xfs:xfs_reflink_bounce_dio_write                   [Tracepoint event]
  xfs:xfs_reflink_cancel_cow                         [Tracepoint event]
  xfs:xfs_reflink_cancel_cow_range                   [Tracepoint event]
  xfs:xfs_reflink_cancel_cow_range_error             [Tracepoint event]
  xfs:xfs_reflink_compare_extents                    [Tracepoint event]
  xfs:xfs_reflink_compare_extents_error              [Tracepoint event]
  xfs:xfs_reflink_convert_cow                        [Tracepoint event]
  xfs:xfs_reflink_cow_enospc                         [Tracepoint event]
  xfs:xfs_reflink_cow_found                          [Tracepoint event]
  xfs:xfs_reflink_cow_remap_from                     [Tracepoint event]
  xfs:xfs_reflink_cow_remap_to                       [Tracepoint event]
  xfs:xfs_reflink_end_cow                            [Tracepoint event]
  xfs:xfs_reflink_end_cow_error                      [Tracepoint event]
  xfs:xfs_reflink_remap_blocks                       [Tracepoint event]
  xfs:xfs_reflink_remap_blocks_error                 [Tracepoint event]
  xfs:xfs_reflink_remap_extent_dest                  [Tracepoint event]
  xfs:xfs_reflink_remap_extent_error                 [Tracepoint event]
  xfs:xfs_reflink_remap_extent_src                   [Tracepoint event]
  xfs:xfs_reflink_remap_range                        [Tracepoint event]
  xfs:xfs_reflink_remap_range_error                  [Tracepoint event]
  xfs:xfs_reflink_set_inode_flag                     [Tracepoint event]
  xfs:xfs_reflink_set_inode_flag_error               [Tracepoint event]
  xfs:xfs_reflink_trim_around_shared                 [Tracepoint event]
  xfs:xfs_reflink_unset_inode_flag                   [Tracepoint event]
  xfs:xfs_reflink_unshare                            [Tracepoint event]
  xfs:xfs_reflink_unshare_error                      [Tracepoint event]
  xfs:xfs_reflink_update_inode_size                  [Tracepoint event]
  xfs:xfs_reflink_update_inode_size_error            [Tracepoint event]
  xfs:xfs_remove                                     [Tracepoint event]
  xfs:xfs_rename                                     [Tracepoint event]
  xfs:xfs_reset_dqcounts                             [Tracepoint event]
  xfs:xfs_rmap_convert                               [Tracepoint event]
  xfs:xfs_rmap_convert_done                          [Tracepoint event]
  xfs:xfs_rmap_convert_error                         [Tracepoint event]
  xfs:xfs_rmap_convert_state                         [Tracepoint event]
  xfs:xfs_rmap_defer                                 [Tracepoint event]
  xfs:xfs_rmap_deferred                              [Tracepoint event]
  xfs:xfs_rmap_delete                                [Tracepoint event]
  xfs:xfs_rmap_delete_error                          [Tracepoint event]
  xfs:xfs_rmap_find_left_neighbor_candidate          [Tracepoint event]
  xfs:xfs_rmap_find_left_neighbor_query              [Tracepoint event]
  xfs:xfs_rmap_find_left_neighbor_result             [Tracepoint event]
  xfs:xfs_rmap_find_right_neighbor_result            [Tracepoint event]
  xfs:xfs_rmap_insert                                [Tracepoint event]
  xfs:xfs_rmap_insert_error                          [Tracepoint event]
  xfs:xfs_rmap_lookup_le_range                       [Tracepoint event]
  xfs:xfs_rmap_lookup_le_range_candidate             [Tracepoint event]
  xfs:xfs_rmap_lookup_le_range_result                [Tracepoint event]
  xfs:xfs_rmap_map                                   [Tracepoint event]
  xfs:xfs_rmap_map_done                              [Tracepoint event]
  xfs:xfs_rmap_map_error                             [Tracepoint event]
  xfs:xfs_rmap_unmap                                 [Tracepoint event]
  xfs:xfs_rmap_unmap_done                            [Tracepoint event]
  xfs:xfs_rmap_unmap_error                           [Tracepoint event]
  xfs:xfs_rmap_update                                [Tracepoint event]
  xfs:xfs_rmap_update_error                          [Tracepoint event]
  xfs:xfs_rmapbt_alloc_block                         [Tracepoint event]
  xfs:xfs_rmapbt_free_block                          [Tracepoint event]
  xfs:xfs_rt_mark_healthy                            [Tracepoint event]
  xfs:xfs_rt_mark_sick                               [Tracepoint event]
  xfs:xfs_rt_unfixed_corruption                      [Tracepoint event]
  xfs:xfs_setattr                                    [Tracepoint event]
  xfs:xfs_setfilesize                                [Tracepoint event]
  xfs:xfs_swap_extent_after                          [Tracepoint event]
  xfs:xfs_swap_extent_before                         [Tracepoint event]
  xfs:xfs_swap_extent_rmap_error                     [Tracepoint event]
  xfs:xfs_swap_extent_rmap_remap                     [Tracepoint event]
  xfs:xfs_swap_extent_rmap_remap_piece               [Tracepoint event]
  xfs:xfs_symlink                                    [Tracepoint event]
  xfs:xfs_trans_add_item                             [Tracepoint event]
  xfs:xfs_trans_alloc                                [Tracepoint event]
  xfs:xfs_trans_apply_dquot_deltas                   [Tracepoint event]
  xfs:xfs_trans_apply_dquot_deltas_after             [Tracepoint event]
  xfs:xfs_trans_apply_dquot_deltas_before            [Tracepoint event]
  xfs:xfs_trans_bhold                                [Tracepoint event]
  xfs:xfs_trans_bhold_release                        [Tracepoint event]
  xfs:xfs_trans_binval                               [Tracepoint event]
  xfs:xfs_trans_bjoin                                [Tracepoint event]
  xfs:xfs_trans_brelse                               [Tracepoint event]
  xfs:xfs_trans_cancel                               [Tracepoint event]
  xfs:xfs_trans_commit                               [Tracepoint event]
  xfs:xfs_trans_commit_items                         [Tracepoint event]
  xfs:xfs_trans_dup                                  [Tracepoint event]
  xfs:xfs_trans_free                                 [Tracepoint event]
  xfs:xfs_trans_free_items                           [Tracepoint event]
  xfs:xfs_trans_get_buf                              [Tracepoint event]
  xfs:xfs_trans_get_buf_recur                        [Tracepoint event]
  xfs:xfs_trans_getsb                                [Tracepoint event]
  xfs:xfs_trans_getsb_recur                          [Tracepoint event]
  xfs:xfs_trans_log_buf                              [Tracepoint event]
  xfs:xfs_trans_mod_dquot                            [Tracepoint event]
  xfs:xfs_trans_mod_dquot_after                      [Tracepoint event]
  xfs:xfs_trans_mod_dquot_before                     [Tracepoint event]
  xfs:xfs_trans_read_buf                             [Tracepoint event]
  xfs:xfs_trans_read_buf_recur                       [Tracepoint event]
  xfs:xfs_trans_read_buf_shut                        [Tracepoint event]
  xfs:xfs_trans_resv_calc                            [Tracepoint event]
  xfs:xfs_trans_resv_calc_minlogsize                 [Tracepoint event]
  xfs:xfs_trans_roll                                 [Tracepoint event]
  xfs:xfs_unwritten_convert                          [Tracepoint event]
  xfs:xfs_update_time                                [Tracepoint event]
  xfs:xfs_vm_bmap                                    [Tracepoint event]
  xfs:xfs_wb_cow_iomap_invalid                       [Tracepoint event]
  xfs:xfs_wb_data_iomap_invalid                      [Tracepoint event]
  xfs:xfs_write_extent                               [Tracepoint event]
  xfs:xfs_zero_eof                                   [Tracepoint event]
  xfs:xfs_zero_file_space                            [Tracepoint event]
  xfs:xlog_iclog_activate                            [Tracepoint event]
  xfs:xlog_iclog_callback                            [Tracepoint event]
  xfs:xlog_iclog_callbacks_done                      [Tracepoint event]
  xfs:xlog_iclog_callbacks_start                     [Tracepoint event]
  xfs:xlog_iclog_clean                               [Tracepoint event]
  xfs:xlog_iclog_force                               [Tracepoint event]
  xfs:xlog_iclog_force_lsn                           [Tracepoint event]
  xfs:xlog_iclog_get_space                           [Tracepoint event]
  xfs:xlog_iclog_release                             [Tracepoint event]
  xfs:xlog_iclog_switch                              [Tracepoint event]
  xfs:xlog_iclog_sync                                [Tracepoint event]
  xfs:xlog_iclog_sync_done                           [Tracepoint event]
  xfs:xlog_iclog_syncing                             [Tracepoint event]
  xfs:xlog_iclog_wait_on                             [Tracepoint event]
  xfs:xlog_iclog_want_sync                           [Tracepoint event]
  xfs:xlog_iclog_write                               [Tracepoint event]
  xfs:xlog_intent_recovery_failed                    [Tracepoint event]
  xhci-hcd:xhci_add_endpoint                         [Tracepoint event]
  xhci-hcd:xhci_address_ctrl_ctx                     [Tracepoint event]
  xhci-hcd:xhci_address_ctx                          [Tracepoint event]
  xhci-hcd:xhci_alloc_dev                            [Tracepoint event]
  xhci-hcd:xhci_alloc_virt_device                    [Tracepoint event]
  xhci-hcd:xhci_configure_endpoint                   [Tracepoint event]
  xhci-hcd:xhci_configure_endpoint_ctrl_ctx          [Tracepoint event]
  xhci-hcd:xhci_dbc_alloc_request                    [Tracepoint event]
  xhci-hcd:xhci_dbc_free_request                     [Tracepoint event]
  xhci-hcd:xhci_dbc_gadget_ep_queue                  [Tracepoint event]
  xhci-hcd:xhci_dbc_giveback_request                 [Tracepoint event]
  xhci-hcd:xhci_dbc_handle_event                     [Tracepoint event]
  xhci-hcd:xhci_dbc_handle_transfer                  [Tracepoint event]
  xhci-hcd:xhci_dbc_queue_request                    [Tracepoint event]
  xhci-hcd:xhci_dbg_address                          [Tracepoint event]
  xhci-hcd:xhci_dbg_cancel_urb                       [Tracepoint event]
  xhci-hcd:xhci_dbg_context_change                   [Tracepoint event]
  xhci-hcd:xhci_dbg_init                             [Tracepoint event]
  xhci-hcd:xhci_dbg_quirks                           [Tracepoint event]
  xhci-hcd:xhci_dbg_reset_ep                         [Tracepoint event]
  xhci-hcd:xhci_dbg_ring_expansion                   [Tracepoint event]
  xhci-hcd:xhci_discover_or_reset_device             [Tracepoint event]
  xhci-hcd:xhci_free_dev                             [Tracepoint event]
  xhci-hcd:xhci_free_virt_device                     [Tracepoint event]
  xhci-hcd:xhci_get_port_status                      [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_addr_dev                  [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_config_ep                 [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_disable_slot              [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_reset_dev                 [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_reset_ep                  [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_set_deq                   [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_set_deq_ep                [Tracepoint event]
  xhci-hcd:xhci_handle_cmd_stop_ep                   [Tracepoint event]
  xhci-hcd:xhci_handle_command                       [Tracepoint event]
  xhci-hcd:xhci_handle_event                         [Tracepoint event]
  xhci-hcd:xhci_handle_port_status                   [Tracepoint event]
  xhci-hcd:xhci_handle_transfer                      [Tracepoint event]
  xhci-hcd:xhci_hub_status_data                      [Tracepoint event]
  xhci-hcd:xhci_inc_deq                              [Tracepoint event]
  xhci-hcd:xhci_inc_enq                              [Tracepoint event]
  xhci-hcd:xhci_queue_trb                            [Tracepoint event]
  xhci-hcd:xhci_ring_alloc                           [Tracepoint event]
  xhci-hcd:xhci_ring_ep_doorbell                     [Tracepoint event]
  xhci-hcd:xhci_ring_expansion                       [Tracepoint event]
  xhci-hcd:xhci_ring_free                            [Tracepoint event]
  xhci-hcd:xhci_ring_host_doorbell                   [Tracepoint event]
  xhci-hcd:xhci_setup_addressable_virt_device        [Tracepoint event]
  xhci-hcd:xhci_setup_device                         [Tracepoint event]
  xhci-hcd:xhci_setup_device_slot                    [Tracepoint event]
  xhci-hcd:xhci_stop_device                          [Tracepoint event]
  xhci-hcd:xhci_urb_dequeue                          [Tracepoint event]
  xhci-hcd:xhci_urb_enqueue                          [Tracepoint event]
  xhci-hcd:xhci_urb_giveback                         [Tracepoint event]
  sdt_libc:lll_futex_wake                            [SDT event]
  sdt_libc:lll_lock_wait_private                     [SDT event]
  sdt_libc:longjmp                                   [SDT event]
  sdt_libc:longjmp_target                            [SDT event]
  sdt_libc:memory_arena_new                          [SDT event]
  sdt_libc:memory_arena_retry                        [SDT event]
  sdt_libc:memory_arena_reuse                        [SDT event]
  sdt_libc:memory_arena_reuse_free_list              [SDT event]
  sdt_libc:memory_arena_reuse_wait                   [SDT event]
  sdt_libc:memory_calloc_retry                       [SDT event]
  sdt_libc:memory_heap_free                          [SDT event]
  sdt_libc:memory_heap_less                          [SDT event]
  sdt_libc:memory_heap_more                          [SDT event]
  sdt_libc:memory_heap_new                           [SDT event]
  sdt_libc:memory_malloc_retry                       [SDT event]
  sdt_libc:memory_mallopt                            [SDT event]
  sdt_libc:memory_mallopt_arena_max                  [SDT event]
  sdt_libc:memory_mallopt_arena_test                 [SDT event]
  sdt_libc:memory_mallopt_check_action               [SDT event]
  sdt_libc:memory_mallopt_free_dyn_thresholds        [SDT event]
  sdt_libc:memory_mallopt_mmap_max                   [SDT event]
  sdt_libc:memory_mallopt_mmap_threshold             [SDT event]
  sdt_libc:memory_mallopt_mxfast                     [SDT event]
  sdt_libc:memory_mallopt_perturb                    [SDT event]
  sdt_libc:memory_mallopt_top_pad                    [SDT event]
  sdt_libc:memory_mallopt_trim_threshold             [SDT event]
  sdt_libc:memory_memalign_retry                     [SDT event]
  sdt_libc:memory_pvalloc_retry                      [SDT event]
  sdt_libc:memory_realloc_retry                      [SDT event]
  sdt_libc:memory_sbrk_less                          [SDT event]
  sdt_libc:memory_sbrk_more                          [SDT event]
  sdt_libc:memory_valloc_retry                       [SDT event]
  sdt_libc:setjmp                                    [SDT event]
  sdt_libm:slowexp_p32                               [SDT event]
  sdt_libm:slowexp_p6                                [SDT event]
  sdt_libm:slowpow_p10                               [SDT event]
  sdt_libm:slowpow_p32                               [SDT event]
  sdt_libpthread:cond_broadcast                      [SDT event]
  sdt_libpthread:cond_destroy                        [SDT event]
  sdt_libpthread:cond_init                           [SDT event]
  sdt_libpthread:cond_signal                         [SDT event]
  sdt_libpthread:cond_timedwait                      [SDT event]
  sdt_libpthread:cond_wait                           [SDT event]
  sdt_libpthread:lll_futex_wake                      [SDT event]
  sdt_libpthread:lll_lock_wait                       [SDT event]
  sdt_libpthread:lll_lock_wait_private               [SDT event]
  sdt_libpthread:mutex_acquired                      [SDT event]
  sdt_libpthread:mutex_destroy                       [SDT event]
  sdt_libpthread:mutex_entry                         [SDT event]
  sdt_libpthread:mutex_init                          [SDT event]
  sdt_libpthread:mutex_release                       [SDT event]
  sdt_libpthread:mutex_timedlock_acquired            [SDT event]
  sdt_libpthread:mutex_timedlock_entry               [SDT event]
  sdt_libpthread:pthread_create                      [SDT event]
  sdt_libpthread:pthread_join                        [SDT event]
  sdt_libpthread:pthread_join_ret                    [SDT event]
  sdt_libpthread:pthread_start                       [SDT event]
  sdt_libpthread:rdlock_entry                        [SDT event]
  sdt_libpthread:rwlock_destroy                      [SDT event]
  sdt_libpthread:wrlock_entry                        [SDT event]
  sdt_libstdcxx:catch                                [SDT event]
  sdt_libstdcxx:rethrow                              [SDT event]
  sdt_libstdcxx:throw                                [SDT event]
  sdt_perf:test_target                               [SDT event]
  sdt_python:function__entry                         [SDT event]
  sdt_python:function__return                        [SDT event]
  sdt_rtld:init_complete                             [SDT event]
  sdt_rtld:init_start                                [SDT event]
  sdt_rtld:lll_futex_wake                            [SDT event]
  sdt_rtld:longjmp                                   [SDT event]
  sdt_rtld:longjmp_target                            [SDT event]
  sdt_rtld:map_complete                              [SDT event]
  sdt_rtld:map_failed                                [SDT event]
  sdt_rtld:map_start                                 [SDT event]
  sdt_rtld:reloc_complete                            [SDT event]
  sdt_rtld:reloc_start                               [SDT event]
  sdt_rtld:setjmp                                    [SDT event]
  sdt_rtld:unmap_complete                            [SDT event]
  sdt_rtld:unmap_start                               [SDT event]

Metric Groups:

DSB:
  DSB_Coverage
       [Fraction of Uops delivered by the DSB (aka Decoded Icache; or Uop Cache)]
FLOPS:
  GFLOPs
       [Giga Floating Point Operations Per Second]
Frontend:
  IFetch_Line_Utilization
       [Rough Estimation of fraction of fetched lines bytes that were likely consumed by program instructions]
Frontend_Bandwidth:
  DSB_Coverage
       [Fraction of Uops delivered by the DSB (aka Decoded Icache; or Uop Cache)]
Memory_BW:
  MLP
       [Memory-Level-Parallelism (average number of L1 miss demand load when there is at least 1 such miss)]
Memory_Bound:
  Load_Miss_Real_Latency
       [Actual Average Latency for L1 data-cache miss demand loads]
  MLP
       [Memory-Level-Parallelism (average number of L1 miss demand load when there is at least 1 such miss)]
Memory_Lat:
  Load_Miss_Real_Latency
       [Actual Average Latency for L1 data-cache miss demand loads]
Pipeline:
  CPI
       [Cycles Per Instruction (threaded)]
  ILP
       [Instruction-Level-Parallelism (average number of uops executed when there is at least 1 uop executed)]
  UPI
       [Uops Per Instruction]
Ports_Utilization:
  ILP
       [Instruction-Level-Parallelism (average number of uops executed when there is at least 1 uop executed)]
Power:
  C2_Pkg_Residency
       [C2 residency percent per package]
  C3_Core_Residency
       [C3 residency percent per core]
  C3_Pkg_Residency
       [C3 residency percent per package]
  C6_Core_Residency
       [C6 residency percent per core]
  C6_Pkg_Residency
       [C6 residency percent per package]
  C7_Core_Residency
       [C7 residency percent per core]
  C7_Pkg_Residency
       [C7 residency percent per package]
  Turbo_Utilization
       [Average Frequency Utilization relative nominal frequency]
SMT:
  CORE_CLKS
       [Core actual clocks when any thread is active on the physical core]
  CoreIPC
       [Instructions Per Cycle (per physical core)]
  SMT_2T_Utilization
       [Fraction of cycles where both hardware threads were active]
Summary:
  CLKS
       [Per-thread actual clocks when the logical processor is active. This is called 'Clockticks' in VTune]
  CPI
       [Cycles Per Instruction (threaded)]
  CPU_Utilization
       [Average CPU Utilization]
  GFLOPs
       [Giga Floating Point Operations Per Second]
  Instructions
       [Total number of retired Instructions]
  Kernel_Utilization
       [Fraction of cycles spent in Kernel mode]
  SMT_2T_Utilization
       [Fraction of cycles where both hardware threads were active]
TLB:
  Page_Walks_Utilization
       [Utilization of the core's Page Walker(s) serving STLB misses triggered by instruction/Load/Store accesses]
TopDownL1:
  IPC
       [Instructions Per Cycle (per logical thread)]
  SLOTS
       [Total issue-pipeline slots]
Unknown_Branches:
  BAClear_Cost
       [Average Branch Address Clear Cost (fraction of cycles)]
perf list -v

  arith.divider_active                       [cpu] [Cycles when divide unit is busy executing divide or square root operations. Accounts for integer and floating-point operations.]
  baclears.any                               [cpu] [Counts the number of times the front-end is resteered when it finds a branch instruction in a fetch line. This occurs for the first time a branch instruction is fetched or when the branch is not tracked by the BPU (Branch Prediction Unit) anymore.]
  br_inst_retired.all_branches               [cpu] [Counts all (macro) branch instructions retired. Errata: SKL091]
  br_inst_retired.all_branches_pebs          [cpu] [This is a precise version of BR_INST_RETIRED.ALL_BRANCHES that counts all (macro) branch instructions retired. (Uses PEBS) Errata: SKL091]
  br_inst_retired.cond                       [cpu] [This event counts conditional branch instructions retired. [This event is alias to BR_INST_RETIRED.CONDITIONAL] Errata: SKL091]
  br_inst_retired.cond_ntaken                [cpu] [This event counts not taken branch instructions retired. Errata: SKL091]
  br_inst_retired.conditional                [cpu] [This event counts conditional branch instructions retired. [This event is alias to BR_INST_RETIRED.COND] (Supports PEBS) Errata: SKL091]
  br_inst_retired.far_branch                 [cpu] [This event counts far branch instructions retired. (Supports PEBS) Errata: SKL091]
  br_inst_retired.near_call                  [cpu] [This event counts both direct and indirect near call instructions retired. (Supports PEBS) Errata: SKL091]
  br_inst_retired.near_return                [cpu] [This event counts return instructions retired. (Supports PEBS) Errata: SKL091]
  br_inst_retired.near_taken                 [cpu] [This event counts taken branch instructions retired. (Supports PEBS) Errata: SKL091]
  br_inst_retired.not_taken                  [cpu] [This event counts not taken branch instructions retired. Errata: SKL091]
  br_misp_exec.all_branches                  [cpu] [This event counts both taken and not taken speculative and retired mispredicted branch instructions.]
  br_misp_exec.indirect                      [cpu] [Counts speculatively miss-predicted indirect branches at execution time. Counts for indirect near CALL or JMP instructions (RET excluded).]
  br_misp_retired.all_branches               [cpu] [Counts all the retired branch instructions that were mispredicted by the processor. A branch misprediction occurs when the processor incorrectly predicts the destination of the branch.  When the misprediction is discovered at execution, all the instructions executed in the wrong (speculative) path must be discarded, and the processor must start fetching from the correct path.]
  br_misp_retired.all_branches_pebs          [cpu] [This is a precise version of BR_MISP_RETIRED.ALL_BRANCHES that counts all mispredicted macro branch instructions retired. (Uses PEBS)]
  br_misp_retired.conditional                [cpu] [This event counts mispredicted conditional branch instructions retired. (Supports PEBS)]
  br_misp_retired.near_call                  [cpu] [Counts both taken and not taken retired mispredicted direct and indirect near calls, including both register and memory indirect. (Supports PEBS)]
  br_misp_retired.near_taken                 [cpu] [Number of near branch instructions retired that were mispredicted and taken. (Supports PEBS)]
  br_misp_retired.ret                        [cpu] [This is a non-precise version (that is, does not use PEBS) of the event that counts mispredicted return instructions retired. (Supports PEBS)]
  core_power.lvl0_turbo_license              [cpu] [Core cycles where the core was running with power-delivery for baseline license level 0.  This includes non-AVX codes, SSE, AVX 128-bit, and low-current AVX 256-bit codes.]
  core_power.lvl1_turbo_license              [cpu] [Core cycles where the core was running with power-delivery for license level 1.  This includes high current AVX 256-bit instructions as well as low current AVX 512-bit instructions.]
  core_power.lvl2_turbo_license              [cpu] [Core cycles where the core was running with power-delivery for license level 2 (introduced in Skylake Server michroarchtecture).  This includes high current AVX 512-bit instructions.]
  core_power.throttle                        [cpu] [Core cycles the out-of-order engine was throttled due to a pending power level request.]
  core_snoop_response.rsp_ifwdfe             [cpu] [CORE_SNOOP_RESPONSE.RSP_IFWDFE]
  core_snoop_response.rsp_ifwdm              [cpu] [CORE_SNOOP_RESPONSE.RSP_IFWDM]
  core_snoop_response.rsp_ihitfse            [cpu] [CORE_SNOOP_RESPONSE.RSP_IHITFSE]
  core_snoop_response.rsp_ihiti              [cpu] [CORE_SNOOP_RESPONSE.RSP_IHITI]
  core_snoop_response.rsp_sfwdfe             [cpu] [CORE_SNOOP_RESPONSE.RSP_SFWDFE]
  core_snoop_response.rsp_sfwdm              [cpu] [CORE_SNOOP_RESPONSE.RSP_SFWDM]
  core_snoop_response.rsp_shitfse            [cpu] [CORE_SNOOP_RESPONSE.RSP_SHITFSE]
  cpu_clk_thread_unhalted.one_thread_active  [cpu] [Core crystal clock cycles when this thread is unhalted and the other thread is halted.]
  cpu_clk_thread_unhalted.ref_xclk           [cpu] [Core crystal clock cycles when the thread is unhalted.]
  cpu_clk_thread_unhalted.ref_xclk_any       [cpu] [Core crystal clock cycles when at least one thread on the physical core is unhalted.]
  cpu_clk_unhalted.one_thread_active         [cpu] [Core crystal clock cycles when this thread is unhalted and the other thread is halted.]
  cpu_clk_unhalted.ref_tsc                   [cpu] [Counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. Note: On all current platforms this event stops counting during 'throttling (TM)' states duty off periods the processor is 'halted'.  The counter update is done at a lower clock rate then the core clock the overflow status bit for this counter may appear 'sticky'.  After the counter has overflowed and software clears the overflow status bit and resets the counter to less than MAX. The reset value to the counter is not clocked immediately so the overflow status bit will flip 'high (1)' and generate another PMI (if enabled) after which the reset value gets clocked into the counter. Therefore, software will get the interrupt, read the overflow status bit '1 for bit 34 while the counter value is less than MAX. Software should ignore this case.]
  cpu_clk_unhalted.ref_xclk                  [cpu] [Core crystal clock cycles when the thread is unhalted.]
  cpu_clk_unhalted.ref_xclk_any              [cpu] [Core crystal clock cycles when at least one thread on the physical core is unhalted.]
  cpu_clk_unhalted.ring0_trans               [cpu] [Counts when the Current Privilege Level (CPL) transitions from ring 1, 2 or 3 to ring 0 (Kernel).]
  cpu_clk_unhalted.thread                    [cpu] [Counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events.]
  cpu_clk_unhalted.thread_any                [cpu] [Core cycles when at least one thread on the physical core is not in halt state.]
  cpu_clk_unhalted.thread_p                  [cpu] [This is an architectural event that counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling. For this reason, this event may have a changing ratio with regards to wall clock time.]
  cpu_clk_unhalted.thread_p_any              [cpu] [Core cycles when at least one thread on the physical core is not in halt state.]
  cycle_activity.cycles_l1d_miss             [cpu] [Cycles while L1 cache miss demand load is outstanding.]
  cycle_activity.cycles_l2_miss              [cpu] [Cycles while L2 cache miss demand load is outstanding.]
  cycle_activity.cycles_l3_miss              [cpu] [Cycles while L3 cache miss demand load is outstanding.]
  cycle_activity.cycles_mem_any              [cpu] [Cycles while memory subsystem has an outstanding load.]
  cycle_activity.stalls_l1d_miss             [cpu] [Execution stalls while L1 cache miss demand load is outstanding.]
  cycle_activity.stalls_l2_miss              [cpu] [Execution stalls while L2 cache miss demand load is outstanding.]
  cycle_activity.stalls_l3_miss              [cpu] [Execution stalls while L3 cache miss demand load is outstanding.]
  cycle_activity.stalls_mem_any              [cpu] [Execution stalls while memory subsystem has an outstanding load.]
  cycle_activity.stalls_total                [cpu] [Total execution stalls.]
  decode.lcp                                 [cpu] [Counts cycles that the Instruction Length decoder (ILD) stalls occurred due to dynamically changing prefix length of the decoded instruction (by operand size prefix instruction 0x66, address size prefix instruction 0x67 or REX.W for Intel64). Count is proportional to the number of prefixes in a 16B-line. This may result in a three-cycle penalty for each LCP (Length changing prefix) in a 16-byte chunk. [This event is alias to ILD_STALL.LCP]]
  dsb2mite_switches.count                    [cpu] [This event counts the number of the Decode Stream Buffer (DSB)-to-MITE switches including all misses because of missing Decode Stream Buffer (DSB) cache and u-arch forced misses.
Note: Invoking MITE requires two or three cycles delay.]
  dsb2mite_switches.penalty_cycles           [cpu] [Counts Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles. These cycles do not include uops routed through because of the switch itself, for example, when Instruction Decode Queue (IDQ) pre-allocation is unavailable, or Instruction Decode Queue (IDQ) is full. SBD-to-MITE switch true penalty cycles happen after the merge mux (MM) receives Decode Stream Buffer (DSB) Sync-indication until receiving the first MITE uop. MM is placed before Instruction Decode Queue (IDQ) to merge uops being fed from the MITE and Decode Stream Buffer (DSB) paths. Decode Stream Buffer (DSB) inserts the Sync-indication whenever a Decode Stream Buffer (DSB)-to-MITE switch occurs.Penalty: A Decode Stream Buffer (DSB) hit followed by a Decode Stream Buffer (DSB) miss can cost up to six cycles in which no uops are delivered to the IDQ. Most often, such switches from the Decode Stream Buffer (DSB) to the legacy pipeline cost 02 cycles.]
  dtlb_load_misses.miss_causes_a_walk        [cpu] [Counts demand data loads that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.]
  dtlb_load_misses.stlb_hit                  [cpu] [Counts loads that miss the DTLB (Data TLB) and hit the STLB (Second level TLB).]
  dtlb_load_misses.walk_active               [cpu] [Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a load.]
  dtlb_load_misses.walk_completed            [cpu] [Counts completed page walks  (all page sizes) caused by demand data loads. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_load_misses.walk_completed_1g         [cpu] [Counts completed page walks  (1G sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_load_misses.walk_completed_2m_4m      [cpu] [Counts completed page walks  (2M/4M sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_load_misses.walk_completed_4k         [cpu] [Counts completed page walks  (4K sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_load_misses.walk_pending              [cpu] [Counts 1 per cycle for each PMH that is busy with a page walk for a load. EPT page walk duration are excluded in Skylake microarchitecture.]
  dtlb_store_misses.miss_causes_a_walk       [cpu] [Counts demand data stores that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.]
  dtlb_store_misses.stlb_hit                 [cpu] [Stores that miss the DTLB (Data TLB) and hit the STLB (2nd Level TLB).]
  dtlb_store_misses.walk_active              [cpu] [Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a store.]
  dtlb_store_misses.walk_completed           [cpu] [Counts completed page walks  (all page sizes) caused by demand data stores. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_store_misses.walk_completed_1g        [cpu] [Counts completed page walks  (1G sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_store_misses.walk_completed_2m_4m     [cpu] [Counts completed page walks  (2M/4M sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_store_misses.walk_completed_4k        [cpu] [Counts completed page walks  (4K sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.]
  dtlb_store_misses.walk_pending             [cpu] [Counts 1 per cycle for each PMH that is busy with a page walk for a store. EPT page walk duration are excluded in Skylake microarchitecture.]
  ept.walk_pending                           [cpu] [Counts cycles for each PMH (Page Miss Handler) that is busy with an EPT (Extended Page Table) walk for any request type.]
  exe_activity.1_ports_util                  [cpu] [Counts cycles during which a total of 1 uop was executed on all ports and Reservation Station (RS) was not empty.]
  exe_activity.2_ports_util                  [cpu] [Counts cycles during which a total of 2 uops were executed on all ports and Reservation Station (RS) was not empty.]
  exe_activity.3_ports_util                  [cpu] [Cycles total of 3 uops are executed on all ports and Reservation Station (RS) was not empty.]
  exe_activity.4_ports_util                  [cpu] [Cycles total of 4 uops are executed on all ports and Reservation Station (RS) was not empty.]
  exe_activity.bound_on_stores               [cpu] [Cycles where the Store Buffer was full and no outstanding load.]
  exe_activity.exe_bound_0_ports             [cpu] [Counts cycles during which no uops were executed on all ports and Reservation Station (RS) was not empty.]
  fp_arith_inst_retired.128b_packed_double   [cpu] [Counts once for most SIMD 128-bit packed computational double precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 2 computation operations, one for each element.  Applies to packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.128b_packed_single   [cpu] [Counts once for most SIMD 128-bit packed computational single precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 4 computation operations, one for each element.  Applies to packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.256b_packed_double   [cpu] [Counts once for most SIMD 256-bit packed double computational precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 4 computation operations, one for each element.  Applies to packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.256b_packed_single   [cpu] [Counts once for most SIMD 256-bit packed single computational precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 8 computation operations, one for each element.  Applies to packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.4_flops              [cpu] [Number of SSE/AVX computational 128-bit packed single precision and 256-bit packed double precision  floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 2 or/and 4 computation operations, one for each element.  Applies to SSE* and AVX* packed single precision floating-point and packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX RCP14 RSQRT14 SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.512b_packed_double   [cpu] [Number of SSE/AVX computational 512-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 8 computation operations, one for each element.  Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT14 RCP14 FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.512b_packed_single   [cpu] [Number of SSE/AVX computational 512-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 16 computation operations, one for each element.  Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT14 RCP14 FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.8_flops              [cpu] [Number of SSE/AVX computational 256-bit packed single precision and 512-bit packed double precision  floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 8 computation operations, one for each element.  Applies to SSE* and AVX* packed single precision and double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RSQRT14 RCP RCP14 DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.scalar               [cpu] [Counts once for most SIMD scalar computational single precision and double precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 1 computational operation. Applies to SIMD scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.scalar_double        [cpu] [Counts once for most SIMD scalar computational double precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 1 computational operation. Applies to SIMD scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.scalar_single        [cpu] [Counts once for most SIMD scalar computational single precision floating-point instructions retired; some instructions will count twice as noted below.  Each count represents 1 computational operation. Applies to SIMD scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.]
  fp_arith_inst_retired.vector               [cpu] [Number of any Vector retired FP arithmetic instructions]
  fp_assist.any                              [cpu] [Counts cycles with any input and output SSE or x87 FP assist. If an input and output assist are detected on the same cycle the event increments by 1.]
  frontend_retired.any_dsb_miss              [cpu] [Counts retired Instructions that experienced DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. (Supports PEBS)]
  frontend_retired.dsb_miss                  [cpu] [Number of retired Instructions that experienced a critical DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. Critical means stalls were exposed to the back-end as a result of the DSB miss. (Supports PEBS)]
  frontend_retired.itlb_miss                 [cpu] [Counts retired Instructions that experienced iTLB (Instruction TLB) true miss. (Supports PEBS)]
  frontend_retired.l1i_miss                  [cpu] [Retired Instructions who experienced Instruction L1 Cache true miss. (Supports PEBS)]
  frontend_retired.l2_miss                   [cpu] [Retired Instructions who experienced Instruction L2 Cache true miss. (Supports PEBS)]
  frontend_retired.latency_ge_1              [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of at least 1 cycle which was not interrupted by a back-end stall. (Uses PEBS)]
  frontend_retired.latency_ge_128            [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_16             [cpu] [Counts retired instructions that are delivered to the back-end after a front-end stall of at least 16 cycles. During this period the front-end delivered no uops. (Supports PEBS)]
  frontend_retired.latency_ge_2              [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 2 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_256            [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_2_bubbles_ge_1 [cpu] [Counts retired instructions that are delivered to the back-end after the front-end had at least 1 bubble-slot for a period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while there was no RAT stall. (Supports PEBS)]
  frontend_retired.latency_ge_2_bubbles_ge_2 [cpu] [Retired instructions that are fetched after an interval where the front-end had at least 2 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_2_bubbles_ge_3 [cpu] [Retired instructions that are fetched after an interval where the front-end had at least 3 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_32             [cpu] [Counts retired instructions that are delivered to the back-end after a front-end stall of at least 32 cycles. During this period the front-end delivered no uops. (Supports PEBS)]
  frontend_retired.latency_ge_4              [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_512            [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_64             [cpu] [Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall. (Supports PEBS)]
  frontend_retired.latency_ge_8              [cpu] [Counts retired instructions that are delivered to the back-end after a front-end stall of at least 8 cycles. During this period the front-end delivered no uops. (Supports PEBS)]
  frontend_retired.stlb_miss                 [cpu] [Counts retired Instructions that experienced STLB (2nd level TLB) true miss. (Supports PEBS)]
  hle_retired.aborted                        [cpu] [Number of times HLE abort was triggered. (Supports PEBS)]
  hle_retired.aborted_events                 [cpu] [Number of times an HLE execution aborted due to unfriendly events (such as interrupts).]
  hle_retired.aborted_mem                    [cpu] [Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).]
  hle_retired.aborted_memtype                [cpu] [Number of times an HLE execution aborted due to incompatible memory type.]
  hle_retired.aborted_timer                  [cpu] [Number of times an HLE execution aborted due to hardware timer expiration.]
  hle_retired.aborted_unfriendly             [cpu] [Number of times an HLE execution aborted due to HLE-unfriendly instructions and certain unfriendly events (such as AD assists etc.).]
  hle_retired.commit                         [cpu] [Number of times HLE commit succeeded.]
  hle_retired.start                          [cpu] [Number of times we entered an HLE region. Does not count nested transactions.]
  hw_interrupts.received                     [cpu] [Counts the number of hardware interruptions received by the processor.]
  icache_16b.ifdata_stall                    [cpu] [Cycles where a code line fetch is stalled due to an L1 instruction cache miss. The legacy decode pipeline works at a 16 Byte granularity.]
  icache_64b.iftag_hit                       [cpu] [Instruction fetch tag lookups that hit in the instruction cache (L1I). Counts at 64-byte cache-line granularity.]
  icache_64b.iftag_miss                      [cpu] [Instruction fetch tag lookups that miss in the instruction cache (L1I). Counts at 64-byte cache-line granularity.]
  icache_64b.iftag_stall                     [cpu] [Cycles where a code fetch is stalled due to L1 instruction cache tag miss. [This event is alias to ICACHE_TAG.STALLS]]
  icache_tag.stalls                          [cpu] [Cycles where a code fetch is stalled due to L1 instruction cache tag miss. [This event is alias to ICACHE_64B.IFTAG_STALL]]
  idi_misc.wb_downgrade                      [cpu] [Counts number of cache lines that are dropped and not written back to L3 as they are deemed to be less likely to be reused shortly.]
  idi_misc.wb_upgrade                        [cpu] [Counts number of cache lines that are allocated and written back to L3 with the intention that they are more likely to be reused shortly.]
  idq.all_dsb_cycles_4_uops                  [cpu] [Counts the number of cycles 4 uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ. [This event is alias to IDQ.DSB_CYCLES_OK]]
  idq.all_dsb_cycles_any_uops                [cpu] [Counts the number of cycles uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ. [This event is alias to IDQ.DSB_CYCLES_ANY]]
  idq.all_mite_cycles_4_uops                 [cpu] [Counts the number of cycles 4 uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).]
  idq.all_mite_cycles_any_uops               [cpu] [Counts the number of cycles uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).]
  idq.dsb_cycles                             [cpu] [Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.]
  idq.dsb_cycles_any                         [cpu] [Counts the number of cycles uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ. [This event is alias to IDQ.ALL_DSB_CYCLES_ANY_UOPS]]
  idq.dsb_cycles_ok                          [cpu] [Counts the number of cycles 4 uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ. [This event is alias to IDQ.ALL_DSB_CYCLES_4_UOPS]]
  idq.dsb_uops                               [cpu] [Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.]
  idq.mite_cycles                            [cpu] [Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ.]
  idq.mite_uops                              [cpu] [Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).]
  idq.ms_cycles                              [cpu] [Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE.]
  idq.ms_dsb_cycles                          [cpu] [Counts cycles during which uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.]
  idq.ms_mite_uops                           [cpu] [Counts the number of uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.]
  idq.ms_switches                            [cpu] [Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.]
  idq.ms_uops                                [cpu] [Counts the total number of uops delivered by the Microcode Sequencer (MS). Any instruction over 4 uops will be delivered by the MS. Some instructions such as transcendentals may additionally generate uops from the MS.]
  idq_uops_not_delivered.core                [cpu] [Counts the number of uops not delivered to Resource Allocation Table (RAT) per thread adding 4  x when Resource Allocation Table (RAT) is not stalled and Instruction Decode Queue (IDQ) delivers x uops to Resource Allocation Table (RAT) (where x belongs to {0,1,2,3}). Counting does not cover cases when: a. IDQ-Resource Allocation Table (RAT) pipe serves the other thread. b. Resource Allocation Table (RAT) is stalled for the thread (including uop drops and clear BE conditions).  c. Instruction Decode Queue (IDQ) delivers four uops.]
  idq_uops_not_delivered.cycles_0_uops_deliv.core [cpu] [Counts, on the per-thread basis, cycles when no uops are delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core =4.]
  idq_uops_not_delivered.cycles_fe_was_ok    [cpu] [Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.]
  idq_uops_not_delivered.cycles_le_1_uop_deliv.core [cpu] [Counts, on the per-thread basis, cycles when less than 1 uop is delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core >= 3.]
  idq_uops_not_delivered.cycles_le_2_uop_deliv.core [cpu] [Cycles with less than 2 uops delivered by the front-end.]
  idq_uops_not_delivered.cycles_le_3_uop_deliv.core [cpu] [Cycles with less than 3 uops delivered by the front-end.]
  ild_stall.lcp                              [cpu] [Counts cycles that the Instruction Length decoder (ILD) stalls occurred due to dynamically changing prefix length of the decoded instruction (by operand size prefix instruction 0x66, address size prefix instruction 0x67 or REX.W for Intel64). Count is proportional to the number of prefixes in a 16B-line. This may result in a three-cycle penalty for each LCP (Length changing prefix) in a 16-byte chunk. [This event is alias to DECODE.LCP]]
  inst_decoded.decoders                      [cpu] [Number of decoders utilized in a cycle when the MITE (legacy decode pipeline) fetches instructions.]
  inst_retired.any                           [cpu] [Counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, Counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY is counted by a designated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. INST_RETIRED.ANY_P is counted by a programmable counter and it is an architectural performance event. Counting: Faulting executions of GETSEC/VM entry/VM Exit/MWait will not count as retired instructions.]
  inst_retired.any_p                         [cpu] [Counts the number of instructions (EOMs) retired. Counting covers macro-fused instructions individually (that is, increments by two). Errata: SKL091, SKL044]
  inst_retired.nop                           [cpu] [Number of all retired NOP instructions. (Supports PEBS) Errata: SKL091, SKL044]
  inst_retired.prec_dist                     [cpu] [A version of INST_RETIRED that allows for a more unbiased distribution of samples across instructions retired. It utilizes the Precise Distribution of Instructions Retired (PDIR) feature to mitigate some bias in how retired instructions get sampled. (Uses PEBS) Errata: SKL091, SKL044]
  inst_retired.total_cycles_ps               [cpu] [Number of cycles using an always true condition applied to  PEBS instructions retired event. (inst_ret< 16) (Uses PEBS) Errata: SKL091, SKL044]
  int_misc.clear_resteer_cycles              [cpu] [Cycles the issue-stage is waiting for front-end to fetch from resteered path following branch misprediction or machine clear events.]
  int_misc.clears_count                      [cpu] [Counts the number of speculative clears due to any type of branch misprediction or machine clears]
  int_misc.recovery_cycles                   [cpu] [Core cycles the Resource allocator was stalled due to recovery from an earlier branch misprediction or machine clear event.]
  int_misc.recovery_cycles_any               [cpu] [Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).]
  itlb.itlb_flush                            [cpu] [Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).]
  itlb_misses.miss_causes_a_walk             [cpu] [Counts page walks of any page size (4K/2M/4M/1G) caused by a code fetch. This implies it missed in the ITLB and further levels of TLB, but the walk need not have completed.]
  itlb_misses.stlb_hit                       [cpu] [Instruction fetch requests that miss the ITLB and hit the STLB.]
  itlb_misses.walk_active                    [cpu] [Cycles when at least one PMH is busy with a page walk for code (instruction fetch) request. EPT page walk duration are excluded in Skylake microarchitecture.]
  itlb_misses.walk_completed                 [cpu] [Counts completed page walks (all page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.]
  itlb_misses.walk_completed_1g              [cpu] [Counts completed page walks (1G page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.]
  itlb_misses.walk_completed_2m_4m           [cpu] [Counts completed page walks (2M/4M page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.]
  itlb_misses.walk_completed_4k              [cpu] [Counts completed page walks (4K page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.]
  itlb_misses.walk_pending                   [cpu] [Counts 1 per cycle for each PMH (Page Miss Handler) that is busy with a page walk for an instruction fetch request. EPT page walk duration are excluded in Skylake michroarchitecture.]
  l1d.replacement                            [cpu] [Counts L1D data line replacements including opportunistic replacements, and replacements that require stall-for-replace or block-for-replace.]
  l1d_pend_miss.fb_full                      [cpu] [Number of times a request needed a FB (Fill Buffer) entry but there was no entry available for it. A request includes cacheable/uncacheable demands that are load, store or SW prefetch instructions.]
  l1d_pend_miss.pending                      [cpu] [Counts duration of L1D miss outstanding, that is each cycle number of Fill Buffers (FB) outstanding required by Demand Reads. FB either is held by demand loads, or it is held by non-demand loads and gets hit at least once by demand. The valid outstanding interval is defined until the FB deallocation by one of the following ways: from FB allocation, if FB is allocated by demand from the demand Hit FB, if it is allocated by hardware or software prefetch.Note: In the L1D, a Demand Read contains cacheable or noncacheable demand loads, including ones causing cache-line splits and reads due to page walks resulted from any request type.]
  l1d_pend_miss.pending_cycles               [cpu] [Counts duration of L1D miss outstanding in cycles.]
  l1d_pend_miss.pending_cycles_any           [cpu] [Cycles with L1D load Misses outstanding from any thread on physical core.]
  l2_lines_in.all                            [cpu] [Counts the number of L2 cache lines filling the L2. Counting does not cover rejects.]
  l2_lines_out.non_silent                    [cpu] [Counts the number of lines that are evicted by L2 cache when triggered by an L2 cache fill. Those lines can be either in modified state or clean state. Modified lines may either be written back to L3 or directly written to memory and not allocated in L3.  Clean lines may either be allocated in L3 or dropped.]
  l2_lines_out.silent                        [cpu] [Counts the number of lines that are silently dropped by L2 cache when triggered by an L2 cache fill. These lines are typically in Shared state. A non-threaded event.]
  l2_lines_out.useless_hwpf                  [cpu] [Counts the number of lines that have been hardware prefetched but not used and now evicted by L2 cache]
  l2_lines_out.useless_pref                  [cpu] [This event is deprecated. Refer to new event L2_LINES_OUT.USELESS_HWPF]
  l2_rqsts.all_code_rd                       [cpu] [Counts the total number of L2 code requests.]
  l2_rqsts.all_demand_data_rd                [cpu] [Counts the number of demand Data Read requests (including requests from L1D hardware prefetchers). These loads may hit or miss L2 cache. Only non rejected loads are counted.]
  l2_rqsts.all_demand_miss                   [cpu] [Demand requests that miss L2 cache.]
  l2_rqsts.all_demand_references             [cpu] [Demand requests to L2 cache.]
  l2_rqsts.all_pf                            [cpu] [Counts the total number of requests from the L2 hardware prefetchers.]
  l2_rqsts.all_rfo                           [cpu] [Counts the total number of RFO (read for ownership) requests to L2 cache. L2 RFO requests include both L1D demand RFO misses as well as L1D RFO prefetches.]
  l2_rqsts.code_rd_hit                       [cpu] [Counts L2 cache hits when fetching instructions, code reads.]
  l2_rqsts.code_rd_miss                      [cpu] [Counts L2 cache misses when fetching instructions.]
  l2_rqsts.demand_data_rd_hit                [cpu] [Counts the number of demand Data Read requests, initiated by load instructions, that hit L2 cache]
  l2_rqsts.demand_data_rd_miss               [cpu] [Counts the number of demand Data Read requests that miss L2 cache. Only not rejected loads are counted.]
  l2_rqsts.miss                              [cpu] [All requests that miss L2 cache.]
  l2_rqsts.pf_hit                            [cpu] [Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that hit L2 cache.]
  l2_rqsts.pf_miss                           [cpu] [Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that miss L2 cache.]
  l2_rqsts.references                        [cpu] [All L2 requests.]
  l2_rqsts.rfo_hit                           [cpu] [Counts the RFO (Read-for-Ownership) requests that hit L2 cache.]
  l2_rqsts.rfo_miss                          [cpu] [Counts the RFO (Read-for-Ownership) requests that miss L2 cache.]
  l2_trans.l2_wb                             [cpu] [Counts L2 writebacks that access L2 cache.]
  ld_blocks.no_sr                            [cpu] [The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.]
  ld_blocks.store_forward                    [cpu] [Counts the number of times where store forwarding was prevented for a load operation. The most common case is a load blocked due to the address of memory access (partially) overlapping with a preceding uncompleted store. Note: See the table of not supported store forwards in the Optimization Guide.]
  ld_blocks_partial.address_alias            [cpu] [Counts false dependencies in MOB when the partial comparison upon loose net check and dependency was resolved by the Enhanced Loose net mechanism. This may not result in high performance penalties. Loose net checks can fail when loads and stores are 4k aliased.]
  load_hit_pre.sw_pf                         [cpu] [Counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the software prefetch. It can also be incremented by some lock instructions. So it should only be used with profiling so that the locks can be excluded by ASM (Assembly File) inspection of the nearby instructions.]
  longest_lat_cache.miss                     [cpu] [Counts core-originated cacheable requests that miss the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2. It does not include all misses to the L3. Errata: SKL057]
  longest_lat_cache.reference                [cpu] [Counts core-originated cacheable requests to the  L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2.  It does not include all accesses to the L3. Errata: SKL057]
  lsd.cycles_4_uops                          [cpu] [Counts the cycles when 4 uops are delivered by the LSD (Loop-stream detector). [This event is alias to LSD.CYCLES_OK]]
  lsd.cycles_active                          [cpu] [Counts the cycles when at least one uop is delivered by the LSD (Loop-stream detector).]
  lsd.cycles_ok                              [cpu] [Counts the cycles when 4 uops are delivered by the LSD (Loop-stream detector). [This event is alias to LSD.CYCLES_4_UOPS]]
  lsd.uops                                   [cpu] [Number of uops delivered to the back-end by the LSD(Loop Stream Detector).]
  machine_clears.count                       [cpu] [Number of machine clears (nukes) of any type.]
  machine_clears.memory_ordering             [cpu] [Counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from one of the following:a. memory disambiguation,b. external snoop, orc. cross SMT-HW-thread snoop (stores) hitting load buffer. Errata: SKL089]
  machine_clears.smc                         [cpu] [Counts self-modifying code (SMC) detected, which causes a machine clear.]
  mem_inst_retired.all_loads                 [cpu] [Counts all retired load instructions. This event accounts for SW prefetch instructions of PREFETCHNTA or PREFETCHT0/1/2 or PREFETCHW. (Supports PEBS)]
  mem_inst_retired.all_stores                [cpu] [Counts all retired store instructions. (Supports PEBS)]
  mem_inst_retired.any                       [cpu] [Counts all retired memory instructions - loads and stores. (Supports PEBS)]
  mem_inst_retired.lock_loads                [cpu] [Retired load instructions with locked access. (Supports PEBS)]
  mem_inst_retired.split_loads               [cpu] [Counts retired load instructions that split across a cacheline boundary. (Supports PEBS)]
  mem_inst_retired.split_stores              [cpu] [Counts retired store instructions that split across a cacheline boundary. (Supports PEBS)]
  mem_inst_retired.stlb_miss_loads           [cpu] [Number of retired load instructions that (start a) miss in the 2nd-level TLB (STLB). (Supports PEBS)]
  mem_inst_retired.stlb_miss_stores          [cpu] [Number of retired store instructions that (start a) miss in the 2nd-level TLB (STLB). (Supports PEBS)]
  mem_load_l3_hit_retired.xsnp_hit           [cpu] [Retired load instructions which data sources were L3 and cross-core snoop hits in on-pkg core cache. (Supports PEBS)]
  mem_load_l3_hit_retired.xsnp_hitm          [cpu] [Retired load instructions which data sources were HitM responses from shared L3. (Supports PEBS)]
  mem_load_l3_hit_retired.xsnp_miss          [cpu] [Retired load instructions which data sources were L3 hit and cross-core snoop missed in on-pkg core cache. (Supports PEBS)]
  mem_load_l3_hit_retired.xsnp_none          [cpu] [Retired load instructions which data sources were hits in L3 without snoops required. (Supports PEBS)]
  mem_load_l3_miss_retired.local_dram        [cpu] [Retired load instructions which data sources missed L3 but serviced from local DRAM. (Supports PEBS)]
  mem_load_l3_miss_retired.remote_dram       [cpu] [Retired load instructions which data sources missed L3 but serviced from remote dram (Supports PEBS)]
  mem_load_l3_miss_retired.remote_fwd        [cpu] [Retired load instructions whose data sources was forwarded from a remote cache. (Supports PEBS)]
  mem_load_l3_miss_retired.remote_hitm       [cpu] [Retired load instructions whose data sources was remote HITM. (Supports PEBS)]
  mem_load_misc_retired.uc                   [cpu] [Retired instructions with at least 1 uncacheable load or lock. (Supports PEBS)]
  mem_load_retired.fb_hit                    [cpu] [Counts retired load instructions with at least one uop was load missed in L1 but hit FB (Fill Buffers) due to preceding miss to the same cache line with data not ready. (Supports PEBS)]
  mem_load_retired.l1_hit                    [cpu] [Counts retired load instructions with at least one uop that hit in the L1 data cache. This event includes all SW prefetches and lock instructions regardless of the data source. (Supports PEBS)]
  mem_load_retired.l1_miss                   [cpu] [Counts retired load instructions with at least one uop that missed in the L1 cache. (Supports PEBS)]
  mem_load_retired.l2_hit                    [cpu] [Retired load instructions with L2 cache hits as data sources. (Supports PEBS)]
  mem_load_retired.l2_miss                   [cpu] [Retired load instructions missed L2 cache as data sources. (Supports PEBS)]
  mem_load_retired.l3_hit                    [cpu] [Counts retired load instructions with at least one uop that hit in the L3 cache. (Supports PEBS)]
  mem_load_retired.l3_miss                   [cpu] [Counts retired load instructions with at least one uop that missed in the L3 cache. (Supports PEBS)]
  mem_trans_retired.load_latency_gt_128      [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 128 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_16       [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 16 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_256      [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 256 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_32       [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 32 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_4        [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 4 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_512      [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 512 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_64       [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 64 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  mem_trans_retired.load_latency_gt_8        [cpu] [Counts randomly selected loads when the latency from first dispatch to completion is greater than 8 cycles.  Reported latency may be longer than just the memory latency. (Uses PEBS)]
  memory_disambiguation.history_reset        [cpu] [MEMORY_DISAMBIGUATION.HISTORY_RESET]
  offcore_requests.all_data_rd               [cpu] [Counts the demand and prefetch data reads. All Core Data Reads include cacheable 'Demands' and L2 prefetchers (not L3 prefetchers). Counting also covers reads due to page walks resulted from any request type.]
  offcore_requests.all_requests              [cpu] [Counts memory transactions reached the super queue including requests initiated by the core, all L3 prefetches, page walks, etc..]
  offcore_requests.demand_code_rd            [cpu] [Counts both cacheable and non-cacheable code read requests.]
  offcore_requests.demand_data_rd            [cpu] [Counts the Demand Data Read requests sent to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average latency in the uncore.]
  offcore_requests.demand_rfo                [cpu] [Counts the demand RFO (read for ownership) requests including regular RFOs, locks, ItoM.]
  offcore_requests.l3_miss_demand_data_rd    [cpu] [Demand Data Read requests who miss L3 cache.]
  offcore_requests_buffer.sq_full            [cpu] [Counts the number of cases when the offcore requests buffer cannot take more entries for the core. This can happen when the superqueue does not contain eligible entries, or when L1D writeback pending FIFO requests is full.Note: Writeback pending FIFO has six entries.]
  offcore_requests_outstanding.all_data_rd   [cpu] [Counts the number of offcore outstanding cacheable Core Data Read transactions in the super queue every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.cycles_with_data_rd [cpu] [Counts cycles when offcore outstanding cacheable Core Data Read transactions are present in the super queue. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.cycles_with_demand_code_rd [cpu] [Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.cycles_with_demand_data_rd [cpu] [Counts cycles when offcore outstanding Demand Data Read transactions are present in the super queue (SQ). A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation).]
  offcore_requests_outstanding.cycles_with_demand_rfo [cpu] [Counts the number of offcore outstanding demand rfo Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.cycles_with_l3_miss_demand_data_rd [cpu] [Cycles with at least 1 Demand Data Read requests who miss L3 cache in the superQ.]
  offcore_requests_outstanding.demand_code_rd [cpu] [Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.demand_data_rd [cpu] [Counts the number of offcore outstanding Demand Data Read transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor. See the corresponding Umask under OFFCORE_REQUESTS.Note: A prefetch promoted to Demand is counted from the promotion point.]
  offcore_requests_outstanding.demand_data_rd_ge_6 [cpu] [Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.]
  offcore_requests_outstanding.demand_rfo    [cpu] [Counts the number of offcore outstanding RFO (store) transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.]
  offcore_requests_outstanding.l3_miss_demand_data_rd [cpu] [Counts number of Offcore outstanding Demand Data Read requests that miss L3 cache in the superQ every cycle.]
  offcore_requests_outstanding.l3_miss_demand_data_rd_ge_6 [cpu] [Cycles with at least 6 Demand Data Read requests that miss L3 cache in the superQ.]
  offcore_response                           [cpu] [Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.]
  offcore_response.all_data_rd.any_response  [cpu] [Counts all demand & prefetch data reads that have any response type.]
  offcore_response.all_data_rd.l3_hit.any_snoop [cpu] [Counts all demand & prefetch data reads that hit in the L3.]
  offcore_response.all_data_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_data_rd.l3_hit.hitm_other_core [cpu] [Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_data_rd.l3_hit.no_snoop_needed [cpu] [Counts all demand & prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.all_data_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.all_data_rd.l3_miss.any_snoop [cpu] [Counts all demand & prefetch data reads that miss in the L3.]
  offcore_response.all_data_rd.l3_miss.remote_hit_forward [cpu] [Counts all demand & prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.all_data_rd.l3_miss.remote_hitm [cpu] [Counts all demand & prefetch data reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.all_data_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch data reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.all_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch data reads that miss the L3 and the data is returned from local dram.]
  offcore_response.all_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch data reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.all_pf_data_rd.any_response [cpu] [Counts all prefetch data reads that have any response type.]
  offcore_response.all_pf_data_rd.l3_hit.any_snoop [cpu] [Counts all prefetch data reads that hit in the L3.]
  offcore_response.all_pf_data_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_pf_data_rd.l3_hit.hitm_other_core [cpu] [Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_pf_data_rd.l3_hit.no_snoop_needed [cpu] [Counts all prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.all_pf_data_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.all_pf_data_rd.l3_miss.any_snoop [cpu] [Counts all prefetch data reads that miss in the L3.]
  offcore_response.all_pf_data_rd.l3_miss.remote_hit_forward [cpu] [Counts all prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.all_pf_data_rd.l3_miss.remote_hitm [cpu] [Counts all prefetch data reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.all_pf_data_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all prefetch data reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.all_pf_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch data reads that miss the L3 and the data is returned from local dram.]
  offcore_response.all_pf_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch data reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.all_pf_rfo.any_response   [cpu] [Counts prefetch RFOs that have any response type.]
  offcore_response.all_pf_rfo.l3_hit.any_snoop [cpu] [Counts prefetch RFOs that hit in the L3.]
  offcore_response.all_pf_rfo.l3_hit.hit_other_core_no_fwd [cpu] [Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_pf_rfo.l3_hit.hitm_other_core [cpu] [Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_pf_rfo.l3_hit.no_snoop_needed [cpu] [Counts prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.all_pf_rfo.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.all_pf_rfo.l3_miss.any_snoop [cpu] [Counts prefetch RFOs that miss in the L3.]
  offcore_response.all_pf_rfo.l3_miss.remote_hit_forward [cpu] [Counts prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.all_pf_rfo.l3_miss.remote_hitm [cpu] [Counts prefetch RFOs that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.all_pf_rfo.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts prefetch RFOs that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.all_pf_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts prefetch RFOs that miss the L3 and the data is returned from local dram.]
  offcore_response.all_pf_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts prefetch RFOs that miss the L3 and the data is returned from remote dram.]
  offcore_response.all_rfo.any_response      [cpu] [Counts all demand & prefetch RFOs that have any response type.]
  offcore_response.all_rfo.l3_hit.any_snoop  [cpu] [Counts all demand & prefetch RFOs that hit in the L3.]
  offcore_response.all_rfo.l3_hit.hit_other_core_no_fwd [cpu] [Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_rfo.l3_hit.hitm_other_core [cpu] [Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.all_rfo.l3_hit.no_snoop_needed [cpu] [Counts all demand & prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.all_rfo.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.ALL_RFO.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.all_rfo.l3_miss.any_snoop [cpu] [Counts all demand & prefetch RFOs that miss in the L3.]
  offcore_response.all_rfo.l3_miss.remote_hit_forward [cpu] [Counts all demand & prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.all_rfo.l3_miss.remote_hitm [cpu] [Counts all demand & prefetch RFOs that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.all_rfo.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.all_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local dram.]
  offcore_response.all_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand & prefetch RFOs that miss the L3 and the data is returned from remote dram.]
  offcore_response.demand_code_rd.any_response [cpu] [Counts all demand code reads that have any response type.]
  offcore_response.demand_code_rd.l3_hit.any_snoop [cpu] [Counts all demand code reads that hit in the L3.]
  offcore_response.demand_code_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_code_rd.l3_hit.hitm_other_core [cpu] [Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_code_rd.l3_hit.no_snoop_needed [cpu] [Counts all demand code reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.demand_code_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.demand_code_rd.l3_miss.any_snoop [cpu] [Counts all demand code reads that miss in the L3.]
  offcore_response.demand_code_rd.l3_miss.remote_hit_forward [cpu] [Counts all demand code reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.demand_code_rd.l3_miss.remote_hitm [cpu] [Counts all demand code reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.demand_code_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all demand code reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.demand_code_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand code reads that miss the L3 and the data is returned from local dram.]
  offcore_response.demand_code_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand code reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.demand_data_rd.any_response [cpu] [Counts demand data reads that have any response type.]
  offcore_response.demand_data_rd.l3_hit.any_snoop [cpu] [Counts demand data reads that hit in the L3.]
  offcore_response.demand_data_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_data_rd.l3_hit.hitm_other_core [cpu] [Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_data_rd.l3_hit.no_snoop_needed [cpu] [Counts demand data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.demand_data_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.demand_data_rd.l3_miss.any_snoop [cpu] [Counts demand data reads that miss in the L3.]
  offcore_response.demand_data_rd.l3_miss.remote_hit_forward [cpu] [Counts demand data reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.demand_data_rd.l3_miss.remote_hitm [cpu] [Counts demand data reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.demand_data_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts demand data reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.demand_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts demand data reads that miss the L3 and the data is returned from local dram.]
  offcore_response.demand_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts demand data reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.demand_rfo.any_response   [cpu] [Counts all demand data writes (RFOs) that have any response type.]
  offcore_response.demand_rfo.l3_hit.any_snoop [cpu] [Counts all demand data writes (RFOs) that hit in the L3.]
  offcore_response.demand_rfo.l3_hit.hit_other_core_no_fwd [cpu] [Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_rfo.l3_hit.hitm_other_core [cpu] [Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.demand_rfo.l3_hit.no_snoop_needed [cpu] [Counts all demand data writes (RFOs) that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.demand_rfo.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.demand_rfo.l3_miss.any_snoop [cpu] [Counts all demand data writes (RFOs) that miss in the L3.]
  offcore_response.demand_rfo.l3_miss.remote_hit_forward [cpu] [Counts all demand data writes (RFOs) that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.demand_rfo.l3_miss.remote_hitm [cpu] [Counts all demand data writes (RFOs) that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.demand_rfo.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.demand_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local dram.]
  offcore_response.demand_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all demand data writes (RFOs) that miss the L3 and the data is returned from remote dram.]
  offcore_response.pf_l1d_and_sw.any_response [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that have any response type.]
  offcore_response.pf_l1d_and_sw.l3_hit.any_snoop [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3.]
  offcore_response.pf_l1d_and_sw.l3_hit.hit_other_core_no_fwd [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l1d_and_sw.l3_hit.hitm_other_core [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l1d_and_sw.l3_hit.no_snoop_needed [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.pf_l1d_and_sw.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.pf_l1d_and_sw.l3_miss.any_snoop [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss in the L3.]
  offcore_response.pf_l1d_and_sw.l3_miss.remote_hit_forward [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.pf_l1d_and_sw.l3_miss.remote_hitm [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.pf_l1d_and_sw.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.pf_l1d_and_sw.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local dram.]
  offcore_response.pf_l1d_and_sw.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from remote dram.]
  offcore_response.pf_l2_data_rd.any_response [cpu] [Counts prefetch (that bring data to L2) data reads that have any response type.]
  offcore_response.pf_l2_data_rd.l3_hit.any_snoop [cpu] [Counts prefetch (that bring data to L2) data reads that hit in the L3.]
  offcore_response.pf_l2_data_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l2_data_rd.l3_hit.hitm_other_core [cpu] [Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l2_data_rd.l3_hit.no_snoop_needed [cpu] [Counts prefetch (that bring data to L2) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.pf_l2_data_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.pf_l2_data_rd.l3_miss.any_snoop [cpu] [Counts prefetch (that bring data to L2) data reads that miss in the L3.]
  offcore_response.pf_l2_data_rd.l3_miss.remote_hit_forward [cpu] [Counts prefetch (that bring data to L2) data reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.pf_l2_data_rd.l3_miss.remote_hitm [cpu] [Counts prefetch (that bring data to L2) data reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.pf_l2_data_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.pf_l2_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local dram.]
  offcore_response.pf_l2_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.pf_l2_rfo.any_response    [cpu] [Counts all prefetch (that bring data to L2) RFOs that have any response type.]
  offcore_response.pf_l2_rfo.l3_hit.any_snoop [cpu] [Counts all prefetch (that bring data to L2) RFOs that hit in the L3.]
  offcore_response.pf_l2_rfo.l3_hit.hit_other_core_no_fwd [cpu] [Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l2_rfo.l3_hit.hitm_other_core [cpu] [Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l2_rfo.l3_hit.no_snoop_needed [cpu] [Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.pf_l2_rfo.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.pf_l2_rfo.l3_miss.any_snoop [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss in the L3.]
  offcore_response.pf_l2_rfo.l3_miss.remote_hit_forward [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.pf_l2_rfo.l3_miss.remote_hitm [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.pf_l2_rfo.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.pf_l2_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local dram.]
  offcore_response.pf_l2_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from remote dram.]
  offcore_response.pf_l3_data_rd.any_response [cpu] [Counts all prefetch (that bring data to LLC only) data reads that have any response type.]
  offcore_response.pf_l3_data_rd.l3_hit.any_snoop [cpu] [Counts all prefetch (that bring data to LLC only) data reads that hit in the L3.]
  offcore_response.pf_l3_data_rd.l3_hit.hit_other_core_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l3_data_rd.l3_hit.hitm_other_core [cpu] [Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l3_data_rd.l3_hit.no_snoop_needed [cpu] [Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.pf_l3_data_rd.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.pf_l3_data_rd.l3_miss.any_snoop [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss in the L3.]
  offcore_response.pf_l3_data_rd.l3_miss.remote_hit_forward [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.pf_l3_data_rd.l3_miss.remote_hitm [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.pf_l3_data_rd.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.pf_l3_data_rd.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local dram.]
  offcore_response.pf_l3_data_rd.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from remote dram.]
  offcore_response.pf_l3_rfo.any_response    [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that have any response type.]
  offcore_response.pf_l3_rfo.l3_hit.any_snoop [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3.]
  offcore_response.pf_l3_rfo.l3_hit.hit_other_core_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l3_rfo.l3_hit.hitm_other_core [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.]
  offcore_response.pf_l3_rfo.l3_hit.no_snoop_needed [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.]
  offcore_response.pf_l3_rfo.l3_hit.snoop_hit_with_fwd [cpu] [OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.SNOOP_HIT_WITH_FWD]
  offcore_response.pf_l3_rfo.l3_miss.any_snoop [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss in the L3.]
  offcore_response.pf_l3_rfo.l3_miss.remote_hit_forward [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and clean or shared data is transferred from remote cache.]
  offcore_response.pf_l3_rfo.l3_miss.remote_hitm [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the modified data is transferred from remote cache.]
  offcore_response.pf_l3_rfo.l3_miss.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local or remote dram.]
  offcore_response.pf_l3_rfo.l3_miss_local_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local dram.]
  offcore_response.pf_l3_rfo.l3_miss_remote_dram.snoop_miss_or_no_fwd [cpu] [Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from remote dram.]
  other_assists.any                          [cpu] [Number of times a microcode assist is invoked by HW other than FP-assist. Examples include AD (page Access Dirty) and AVX* related assists.]
  partial_rat_stalls.scoreboard              [cpu] [This event counts cycles during which the microcode scoreboard stalls happen.]
  resource_stalls.any                        [cpu] [Counts resource-related stall cycles.]
  resource_stalls.sb                         [cpu] [Counts allocation stall cycles caused by the store buffer (SB) being full. This counts cycles that the pipeline back-end blocked uop delivery from the front-end.]
  rob_misc_events.lbr_inserts                [cpu] [Increments when an entry is added to the Last Branch Record (LBR) array (or removed from the array in case of RETURNs in call stack mode). The event requires LBR enable via IA32_DEBUGCTL MSR and branch type selection via MSR_LBR_SELECT.]
  rob_misc_events.pause_inst                 [cpu] [Number of retired PAUSE instructions (that do not end up with a VMExit to the VMM; TSX aborted Instructions may be counted). This event is not supported on first SKL and KBL products.]
  rs_events.empty_cycles                     [cpu] [Counts cycles during which the reservation station (RS) is empty for the thread.; Note: In ST-mode, not active thread should drive 0. This is usually caused by severely costly branch mispredictions, or allocator/FE issues.]
  rs_events.empty_end                        [cpu] [Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate front-end Latency Bound issues.]
  rtm_retired.aborted                        [cpu] [Number of times RTM abort was triggered. (Supports PEBS)]
  rtm_retired.aborted_events                 [cpu] [Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt).]
  rtm_retired.aborted_mem                    [cpu] [Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts).]
  rtm_retired.aborted_memtype                [cpu] [Number of times an RTM execution aborted due to incompatible memory type.]
  rtm_retired.aborted_timer                  [cpu] [Number of times an RTM execution aborted due to uncommon conditions.]
  rtm_retired.aborted_unfriendly             [cpu] [Number of times an RTM execution aborted due to HLE-unfriendly instructions.]
  rtm_retired.commit                         [cpu] [Number of times RTM commit succeeded.]
  rtm_retired.start                          [cpu] [Number of times we entered an RTM region. Does not count nested transactions.]
  sq_misc.split_lock                         [cpu] [Counts the number of cache line split locks sent to the uncore.]
  sw_prefetch_access.nta                     [cpu] [Number of PREFETCHNTA instructions executed.]
  sw_prefetch_access.prefetchw               [cpu] [Number of PREFETCHW instructions executed.]
  sw_prefetch_access.t0                      [cpu] [Number of PREFETCHT0 instructions executed.]
  sw_prefetch_access.t1_t2                   [cpu] [Number of PREFETCHT1 or PREFETCHT2 instructions executed.]
  tlb_flush.dtlb_thread                      [cpu] [Counts the number of DTLB flush attempts of the thread-specific entries.]
  tlb_flush.stlb_any                         [cpu] [Counts the number of any STLB flush attempts (such as entire, VPID, PCID, InvPage, CR3 write, etc.).]
  tx_exec.misc1                              [cpu] [Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.]
  tx_exec.misc2                              [cpu] [Unfriendly TSX abort triggered by a vzeroupper instruction.]
  tx_exec.misc3                              [cpu] [Unfriendly TSX abort triggered by a nest count that is too deep.]
  tx_exec.misc4                              [cpu] [RTM region detected inside HLE.]
  tx_exec.misc5                              [cpu] [Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region.]
  tx_mem.abort_capacity                      [cpu] [Number of times a transactional abort was signaled due to a data capacity limitation for transactional reads or writes.]
  tx_mem.abort_conflict                      [cpu] [Number of times a TSX line had a cache conflict.]
  tx_mem.abort_hle_elision_buffer_mismatch   [cpu] [Number of times a TSX Abort was triggered due to release/commit but data and address mismatch.]
  tx_mem.abort_hle_elision_buffer_not_empty  [cpu] [Number of times a TSX Abort was triggered due to commit but Lock Buffer not empty.]
  tx_mem.abort_hle_elision_buffer_unsupported_alignment [cpu] [Number of times a TSX Abort was triggered due to attempting an unsupported alignment from Lock Buffer.]
  tx_mem.abort_hle_store_to_elided_lock      [cpu] [Number of times a TSX Abort was triggered due to a non-release/commit store to lock.]
  tx_mem.hle_elision_buffer_full             [cpu] [Number of times we could not allocate Lock Buffer.]
  uops_dispatched_port.port_0                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 0.]
  uops_dispatched_port.port_1                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 1.]
  uops_dispatched_port.port_2                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 2.]
  uops_dispatched_port.port_3                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 3.]
  uops_dispatched_port.port_4                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 4.]
  uops_dispatched_port.port_5                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 5.]
  uops_dispatched_port.port_6                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 6.]
  uops_dispatched_port.port_7                [cpu] [Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 7.]
  uops_executed.core                         [cpu] [Number of uops executed from any thread.]
  uops_executed.core_cycles_ge_1             [cpu] [Cycles at least 1 micro-op is executed from any thread on physical core.]
  uops_executed.core_cycles_ge_2             [cpu] [Cycles at least 2 micro-op is executed from any thread on physical core.]
  uops_executed.core_cycles_ge_3             [cpu] [Cycles at least 3 micro-op is executed from any thread on physical core.]
  uops_executed.core_cycles_ge_4             [cpu] [Cycles at least 4 micro-op is executed from any thread on physical core.]
  uops_executed.core_cycles_none             [cpu] [Cycles with no micro-ops executed from any thread on physical core.]
  uops_executed.cycles_ge_1_uop_exec         [cpu] [Cycles where at least 1 uop was executed per-thread.]
  uops_executed.cycles_ge_2_uops_exec        [cpu] [Cycles where at least 2 uops were executed per-thread.]
  uops_executed.cycles_ge_3_uops_exec        [cpu] [Cycles where at least 3 uops were executed per-thread.]
  uops_executed.cycles_ge_4_uops_exec        [cpu] [Cycles where at least 4 uops were executed per-thread.]
  uops_executed.stall_cycles                 [cpu] [Counts cycles during which no uops were dispatched from the Reservation Station (RS) per thread.]
  uops_executed.thread                       [cpu] [Number of uops to be executed per-thread each cycle.]
  uops_executed.x87                          [cpu] [Counts the number of x87 uops executed.]
  uops_issued.any                            [cpu] [Counts the number of uops that the Resource Allocation Table (RAT) issues to the Reservation Station (RS).]
  uops_issued.slow_lea                       [cpu] [Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.]
  uops_issued.stall_cycles                   [cpu] [Counts cycles during which the Resource Allocation Table (RAT) does not issue any Uops to the reservation station (RS) for the current thread.]
  uops_issued.vector_width_mismatch          [cpu] [Counts the number of Blend Uops issued by the Resource Allocation Table (RAT) to the reservation station (RS) in order to preserve upper bits of vector registers. Starting with the Skylake microarchitecture, these Blend uops are needed since every Intel SSE instruction executed in Dirty Upper State needs to preserve bits 128-255 of the destination register. For more information, refer to Mixing Intel AVX and Intel SSE Code section of the Optimization Guide.]
  uops_retired.macro_fused                   [cpu] [Counts the number of macro-fused uops retired. (non precise)]
  uops_retired.retire_slots                  [cpu] [Counts the retirement slots used.]
  uops_retired.stall_cycles                  [cpu] [This event counts cycles without actually retired uops.]
  uops_retired.total_cycles                  [cpu] [Number of cycles using always true condition (uops_ret < 16) applied to non PEBS uops retired event.]
  unc_c_clockticks                           [This event is deprecated. Refer to new event UNC_CHA_CLOCKTICKS]
  unc_c_fast_asserted                        [This event is deprecated. Refer to new event UNC_CHA_FAST_ASSERTED.HORZ]
  unc_c_llc_lookup.data_read                 [This event is deprecated. Refer to new event UNC_CHA_LLC_LOOKUP.DATA_READ]
  unc_c_llc_lookup.remote_snoop              [This event is deprecated. Refer to new event UNC_CHA_LLC_LOOKUP.REMOTE_SNOOP]
  unc_c_llc_victims.e_state                  [This event is deprecated. Refer to new event UNC_CHA_LLC_VICTIMS.TOTAL_E]
  unc_c_llc_victims.f_state                  [This event is deprecated. Refer to new event UNC_CHA_LLC_VICTIMS.TOTAL_F]
  unc_c_llc_victims.m_state                  [This event is deprecated. Refer to new event UNC_CHA_LLC_VICTIMS.TOTAL_M]
  unc_c_llc_victims.s_state                  [This event is deprecated. Refer to new event UNC_CHA_LLC_VICTIMS.TOTAL_S]
  unc_c_tor_inserts.irq                      [This event is deprecated. Refer to new event UNC_CHA_TOR_INSERTS.IA]
  unc_c_tor_inserts.irq_hit                  [This event is deprecated. Refer to new event UNC_CHA_TOR_INSERTS.IA_HIT]
  unc_c_tor_inserts.irq_miss                 [This event is deprecated. Refer to new event UNC_CHA_TOR_INSERTS.IA_MISS]
  unc_c_tor_inserts.prq_hit                  [This event is deprecated. Refer to new event UNC_CHA_TOR_INSERTS.IO_HIT]
  unc_c_tor_inserts.prq_miss                 [This event is deprecated. Refer to new event UNC_CHA_TOR_INSERTS.IO_MISS]
  unc_c_tor_inserts.rem_all                  [This event is deprecated.]
  unc_c_tor_occupancy.irq                    [This event is deprecated. Refer to new event UNC_CHA_TOR_OCCUPANCY.IA]
  unc_c_tor_occupancy.irq_hit                [This event is deprecated. Refer to new event UNC_CHA_TOR_OCCUPANCY.IA_HIT]
  unc_c_tor_occupancy.irq_miss               [This event is deprecated. Refer to new event UNC_CHA_TOR_OCCUPANCY.IA_MISS]
  unc_cha_clockticks                         [Counts clockticks of the clock controlling the uncore caching and home agent (CHA).]
  unc_cha_core_snp.core_gtone                [Counts the number of transactions that trigger a configurable number of cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type and what CoreValid bits are set.  For example, if 2 CV bits are set on a data read, the cores must have the data in S state so it is not necessary to snoop them.  However, if only 1 CV bit is set the core my have modified the data.  If the transaction was an RFO, it would need to invalidate the lines.  This event can be filtered based on who triggered the initial snoop(s).]
  unc_cha_core_snp.evict_gtone               [Counts the number of transactions that trigger a configurable number of cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type and what CoreValid bits are set.  For example, if 2 CV bits are set on a data read, the cores must have the data in S state so it is not necessary to snoop them.  However, if only 1 CV bit is set the core my have modified the data.  If the transaction was an RFO, it would need to invalidate the lines.  This event can be filtered based on who triggered the initial snoop(s).]
  unc_cha_dir_lookup.no_snp                  [Counts transactions that looked into the multi-socket cacheline Directory state, and therefore did not send a snoop because the Directory indicated it was not needed]
  unc_cha_dir_lookup.snp                     [Counts  transactions that looked into the multi-socket cacheline Directory state, and sent one or more snoops, because the Directory indicated it was needed]
  unc_cha_dir_update.ha                      [Counts only multi-socket cacheline Directory state updates memory writes issued from the HA pipe. This does not include memory write requests which are for I (Invalid) or E (Exclusive) cachelines.]
  unc_cha_dir_update.tor                     [Counts only multi-socket cacheline Directory state updates due to memory writes issued from the TOR pipe which are the result of remote transaction hitting the SF/LLC and returning data Core2Core. This does not include memory write requests which are for I (Invalid) or E (Exclusive) cachelines.]
  unc_cha_fast_asserted.horz                 [Counts the number of cycles either the local or incoming distress signals are asserted.  Incoming distress includes up, dn and across.]
  unc_cha_hitme_hit.ex_rds                   [Counts read requests from a remote socket which hit in the HitME cache (used to cache the multi-socket Directory state) to a line in the E(Exclusive) state.  This includes the following read opcodes (RdCode, RdData, RdDataMigratory, RdCur, RdInv*, Inv*)]
  unc_cha_imc_reads_count.normal             [Counts when a normal (Non-Isochronous) read is issued to any of the memory controller channels from the CHA.]
  unc_cha_imc_writes_count.full              [Counts when a normal (Non-Isochronous) full line write is issued from the CHA to the any of the memory controller channels.]
  unc_cha_llc_victims.total_e                [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_cha_llc_victims.total_f                [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_cha_llc_victims.total_m                [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_cha_llc_victims.total_s                [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_cha_misc.rfo_hit_s                     [Counts when a RFO (the Read for Ownership issued before a  write) request hit a cacheline in the S (Shared) state.]
  unc_cha_requests.invitoe_local             [Counts the total number of requests coming from a unit on this socket for exclusive ownership of a cache line without receiving data (INVITOE) to the CHA.]
  unc_cha_requests.invitoe_remote            [Counts the total number of requests coming from a remote socket for exclusive ownership of a cache line without receiving data (INVITOE) to the CHA.]
  unc_cha_requests.reads                     [Counts read requests made into this CHA. Reads include all read opcodes (including RFO: the Read for Ownership issued before a  write) .]
  unc_cha_requests.reads_local               [Counts read requests coming from a unit on this socket made into this CHA. Reads include all read opcodes (including RFO: the Read for Ownership issued before a  write).]
  unc_cha_requests.reads_remote              [Counts read requests coming from a remote socket made into the CHA. Reads include all read opcodes (including RFO: the Read for Ownership issued before a  write).]
  unc_cha_requests.writes                    [Counts write requests made into the CHA, including streaming, evictions, HitM (Reads from another core to a Modified cacheline), etc.]
  unc_cha_requests.writes_local              [Counts  write requests coming from a unit on this socket made into this CHA, including streaming, evictions, HitM (Reads from another core to a Modified cacheline), etc.]
  unc_cha_requests.writes_remote             [Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).]
  unc_cha_rxc_inserts.irq                    [Counts number of allocations per cycle into the specified Ingress queue.]
  unc_cha_rxc_irq1_reject.pa_match           [Ingress (from CMS) Request Queue Rejects; PhyAddr Match]
  unc_cha_rxc_occupancy.irq                  [Counts number of entries in the specified Ingress queue in each cycle.]
  unc_cha_sf_eviction.e_state                [Counts snoop filter capacity evictions for entries tracking exclusive lines in the cores cache. Snoop filter capacity evictions occur when the snoop filter is full and evicts an existing entry to track a new entry. Does not count clean evictions such as when a cores cache replaces a tracked cacheline with a new cacheline.]
  unc_cha_sf_eviction.m_state                [Counts snoop filter capacity evictions for entries tracking modified lines in the cores cache. Snoop filter capacity evictions occur when the snoop filter is full and evicts an existing entry to track a new entry. Does not count clean evictions such as when a cores cache replaces a tracked cacheline with a new cacheline.]
  unc_cha_sf_eviction.s_state                [Counts snoop filter capacity evictions for entries tracking shared lines in the cores cache. Snoop filter capacity evictions occur when the snoop filter is full and evicts an existing entry to track a new entry. Does not count clean evictions such as when a cores cache replaces a tracked cacheline with a new cacheline.]
  unc_cha_snoop_resp.rsp_fwd_wb              [Counts when a transaction with the opcode type Rsp*Fwd*WB Snoop Response was received which indicates the data was written back to its home socket, and the cacheline was forwarded to the requestor socket.  This snoop response is only used in >= 4 socket systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to its home socket to be written back to memory.]
  unc_cha_snoop_resp.rsp_wbwb                [Counts when a transaction with the opcode type Rsp*WB Snoop Response was received which indicates which indicates the data was written back to its home.  This is returned when a non-RFO request hits a cacheline in the Modified state. The Cache can either downgrade the cacheline to a S (Shared) or I (Invalid) state depending on how the system has been configured.  This response will also be sent when a cache requests E (Exclusive) ownership of a cache line without receiving data, because the cache must acquire ownership.]
  unc_cha_snoop_resp.rspcnflcts              [Counts when a a transaction with the opcode type RspCnflct* Snoop Response was received. This is returned when a snoop finds an existing outstanding transaction in a remote caching agent. This triggers conflict resolution hardware. This covers both the opcode RspCnflct and RspCnflctWbI.]
  unc_cha_snoop_resp.rspi                    [Counts when a transaction with the opcode type RspI Snoop Response was received which indicates the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO: the Read for Ownership issued before a write hits non-modified data).]
  unc_cha_snoop_resp.rspifwd                 [Counts when a a transaction with the opcode type RspIFwd Snoop Response was received which indicates a remote caching agent forwarded the data and the requesting agent is able to acquire the data in E (Exclusive) or M (modified) states.  This is commonly returned with RFO (the Read for Ownership issued before a write) transactions.  The snoop could have either been to a cacheline in the M,E,F (Modified, Exclusive or Forward)  states.]
  unc_cha_snoop_resp.rspsfwd                 [Counts when a a transaction with the opcode type RspSFwd Snoop Response was received which indicates a remote caching agent forwarded the data but held on to its current copy.  This is common for data and code reads that hit in a remote socket in E (Exclusive) or F (Forward) state.]
  unc_cha_tor_inserts.ia                     [Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.; All locally initiated requests from iA Cores]
  unc_cha_tor_inserts.ia_hit                 [Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.]
  unc_cha_tor_inserts.ia_hit_crd             [TOR Inserts : CRds issued by iA Cores that Hit the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_hit_drd             [TOR Inserts : DRds issued by iA Cores that Hit the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_hit_llcprefcrd      [UNC_CHA_TOR_INSERTS.IA_HIT_LlcPrefCRD]
  unc_cha_tor_inserts.ia_hit_llcprefdrd      [UNC_CHA_TOR_INSERTS.IA_HIT_LlcPrefDRD]
  unc_cha_tor_inserts.ia_hit_llcprefrfo      [TOR Inserts : LLCPrefRFO issued by iA Cores that hit the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_hit_rfo             [TOR Inserts : RFOs issued by iA Cores that Hit the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_miss                [TOR Inserts : All requests from iA Cores that Missed the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_miss_crd            [TOR Inserts : CRds issued by iA Cores that Missed the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_miss_drd            [TOR Inserts : DRds issued by iA Cores that Missed the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_miss_llcprefcrd     [UNC_CHA_TOR_INSERTS.IA_MISS_LlcPrefCRD]
  unc_cha_tor_inserts.ia_miss_llcprefdrd     [UNC_CHA_TOR_INSERTS.IA_MISS_LlcPrefDRD]
  unc_cha_tor_inserts.ia_miss_llcprefrfo     [TOR Inserts : LLCPrefRFO issued by iA Cores that missed the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.ia_miss_rfo            [TOR Inserts : RFOs issued by iA Cores that Missed the LLC : Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.   Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_inserts.io_hit                 [Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.]
  unc_cha_tor_inserts.io_miss                [Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent.]
  unc_cha_tor_inserts.rem_all                [This event is deprecated.]
  unc_cha_tor_occupancy.ia                   [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   T; All locally initiated requests from iA Cores]
  unc_cha_tor_occupancy.ia_hit               [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   T]
  unc_cha_tor_occupancy.ia_hit_crd           [TOR Occupancy : CRds issued by iA Cores that Hit the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_hit_drd           [TOR Occupancy : DRds issued by iA Cores that Hit the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_hit_llcprefcrd    [UNC_CHA_TOR_OCCUPANCY.IA_HIT_LlcPrefCRD]
  unc_cha_tor_occupancy.ia_hit_llcprefdrd    [UNC_CHA_TOR_OCCUPANCY.IA_HIT_LlcPrefDRD]
  unc_cha_tor_occupancy.ia_hit_llcprefrfo    [TOR Occupancy : LLCPrefRFO issued by iA Cores that hit the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_hit_rfo           [TOR Occupancy : RFOs issued by iA Cores that Hit the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_miss              [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   T]
  unc_cha_tor_occupancy.ia_miss_crd          [TOR Occupancy : CRds issued by iA Cores that Missed the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_miss_drd          [TOR Occupancy : DRds issued by iA Cores that Missed the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_miss_llcprefcrd   [UNC_CHA_TOR_OCCUPANCY.IA_MISS_LlcPrefCRD]
  unc_cha_tor_occupancy.ia_miss_llcprefdrd   [UNC_CHA_TOR_OCCUPANCY.IA_MISS_LlcPrefDRD]
  unc_cha_tor_occupancy.ia_miss_llcprefrfo   [TOR Occupancy : LLCPrefRFO issued by iA Cores that missed the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_tor_occupancy.ia_miss_rfo          [TOR Occupancy : RFOs issued by iA Cores that Missed the LLC : For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.     Does not include addressless requests such as locks and interrupts.]
  unc_cha_upi_credit_occupancy.vn0_bl_ncs    [Accumulates the number of UPI credits available in each cycle for either the AD or BL ring.  In order to send snoops, snoop responses, requests, data, etc to the UPI agent on the ring, it is necessary to first acquire a credit for the UPI ingress buffer.  This stat increments by the number of credits that are available each cycle.  This can be used in conjunction with the Credit Acquired event in order to calculate average credit lifetime.  This event supports filtering for the different types of credits that are available.  Note that you must select the link that you would like to monitor using the link select register, and you can only monitor 1 link at a time.]
  unc_h_core_snp.core_gtone                  [This event is deprecated. Refer to new event UNC_CHA_CORE_SNP.CORE_GTONE]
  unc_h_core_snp.evict_gtone                 [This event is deprecated. Refer to new event UNC_CHA_CORE_SNP.EVICT_GTONE]
  unc_h_dir_lookup.no_snp                    [This event is deprecated. Refer to new event UNC_CHA_DIR_LOOKUP.NO_SNP]
  unc_h_dir_lookup.snp                       [This event is deprecated. Refer to new event UNC_CHA_DIR_LOOKUP.SNP]
  unc_h_dir_update.ha                        [This event is deprecated. Refer to new event UNC_CHA_DIR_UPDATE.HA]
  unc_h_dir_update.tor                       [This event is deprecated. Refer to new event UNC_CHA_DIR_UPDATE.TOR]
  unc_h_hitme_hit.ex_rds                     [This event is deprecated. Refer to new event UNC_CHA_HITME_HIT.EX_RDS]
  unc_h_misc.rfo_hit_s                       [This event is deprecated. Refer to new event UNC_CHA_MISC.RFO_HIT_S]
  unc_h_requests.invitoe_local               [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.INVITOE_LOCAL]
  unc_h_requests.invitoe_remote              [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.INVITOE_REMOTE]
  unc_h_requests.reads                       [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.READS]
  unc_h_requests.reads_local                 [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.READS_LOCAL]
  unc_h_requests.writes                      [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.WRITES]
  unc_h_requests.writes_local                [This event is deprecated. Refer to new event UNC_CHA_REQUESTS.WRITES_LOCAL]
  unc_h_rxc_inserts.irq                      [This event is deprecated. Refer to new event UNC_CHA_RxC_INSERTS.IRQ]
  unc_h_rxc_irq1_reject.pa_match             [This event is deprecated. Refer to new event UNC_CHA_RxC_IRQ1_REJECT.PA_MATCH]
  unc_h_rxc_occupancy.irq                    [This event is deprecated. Refer to new event UNC_CHA_RxC_OCCUPANCY.IRQ]
  unc_h_snoop_resp.rsp_fwd_wb                [This event is deprecated. Refer to new event UNC_CHA_SNOOP_RESP.RSP_FWD_WB]
  unc_h_snoop_resp.rspcnflct                 [This event is deprecated. Refer to new event UNC_CHA_SNOOP_RESP.RSPCNFLCTS]
  unc_h_snoop_resp.rspifwd                   [This event is deprecated. Refer to new event UNC_CHA_SNOOP_RESP.RSPIFWD]
  unc_h_snoop_resp.rspsfwd                   [This event is deprecated. Refer to new event UNC_CHA_SNOOP_RESP.RSPSFWD]
  unc_i_cache_total_occupancy.mem            [Total IRP occupancy of inbound read and write requests.  This is effectively the sum of read occupancy and write occupancy.]
  unc_i_coherent_ops.pcitom                  [PCIITOM request issued by the IRP unit to the mesh with the intention of writing a full cacheline to coherent memory, without a RFO.  PCIITOM is a speculative Invalidate to Modified command that requests ownership of the cacheline and does not move data from the mesh to IRP cache.]
  unc_i_coherent_ops.rfo                     [RFO request issued by the IRP unit to the mesh with the intention of writing a partial cacheline to coherent memory.  RFO is a Read For Ownership command that requests ownership of the cacheline and moves data from the mesh to IRP cache.]
  unc_i_faf_inserts                          [Inbound read requests to coherent memory, received by the IRP and inserted into the Fire and Forget queue (FAF), a queue used for processing inbound reads in the IRP.]
  unc_i_faf_occupancy                        [Occupancy of the IRP Fire and Forget (FAF) queue, a queue used for processing inbound reads in the IRP.]
  unc_i_transactions.wr_pref                 [Inbound write (fast path) requests to coherent memory, received by the IRP resulting in write ownership requests issued by IRP to the mesh.]
  unc_iio_clockticks                         [Counts clockticks of the 1GHz trafiic controller clock in the IIO unit.]
  unc_iio_comp_buf_inserts.cmpd.all_parts    [PCIe Completion Buffer Inserts of completions with data: Part 0-3]
  unc_iio_comp_buf_inserts.cmpd.part0        [PCIe Completion Buffer Inserts of completions with data: Part 0]
  unc_iio_comp_buf_inserts.cmpd.part1        [PCIe Completion Buffer Inserts of completions with data: Part 1]
  unc_iio_comp_buf_inserts.cmpd.part2        [PCIe Completion Buffer Inserts of completions with data: Part 2]
  unc_iio_comp_buf_inserts.cmpd.part3        [PCIe Completion Buffer Inserts of completions with data: Part 3]
  unc_iio_comp_buf_occupancy.cmpd.all_parts  [PCIe Completion Buffer occupancy of completions with data: Part 0-3]
  unc_iio_comp_buf_occupancy.cmpd.part0      [PCIe Completion Buffer occupancy of completions with data: Part 0]
  unc_iio_comp_buf_occupancy.cmpd.part1      [PCIe Completion Buffer occupancy of completions with data: Part 1]
  unc_iio_comp_buf_occupancy.cmpd.part2      [PCIe Completion Buffer occupancy of completions with data: Part 2]
  unc_iio_comp_buf_occupancy.cmpd.part3      [PCIe Completion Buffer occupancy of completions with data: Part 3]
  unc_iio_data_req_by_cpu.mem_read.part0     [Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part0. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_read.part1     [Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part1. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_read.part2     [Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part2. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_read.part3     [Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part3. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_write.part0    [Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part0 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_write.part1    [Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part1 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_write.part2    [Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part2 by  a unit on the main die (generally a core) or by another IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.mem_write.part3    [Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part3 by  a unit on the main die (generally a core) or by another IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_read.part0    [Counts ever peer to peer read request for 4 bytes of data made by a different IIO unit to the MMIO space of a card on IIO Part0. Does not include requests made by the same IIO unit. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_read.part1    [Counts ever peer to peer read request for 4 bytes of data made by a different IIO unit to the MMIO space of a card on IIO Part1. Does not include requests made by the same IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_read.part2    [Counts ever peer to peer read request for 4 bytes of data made by a different IIO unit to the MMIO space of a card on IIO Part2. Does not include requests made by the same IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_read.part3    [Counts ever peer to peer read request for 4 bytes of data made by a different IIO unit to the MMIO space of a card on IIO Part3. Does not include requests made by the same IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_write.part0   [Counts every peer to peer write request of 4 bytes of data made to the MMIO space of a card on IIO Part0 by a different IIO unit. Does not include requests made by the same IIO unit.  In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_write.part1   [Counts every peer to peer write request of 4 bytes of data made to the MMIO space of a card on IIO Part1 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_write.part2   [Counts every peer to peer write request of 4 bytes of data made to the MMIO space of a card on IIO Part2 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_by_cpu.peer_write.part3   [Counts every peer to peer write request of 4 bytes of data made to the MMIO space of a card on IIO Part3 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_read.part0     [Counts every read request for 4 bytes of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_read.part1     [Counts every read request for 4 bytes of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_read.part2     [Counts every read request for 4 bytes of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_read.part3     [Counts every read request for 4 bytes of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_write.part0    [Counts every write request of 4 bytes of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_write.part1    [Counts every write request of 4 bytes of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_write.part2    [Counts every write request of 4 bytes of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.mem_write.part3    [Counts every write request of 4 bytes of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_read.part0    [Counts every peer to peer read request for 4 bytes of data made by IIO Part0 to the MMIO space of an IIO target. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_read.part1    [Counts every peer to peer read request for 4 bytes of data made by IIO Part1 to the MMIO space of an IIO target. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_read.part2    [Counts every peer to peer read request for 4 bytes of data made by IIO Part2 to the MMIO space of an IIO target. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_read.part3    [Counts every peer to peer read request for 4 bytes of data made by IIO Part3 to the MMIO space of an IIO target. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_write.part0   [Counts every peer to peer write request of 4 bytes of data made by IIO Part0 to the MMIO space of an IIO target. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_write.part1   [Counts every peer to peer write request of 4 bytes of data made by IIO Part1 to the MMIO space of an IIO target. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_write.part2   [Counts every peer to peer write request of 4 bytes of data made by IIO Part2 to the MMIO space of an IIO target. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_data_req_of_cpu.peer_write.part3   [Counts every peer to peer write request of 4 bytes of data made by IIO Part3 to the MMIO space of an IIO target. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_payload_bytes_in.mem_read.part0    [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART0]
  unc_iio_payload_bytes_in.mem_read.part1    [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART1]
  unc_iio_payload_bytes_in.mem_read.part2    [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART2]
  unc_iio_payload_bytes_in.mem_read.part3    [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART3]
  unc_iio_payload_bytes_in.mem_write.part0   [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART0]
  unc_iio_payload_bytes_in.mem_write.part1   [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART1]
  unc_iio_payload_bytes_in.mem_write.part2   [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART2]
  unc_iio_payload_bytes_in.mem_write.part3   [This event is deprecated. Refer to new event UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART3]
  unc_iio_txn_req_by_cpu.mem_read.part0      [Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part0. In the general case, part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_read.part1      [Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part1. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_read.part2      [Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part2. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_read.part3      [Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) or by another IIO unit to the MMIO space of a card on IIO Part3. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_write.part0     [Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part0 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_write.part1     [Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part1 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_write.part2     [Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part2 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.mem_write.part3     [Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part3 by a unit on the main die (generally a core) or by another IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_read.part0     [Counts every peer to peer read request for up to a 64 byte transaction of data made by a different IIO unit to the MMIO space of a card on IIO Part0. Does not include requests made by the same IIO unit. In the general case, part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_read.part1     [Counts every peer to peer read request for up to a 64 byte transaction of data made by a different IIO unit to the MMIO space of a card on IIO Part1. Does not include requests made by the same IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_read.part2     [Counts every peer to peer read request for up to a 64 byte transaction of data made by a different IIO unit to the MMIO space of a card on IIO Part2. Does not include requests made by the same IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_read.part3     [Counts every peer to peer read request for up to a 64 byte transaction of data made by a different IIO unit to the MMIO space of a card on IIO Part3. Does not include requests made by the same IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_write.part0    [Counts every peer to peer write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part0 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_write.part1    [Counts every peer to peer write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part1 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_write.part2    [Counts every peer to peer write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part2 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_by_cpu.peer_write.part3    [Counts every peer to peer write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part3 by a different IIO unit. Does not include requests made by the same IIO unit. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_read.part0      [Counts every read request for up to a 64 byte transaction of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_read.part1      [Counts every read request for up to a 64 byte transaction of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_read.part2      [Counts every read request for up to a 64 byte transaction of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_read.part3      [Counts every read request for up to a 64 byte transaction of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_write.part0     [Counts every write request of up to a 64 byte transaction of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_write.part1     [Counts every write request of up to a 64 byte transaction of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_write.part2     [Counts every write request of up to a 64 byte transaction of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.mem_write.part3     [Counts every write request of up to a 64 byte transaction of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_read.part0     [Counts every peer to peer read request of up to a 64 byte transaction made by IIO Part0 to the MMIO space of an IIO target. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_read.part1     [Counts every peer to peer read request of up to a 64 byte transaction made by IIO Part1 to the MMIO space of an IIO target. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_read.part2     [Counts every peer to peer read request of up to a 64 byte transaction made by IIO Part2 to the MMIO space of an IIO target. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_read.part3     [Counts every peer to peer read request of up to a 64 byte transaction made by IIO Part3 to the MMIO space of an IIO target. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_write.part0    [Counts every peer to peer write request of up to a 64 byte transaction of data made by IIO Part0 to the MMIO space of an IIO target. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_write.part1    [Counts every peer to peer write request of up to a 64 byte transaction of data made by IIO Part1 to the MMIO space of an IIO target.In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_write.part2    [Counts every peer to peer write request of up to a 64 byte transaction of data made by IIO Part2 to the MMIO space of an IIO target. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.]
  unc_iio_txn_req_of_cpu.peer_write.part3    [Counts every peer to peer write request of up to a 64 byte transaction of data made by IIO Part3 to the MMIO space of an IIO target. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.]
  unc_m2m_bypass_m2m_egress.not_taken        [Counts traffic in which the M2M (Mesh to Memory) to iMC (Memory Controller) bypass was not taken]
  unc_m2m_direct2core_not_taken_dirstate     [Counts cycles when direct to core mode (which bypasses the CHA) was disabled]
  unc_m2m_direct2core_taken                  [Counts when messages were sent direct to core (bypassing the CHA)]
  unc_m2m_direct2core_txn_override           [Counts reads in which direct to core transactions (which would have bypassed the CHA) were overridden]
  unc_m2m_direct2upi_not_taken_credits       [Counts reads in which direct to Intel(R) Ultra Path Interconnect (UPI) transactions (which would have bypassed the CHA) were overridden]
  unc_m2m_direct2upi_not_taken_dirstate      [Counts cycles when the ability to send messages direct to the Intel(R) Ultra Path Interconnect (bypassing the CHA) was disabled]
  unc_m2m_direct2upi_taken                   [Counts when messages were sent direct to the Intel(R) Ultra Path Interconnect (bypassing the CHA)]
  unc_m2m_direct2upi_txn_override            [Counts when a read message that was sent direct to the Intel(R) Ultra Path Interconnect (bypassing the CHA) was overridden]
  unc_m2m_directory_lookup.any               [Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state, and found the cacheline marked in Any State (A, I, S or unused)]
  unc_m2m_directory_lookup.state_a           [Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state, and found the cacheline marked in the A (SnoopAll) state, indicating the cacheline is stored in another socket in any state, and we must snoop the other sockets to make sure we get the latest data.  The data may be stored in any state in the local socket.]
  unc_m2m_directory_lookup.state_i           [Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state , and found the cacheline marked in the I (Invalid) state indicating the cacheline is not stored in another socket, and so there is no need to snoop the other sockets for the latest data.  The data may be stored in any state in the local socket.]
  unc_m2m_directory_lookup.state_s           [Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state , and found the cacheline marked in the S (Shared) state indicating the cacheline is either stored in another socket in the S(hared) state , and so there is no need to snoop the other sockets for the latest data.  The data may be stored in any state in the local socket.]
  unc_m2m_directory_update.a2i               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from A (SnoopAll) to I (Invalid)]
  unc_m2m_directory_update.a2s               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from A (SnoopAll) to S (Shared)]
  unc_m2m_directory_update.any               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory to a new state]
  unc_m2m_directory_update.i2a               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from I (Invalid) to A (SnoopAll)]
  unc_m2m_directory_update.i2s               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from I (Invalid) to S (Shared)]
  unc_m2m_directory_update.s2a               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from S (Shared) to A (SnoopAll)]
  unc_m2m_directory_update.s2i               [Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from S (Shared) to I (Invalid)]
  unc_m2m_imc_reads.all                      [Counts when the M2M (Mesh to Memory) issues reads to the iMC (Memory Controller).]
  unc_m2m_imc_reads.normal                   [Counts when the M2M (Mesh to Memory) issues reads to the iMC (Memory Controller).  It only counts  normal priority non-isochronous reads.]
  unc_m2m_imc_writes.all                     [Counts when the M2M (Mesh to Memory) issues writes to the iMC (Memory Controller).]
  unc_m2m_imc_writes.ni                      [M2M Writes Issued to iMC; All, regardless of priority.]
  unc_m2m_imc_writes.partial                 [Counts when the M2M (Mesh to Memory) issues partial writes to the iMC (Memory Controller).  It only counts normal priority non-isochronous writes.]
  unc_m2m_prefcam_demand_promotions          [Counts when the M2M (Mesh to Memory) promotes a outstanding request in the prefetch queue due to a subsequent demand read request that entered the M2M with the same address.  Explanatory Side Note: The Prefetch queue is made of CAM (Content Addressable Memory)]
  unc_m2m_prefcam_inserts                    [Counts when the M2M (Mesh to Memory) receives a prefetch request and inserts it into its outstanding prefetch queue.  Explanatory Side Note: the prefect queue is made from CAM: Content Addressable Memory]
  unc_m2m_rxc_ad_inserts                     [Counts when the a new entry is Received(RxC) and then added to the AD (Address Ring) Ingress Queue from the CMS (Common Mesh Stop).  This is generally used for reads, and]
  unc_m2m_rxc_ad_occupancy                   [AD Ingress (from CMS) Occupancy]
  unc_m2m_rxc_bl_inserts                     [BL Ingress (from CMS) Allocations]
  unc_m2m_rxc_bl_occupancy                   [BL Ingress (from CMS) Occupancy]
  unc_m2m_txc_ad_inserts                     [AD Egress (to CMS) Allocations]
  unc_m2m_txc_ad_occupancy                   [AD Egress (to CMS) Occupancy]
  unc_m2m_txc_bl_inserts.all                 [BL Egress (to CMS) Allocations; All]
  unc_m2m_txc_bl_occupancy.all               [BL Egress (to CMS) Occupancy; All]
  unc_m3upi_upi_prefetch_spawn               [Count cases where flow control queue that sits between the Intel(R) Ultra Path Interconnect (UPI) and the mesh spawns a prefetch to the iMC (Memory Controller)]
  unc_m_act_count.wr                         [Counts DRAM Page Activate commands sent on this channel due to a write request to the iMC (Memory Controller).  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS (Column Access Select) command.]
  unc_m_cas_count.all                        [Counts all CAS (Column Address Select) commands issued to DRAM per memory channel.  CAS commands are issued to specify the address to read or write on DRAM, so this event increments for every read and write. This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write) is enabled or not.]
  unc_m_cas_count.rd                         [Counts all CAS (Column Access Select) read commands issued to DRAM on a per channel basis.  CAS commands are issued to specify the address to read or write on DRAM, and this event increments for every read.  This event includes underfill reads due to partial write requests.  This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write)  is enabled or not.]
  unc_m_cas_count.rd_reg                     [Counts CAS (Column Access Select) regular read commands issued to DRAM on a per channel basis.  CAS commands are issued to specify the address to read or write on DRAM, and this event increments for every regular read.  This event only counts regular reads and does not includes underfill reads due to partial write requests.  This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write)  is enabled or not.]
  unc_m_cas_count.rd_underfill               [Counts CAS (Column Access Select) underfill read commands issued to DRAM due to a partial write, on a per channel basis.  CAS commands are issued to specify the address to read or write on DRAM, and this command counts underfill reads.  Partial writes must be completed by first reading in the underfill from DRAM and then merging in the partial write data before writing the full line back to DRAM. This event will generally count about the same as the number of partial writes, but may be slightly less because of partials hitting in the WPQ (due to a previous write request).]
  unc_m_cas_count.wr                         [Counts all CAS (Column Address Select) commands issued to DRAM per memory channel.  CAS commands are issued to specify the address to read or write on DRAM, and this event increments for every write. This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write) is enabled or not.]
  unc_m_cas_count.wr_wmm                     [Counts the total number or DRAM Write CAS commands issued on this channel while in Write-Major-Mode.]
  unc_m_clockticks                           [Counts clockticks of the fixed frequency clock of the memory controller using one of the programmable counters.]
  unc_m_power_channel_ppd                    [Counts cycles when all the ranks in the channel are in PPD (PreCharge Power Down) mode. If IBT (Input Buffer Terminators)=off is enabled, then this event counts the cycles in PPD mode. If IBT=off is not enabled, then this event counts the number of cycles when being in PPD mode could have been taken advantage of.]
  unc_m_power_self_refresh                   [Counts the number of cycles when the iMC (memory controller) is in self-refresh and has a clock. This happens in some ACPI CPU package C-states for the sleep levels. For example, the PCU (Power Control Unit) may ask the iMC to enter self-refresh even though some of the cores are still processing. One use of this is for Intel? Dynamic Power Technology.  Self-refresh is required during package C3 and C6, but there is no clock in the iMC at this time, so it is not possible to count these cases.]
  unc_m_pre_count.page_miss                  [Counts the number of explicit DRAM Precharge commands sent on this channel as a result of a DRAM page miss. This does not include the implicit precharge commands sent with CAS commands in Auto-Precharge mode. This does not include Precharge commands sent as a result of a page close counter expiration.]
  unc_m_pre_count.rd                         [Counts the number of explicit DRAM Precharge commands issued on a per channel basis due to a read, so as to close the previous DRAM page, before opening the requested page.]
  unc_m_rpq_inserts                          [Counts the number of read requests allocated into the Read Pending Queue (RPQ).  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC.  The requests deallocate after the read CAS command has been issued to DRAM.  This event counts both Isochronous and non-Isochronous requests which were issued to the RPQ.]
  unc_m_rpq_occupancy                        [Counts the number of entries in the Read Pending Queue (RPQ) at each cycle.  This can then be used to calculate both the average occupancy of the queue (in conjunction with the number of cycles not empty) and the average latency in the queue (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC. They deallocate from the RPQ after the CAS command has been issued to memory.]
  unc_m_wpq_inserts                          [Counts the number of writes requests allocated into the Write Pending Queue (WPQ).  The WPQ is used to schedule writes out to the memory controller and to track the requests.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC (Memory Controller).  The write requests deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.]
  unc_m_wpq_occupancy                        [Counts the number of entries in the Write Pending Queue (WPQ) at each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule writes out to the memory controller and to track the requests.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC (memory controller).  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.  So, we provide filtering based on if the request has posted or not.  By using the 'not posted' filter, we can track how long writes spent in the iMC before completions were sent to the HA.  The 'posted' filter, on the other hand, provides information about how much queueing is actually happening in the iMC for writes before they are actually issued to memory.  High average occupancies will generally coincide with high write major mode counts.]
  unc_upi_clockticks                         [Counts clockticks of the fixed frequency clock controlling the Intel(R) Ultra Path Interconnect (UPI).  This clock runs at1/8th the 'GT/s' speed of the UPI link.  For example, a  9.6GT/s  link will have a fixed Frequency of 1.2 Ghz.]
  unc_upi_direct_attempts.d2c                [Counts Data Response (DRS) packets that attempted to go direct to core bypassing the CHA.]
  unc_upi_direct_attempts.d2k                [This event is deprecated. Refer to new event UNC_UPI_DIRECT_ATTEMPTS.D2U]
  unc_upi_direct_attempts.d2u                [Counts Data Response (DRS) packets that attempted to go direct to Intel(R) Ultra Path Interconnect (UPI) bypassing the CHA .]
  unc_upi_l1_power_cycles                    [Counts cycles when the Intel(R) Ultra Path Interconnect (UPI) is in L1 power mode.  L1 is a mode that totally shuts down the UPI link.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another, this event only coutns when both links are shutdown.]
  unc_upi_rxl0p_power_cycles                 [Counts cycles when the receive side (Rx) of the Intel(R) Ultra Path Interconnect(UPI) is in L0p power mode. L0p is a mode where we disable 60% of the UPI lanes, decreasing our bandwidth in order to save power.]
  unc_upi_rxl_bypassed.slot0                 [Counts incoming FLITs (FLow control unITs) which bypassed the slot0 RxQ buffer (Receive Queue) and passed directly to the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transferred, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.]
  unc_upi_rxl_bypassed.slot1                 [Counts incoming FLITs (FLow control unITs) which bypassed the slot1 RxQ buffer  (Receive Queue) and passed directly across the BGF and into the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transferred, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.]
  unc_upi_rxl_bypassed.slot2                 [Counts incoming FLITs (FLow control unITs) which bypassed the slot2 RxQ buffer (Receive Queue)  and passed directly to the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transferred, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.]
  unc_upi_rxl_flits.all_data                 [Counts valid data FLITs  (80 bit FLow control unITs: 64bits of data) received from any of the 3 Intel(R) Ultra Path Interconnect (UPI) Receive Queue slots on this UPI unit.]
  unc_upi_rxl_flits.all_null                 [Counts null FLITs (80 bit FLow control unITs) received from any of the 3 Intel(R) Ultra Path Interconnect (UPI) Receive Queue slots on this UPI unit.]
  unc_upi_rxl_flits.non_data                 [Counts protocol header and credit FLITs  (80 bit FLow control unITs) received from any of the 3 UPI slots on this UPI unit.]
  unc_upi_rxl_flits.null                     [This event is deprecated. Refer to new event UNC_UPI_RxL_FLITS.ALL_NULL]
  unc_upi_txl0p_power_cycles                 [Counts cycles when the transmit side (Tx) of the Intel(R) Ultra Path Interconnect(UPI) is in L0p power mode. L0p is a mode where we disable 60% of the UPI lanes, decreasing our bandwidth in order to save power.]
  unc_upi_txl_bypassed                       [Counts incoming FLITs (FLow control unITs) which bypassed the TxL(transmit) FLIT buffer and pass directly out the UPI Link. Generally, when data is transmitted across the Intel(R) Ultra Path Interconnect (UPI), it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used in L0p (Low Power) mode and (Link Layer Retry) LLR  mode, increasing latency to transfer out to the link.]
  unc_upi_txl_flits.all_data                 [Counts valid data FLITs (80 bit FLow control unITs: 64bits of data) transmitted (TxL) via any of the 3 Intel(R) Ultra Path Interconnect (UPI) slots on this UPI unit.]
  unc_upi_txl_flits.all_null                 [Counts null FLITs (80 bit FLow control unITs) transmitted via any of the 3 Intel(R) Ulra Path Interconnect (UPI) slots on this UPI unit.]
  unc_upi_txl_flits.data                     [Shows legal flit time (hides impact of L0p and L0c).; Count Data Flits (which consume all slots), but how much to count is based on Slot0-2 mask, so count can be 0-3 depending on which slots are enabled for counting..]
  unc_upi_txl_flits.idle                     [Counts when the Intel Ultra Path Interconnect(UPI) transmits an idle FLIT(80 bit FLow control unITs).  Every UPI cycle must be sending either data FLITs, protocol/credit FLITs or idle FLITs.]
  unc_upi_txl_flits.non_data                 [Counts protocol header and credit FLITs (80 bit FLow control unITs) transmitted across any of the 3 UPI (Ultra Path Interconnect) slots on this UPI unit.]
  unc_upi_txl_flits.null                     [This event is deprecated. Refer to new event UNC_UPI_TxL_FLITS.ALL_NULL]
